# AI skill levels:
#           0:     Wild Pokémon
#           1-31:  Basic trainer (young/inexperienced)
#           32-47: Some skill
#           48-99: High skill
#           100+:  Gym Leaders, E4, Champion, highest level
module PBTrainerAI
	# Minimum skill level to be in each AI category
	def PBTrainerAI.minimumSkill; 0; end
	def PBTrainerAI.mediumSkill; 1; end
	def PBTrainerAI.highSkill; 2; end
	def PBTrainerAI.bestSkill; 3; end   # Gym Leaders, E4, Champion
end



class PokeBattle_Battle
	################################################################################
	# Get a score for each move being considered (trainer-owned Pokémon only).
	# Moves with higher scores are more likely to be chosen.
	################################################################################
	def pbGetMoveScore(move,attacker,opponent,skill=100,roughdamage=10,initialscores=[],scoreindex=-1)    
		skill=0 if $game_switches[318]
		if roughdamage<1
			roughdamage=1
		end    
		PBDebug.log(sprintf("%s: initial score: %d",PBMoves.getName(move.id),roughdamage)) if $INTERNAL
		skill=PBTrainerAI.minimumSkill if skill<PBTrainerAI.minimumSkill
		#score=(pbRoughDamage(move,attacker,opponent,skill,move.basedamage)*100/opponent.hp) #roughdamage
		score=roughdamage
		bettertype = move.pbType(move.type,attacker,opponent)
		opponent=attacker.pbOppositeOpposing if !opponent
		opponent=opponent.pbPartner if opponent && opponent.isFainted?
		roles = pbGetMonRole(attacker,opponent,skill)
		prankpri = false
		if move.basedamage==0 && attacker.hasWorkingAbility(:PRANKSTER)
			prankpri = true
		end
		#~ dummyatt=attacker
		#~ if opponent.species==PBSpecies::ARCHILLES && opponent.item == PBItems::ARCHILLESITE && opponent.willmega
		#~ dummyatt=pbMegaStats(dummyatt)
		#~ end			
		#~ dummyopp=opponent
		#~ if opponent.species==PBSpecies::ARCHILLES && opponent.item == PBItems::ARCHILLESITE && opponent.willmega
		#~ dummyopp=pbMegaStats(opponent)
		#~ end		
		if move.priority>0 || prankpri || (attacker.hasWorkingAbility(:GALEWINGS) && move.type==PBTypes::FLYING) || (attacker.hasWorkingAbility(:QUICKCHARGE) && attacker.turncount==0)
			if move.basedamage>0        
				PBDebug.log(sprintf("Priority Check Begin")) if $INTERNAL
				fastermon = (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				if (opponent.species==PBSpecies::ARCHILLES && opponent.item==PBItems::ARCHILLESITE && attacker.species!=PBSpecies::INFLAGETAH) ||
					(opponent.species==PBSpecies::INFLAGETAH && fastermon) ||
					(opponent.hasWorkingAbility(:QUICKCHARGE) && opponent.turncount==0)
					fastermon=false
				end	
				if fastermon
					PBDebug.log(sprintf("AI Pokemon is faster.")) if $INTERNAL
				else
					PBDebug.log(sprintf("Player Pokemon is faster.")) if $INTERNAL
				end      
				if score>100
					if @doublebattle
						score*=1.3
					else
						if fastermon
							score*=1.3
						else
							score*=2
						end
					end
					#~ else
					#~ if attacker.hasWorkingAbility(:STANCECHANGE)
					#~ if !fastermon
					#~ score*=0.7
					#~ end
					#~ end
				end      
				movedamage = -1
				opppri = false     
				pridam = -1
				if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0        
						for i in @aiMoveMemory[2][opponent.pokemonIndex]                  
							tempdam = pbRoughDamage(i,opponent,attacker,skill,i.basedamage)
							if i.priority>0
								opppri=true
								if tempdam>pridam
									pridam = tempdam
								end              
							end    
							if tempdam>movedamage
								movedamage = tempdam
							end            
						end   
					elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0          
						for i in @aiMoveMemory[1]
							tempdam = pbRoughDamage(i,opponent,attacker,skill,i.basedamage)
							if i.priority>0
								opppri=true
								if tempdam>pridam
									pridam = tempdam
								end              
							end  
							if tempdam>movedamage
								movedamage = tempdam
							end            
						end   
					elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0          
						for i in @aiMoveMemory[0]
							tempdam = pbRoughDamage(i,opponent,attacker,skill,i.basedamage)
							if i.priority>0
								opppri=true
								if tempdam>pridam
									pridam = tempdam
								end              
							end  
							if tempdam>movedamage
								movedamage = tempdam
							end            
						end 
					end
				end
				PBDebug.log(sprintf("Expected damage taken: %d",movedamage)) if $INTERNAL
				if !fastermon
					maxdam=0
					if movedamage>attacker.hp
						if @doublebattle
							score+=75
						else
							score+=150
						end
						for j in opponent.moves#@aiMoveMemory[2][opponent.pokemonIndex]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>=attacker.hp
							score+=30
						end
					end
				end      
				if opppri
					score*=1.1
					if pridam>attacker.hp
						if fastermon
							score*=3
						else
							score*=0.5
						end
					end
				end
				if !fastermon && opponent.effects[PBEffects::TwoTurnAttack]>0
					score*=0
				end
				if $fefieldeffect==37
					score*=0
				end
				if opponent.hasWorkingAbility(:DAZZLING) || opponent.hasWorkingAbility(:QUEENLYMAJESTY)# || opponent.pbPartner.hasWorkingAbility(:DAZZLING) || opponent.pbPartner.hasWorkingAbility(:QUEENLYMAJESTY)
					score*=0
				end    
				quickcheck = false 
				if skill>=PBTrainerAI.highSkill 
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
						for j in @aiMoveMemory[2][opponent.pokemonIndex] 
							quickcheck = true if j.id==getID(PBMoves,:QUICKGUARD) 
						end              
					end
					if @doublebattle && @aiMoveMemory[2][opponent.pbPartner.pokemonIndex].length>0            
						for j in @aiMoveMemory[2][opponent.pbPartner.pokemonIndex] 
							quickcheck = true if j.id==getID(PBMoves,:QUICKGUARD) 
						end              
					end
				end        
				if quickcheck
					score*=0.2
				end  
			end      
			PBDebug.log(sprintf("Priority Check End")) if $INTERNAL
		elsif move.priority<0
			if fastermon
				score*=0.9
				if move.basedamage>0
					if opponent.effects[PBEffects::TwoTurnAttack]>0
						score*=2
					end
				end
			end      
		end   
		##### Alter score depending on the move's function code ########################
		case move.function
		when 0x00 # No extra effect
			if opponent.pbHasMove?(getID(PBMoves,:EXTREMESPEED)) && move.priority==2 && score>100
				score*=2
			end    
		when 0x01 # Splash       
		when 0x02 # Struggle
		when 0x03 # Sleep
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:AMPHAROS) && j.item == PBItems::AMPHAROSITE && j.willmega && !opponent.isAirborne?) || (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			if opponent.pbCanSleep?(false,false,false,move,attacker) && opponent.effects[PBEffects::Yawn]==0 && !theresone
				miniscore=100
				miniscore*=1.3
				if attacker.pbHasMove?(getID(PBMoves,:DREAMEATER)) || 
					attacker.pbHasMove?(getID(PBMoves,:NIGHTMARE)) || 
					attacker.hasWorkingAbility(:BADDREAMS) || (isConst?(attacker.species,PBSpecies,:DRAMSAMA) && attacker.item == PBItems::DRAMSAMAITE)
					miniscore*=1.5
				end 
				if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
					miniscore*=1.3
				end
				if opponent.hp==opponent.totalhp
					miniscore*=1.5
				end   
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPDEF]
				ministat+=opponent.stages[PBStats::SPEED]
				ministat+=opponent.stages[PBStats::ACCURACY]
				ministat+=opponent.stages[PBStats::EVASION]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:SLEEPTALK) || j.id==getID(PBMoves,:SNORE)
						end  
						miniscore*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:SLEEPTALK) || j.id==getID(PBMoves,:SNORE)
						end  
						miniscore*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:SLEEPTALK) || j.id==getID(PBMoves,:SNORE)
						end  
						miniscore*=0.1 if movecheck     
					end            
				end
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.7
				end           
				if roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Cleric") || roles.include?("Pivot")
					miniscore*=1.2
				end
				if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
					miniscore*=1.5
				end
				if attacker.hasWorkingItem(:LEFTOVERS) || attacker.hasWorkingItem(:ORANBERRY) || attacker.hasWorkingItem(:DRAMSAMITE) || (attacker.hasWorkingAbility(:POISONHEAL) && attacker.status==PBStatuses::POISON)
					miniscore*=1.5
				end
				if opponent.effects[PBEffects::Confusion]>0
					miniscore*=0.6
				end
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=0.7
				end
				if opponent.hasWorkingAbility(:SYNCHRONIZE) && attacker.status==0
					miniscore*=0.5
				end
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>30
							badmoves=false
						end
					end
					miniscore*=1.3 if badmoves
				end          
				if skill>=PBTrainerAI.bestSkill
					if move.id==getID(PBMoves,:SING)
						if opponent.hasWorkingAbility(:SOUNDPROOF)
							miniscore=0
						end
					end
					if move.id==getID(PBMoves,:GRASSWHISTLE)
						if opponent.hasWorkingAbility(:SOUNDPROOF)
							miniscore=0
						end
					end
				end
				if move.id==getID(PBMoves,:SPORE)
					if opponent.hasWorkingItem(:SAFETYGOGGLES) || opponent.hasWorkingAbility(:OVERCOAT) || opponent.pbHasType?(:GRASS)
						miniscore=0
					end
				end
				if skill>=PBTrainerAI.bestSkill
					if move.id==getID(PBMoves,:SLEEPPOWDER)
						if opponent.hasWorkingItem(:SAFETYGOGGLES) || opponent.hasWorkingAbility(:OVERCOAT) || opponent.pbHasType?(:GRASS)  #later
							miniscore=0
						end
					end
				end
				if opponent.hasWorkingAbility(:HYDRATION) && (pbWeather==PBWeather::RAINDANCE)
					miniscore=0
				end
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end
					miniscore+=100
					miniscore/=100.0
					score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust
				else
					miniscore/=100.0
					score*=miniscore
				end
			else
				if move.basedamage==0
					score=0
				end          
			end  
		when 0x04 # Yawn   
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:AMPHAROS) && j.item == PBItems::AMPHAROSITE && j.willmega && !opponent.isAirborne?) || (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			if opponent.effects[PBEffects::Yawn]<=0 && opponent.pbCanSleepYawn?(nil,false) && !theresone
				score*=1.2
				if attacker.pbHasMove?(getID(PBMoves,:DREAMEATER)) || 
					attacker.pbHasMove?(getID(PBMoves,:NIGHTMARE)) || 
					attacker.hasWorkingAbility(:BADDREAMS) || (isConst?(attacker.species,PBSpecies,:DRAMSAMA) && attacker.item == PBItems::DRAMSAMAITE)
					score*=1.4
				end
				if opponent.hp==opponent.totalhp
					score*=1.2
				end
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPDEF]
				ministat+=opponent.stages[PBStats::SPEED]
				ministat+=opponent.stages[PBStats::ACCURACY]
				ministat+=opponent.stages[PBStats::EVASION]
				if ministat>0
					miniscore=10*ministat
					miniscore+=100
					miniscore/=100.0
					score*=miniscore
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:SLEEPTALK) || j.id==getID(PBMoves,:SNORE)
						end  
						score*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:SLEEPTALK) || j.id==getID(PBMoves,:SNORE)
						end  
						score*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:SLEEPTALK) || j.id==getID(PBMoves,:SNORE)
						end  
						score*=0.1 if movecheck     
					end            
				end     
				if opponent.hasWorkingAbility(:NATURALCURE)
					score*=0.1
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					score*=0.8
				end  
				if roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Cleric") || roles.include?("Pivot")
					score*=1.2
				end
				if opponent.effects[PBEffects::Confusion]>0
					score*=0.4
				end
				if opponent.effects[PBEffects::Attract]>=0
					score*=0.5
				end
				if opponent.hasWorkingAbility(:HYDRATION) && (pbWeather==PBWeather::RAINDANCE)
					miniscore=0
				end
				if attacker.hasWorkingItem(:LEFTOVERS) || attacker.hasWorkingItem(:ORANBERRY) || (attacker.hasWorkingAbility(:POISONHEAL) && attacker.status==PBStatuses::POISON)
					score*=1.2
				end				
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>30
							badmoves=false
						end
					end
					score*=1.3 if badmoves
				end 
				#~ if  @opponent.is_a?(Array) == false
				#~ if @opponent.trainertype==PBTrainers::LEADER_Roxanne # DemICE
				#~ score*=2
				#~ end 
				#~ end 				        
			else
				score=0
			end        
		when 0x05 # Poison
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end			
			if opponent.pbCanPoison?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.2
				ministat=0
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPDEF]
				ministat+=opponent.stages[PBStats::EVASION]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end  
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.7
				end  
				if opponent.hasWorkingAbility(:TOXICBOOST) || opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.2
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
				if opponent.hasWorkingAbility(:POISONHEAL) || opponent.hasWorkingAbility(:MAGICGUARD)
					miniscore*=0.1
				end 
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end            
				end  
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.5
				end 
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>30
							badmoves=false
						end
					end
					miniscore*=1.2 if badmoves
				end  
				if attacker.pbHasMove?(getID(PBMoves,:VENOSHOCK)) || 
					attacker.pbHasMove?(getID(PBMoves,:VENOMDRENCH))
					miniscore*=1.6
				end   
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end
				if opponent.hasWorkingAbility(:SYNCHRONIZE) && attacker.status==0 && !attacker.pbHasType?(:POISON) && !attacker.pbHasType?(:STEEL)
					miniscore*=0.5
				end 
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end  
				if move.basedamage>0
					if opponent.hasWorkingAbility(:STURDY)
						miniscore*=1.1
					end
				end  
				if skill>=PBTrainerAI.bestSkill         
					if move.id==getID(PBMoves,:POISONPOWDER)
						if opponent.hasWorkingItem(:SAFETYGOGGLES) || opponent.hasWorkingAbility(:OVERCOAT) || opponent.pbHasType?(:GRASS)
							miniscore=0
						end              
					end            
				end
				if opponent.hasWorkingAbility(:HYDRATION) && pbWeather==PBWeather::RAINDANCE
					miniscore=0
				end
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end
					miniscore+=100
					miniscore/=100.0
					score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust
				else
					miniscore/=100.0
					score*=miniscore
				end
			else
				poisonvar=false
				fairyvar=false
				for mon in pbParty(attacker.index)
					next if mon.nil?
					if mon.hasType?(:FAIRY)
						fairyvar=true
					end
					if mon.hasType?(:POISON)
						poisonvar=true
					end
				end
				if move.basedamage<=0
					score=0
				end
			end
		when 0x06 # Toxic
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanPoison?(false,move,attacker) && !theresone 
				miniscore=100
				miniscore*=1.3
				ministat=0
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPDEF]
				ministat+=opponent.stages[PBStats::EVASION]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
					PBDebug.log(sprintf("kll2")) if $INTERNAL
				end   
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=2 if movecheck     
					end            
				end     
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.2
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.8
				end  
				if opponent.hasWorkingAbility(:TOXICBOOST) || opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.3
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end            
				end  
				if opponent.hasWorkingAbility(:POISONHEAL) || opponent.hasWorkingAbility(:MAGICGUARD)
					miniscore*=0.1
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end            
				end  
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.6
				end    
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>30
							badmoves=false
						end
					end
					miniscore*=1.3 if badmoves
				end   
				if attacker.pbHasMove?(getID(PBMoves,:VENOSHOCK)) || 
					attacker.pbHasMove?(getID(PBMoves,:VENOMDRENCH))
					miniscore*=1.6
				end           
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.1
				end
				if opponent.hasWorkingAbility(:SYNCHRONIZE) && attacker.status==0 && !attacker.pbHasType?(:POISON) && !attacker.pbHasType?(:STEEL)
					miniscore*=0.5
				end  
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.5
				end 
				if move.basedamage>0
					if opponent.hasWorkingAbility(:STURDY)
						miniscore*=1.1
					end
				end
				if move.id==getID(PBMoves,:TOXIC)
					if attacker.pbHasType?(:POISON)
						miniscore*=1.1
					end
				end
				if opponent.hasWorkingAbility(:HYDRATION) && pbWeather==PBWeather::RAINDANCE
					miniscore=0
				end
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end
					miniscore+=100
					miniscore/=100.0
					score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust
				else
					miniscore/=100.0
					score*=miniscore
				end
			else
				if move.basedamage<=0
					PBDebug.log(sprintf("KILL")) if $INTERNAL
					score=0
				end
			end          
		when 0x07 # Paralysis
			wavefail=false
			if move.id==getID(PBMoves,:THUNDERWAVE)
				typemod=move.pbTypeModifierAI(move.type,attacker,opponent) 
				if typemod==0
					wavefail=true
				end
			end  
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	  
			if opponent.pbCanParalyze?(false,move,attacker) && !wavefail && !theresone
				miniscore=100
				if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
					miniscore*=1.1
				end
				if opponent.hp==opponent.totalhp
					miniscore*=1.2
				end   
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.5
				end         
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.2
				end              
				if roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Pivot")
					miniscore*=1.2
				end
				if roles.include?("Tank")
					miniscore*=1.3
				end          
				if pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed && (pbRoughStat(opponent,PBStats::SPEED,skill)/2.0)<attacker.pbSpeed && @trickroom==0
					miniscore*=1.5
				end
				if pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)
					miniscore*=1.1
				end
				count = -1
				sweepvar = false
				for i in pbParty(attacker.index)
					count+=1
					next if i.nil?
					temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
					if temprole.include?("Sweeper")
						sweepvar = true
					end
				end  
				miniscore*=1.1 if sweepvar
				if opponent.effects[PBEffects::Confusion]>0
					miniscore*=1.1
				end
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=1.1
				end  
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end 
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end 
				if opponent.hasWorkingAbility(:SYNCHRONIZE) && attacker.status==0 && !attacker.pbHasType?(:ELECTRIC) && !attacker.pbHasType?(:GROUND)
					miniscore*=0.5
				end  
				#if move.id==getID(PBMoves,:NUZZLE)
				#  score+=40
				#end          
				if skill>=PBTrainerAI.bestSkill
					if move.id==getID(PBMoves,:STUNSPORE)
						if opponent.hasWorkingItem(:SAFETYGOGGLES) || opponent.hasWorkingAbility(:OVERCOAT) || opponent.pbHasType?(:GRASS)
							miniscore=0
						end   
					end            
				end
				if opponent.hasWorkingAbility(:HYDRATION) && pbWeather==PBWeather::RAINDANCE
					miniscore=0
				end
				if move.basedamage>0
					miniscore-=100
					if move.addlEffect.to_f != 100
						miniscore*=(move.addlEffect.to_f/100)
						if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
							miniscore*=2
						end     
					end
					miniscore+=100
					miniscore/=100.0
					score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust
				else
					miniscore/=100.0
					score*=miniscore
				end
			else
				if move.basedamage==0
					score=0
				end          
			end  
		when 0x08 # Thunder + Paralyze
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanParalyze?(false,move,attacker) && opponent.effects[PBEffects::Yawn]<=0
				miniscore=100
				miniscore*=1.2 
				if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
					miniscore*=1.3
				end
				if opponent.hp==opponent.totalhp
					miniscore*=1.1
				end   
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.5
				end  
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.2
				end                 
				if roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Pivot")
					miniscore*=1.2
				end
				if roles.include?("Tank")
					miniscore*=1.5
				end          
				if pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed && (pbRoughStat(opponent,PBStats::SPEED,skill)/2.0)<attacker.pbSpeed && @trickroom==0
					miniscore*=1.5
				end
				if pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)
					miniscore*=1.3
				end
				count = -1
				sweepvar = false
				for i in pbParty(attacker.index)
					count+=1
					next if i.nil?
					temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
					if temprole.include?("Sweeper")
						sweepvar = true
					end
				end  
				miniscore*=1.3 if sweepvar
				if opponent.effects[PBEffects::Confusion]>0
					miniscore*=1.1
				end
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=1.1
				end  
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end 
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end 
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0
				score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust
				#   if pbWeather == PBWeather::RAINDANCE || $fefieldeffect==27 || $fefieldeffect==28 # Rain/Mountain/Snowy Mountain
				#    score*=1.3
				#  end
				invulmove=PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function
				if invulmove==0xC9 || invulmove==0xCC || invulmove==0xCE
					if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
						score*=2
					end
				end
				if (pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed) ^ (@trickroom!=0)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:BOUNCE) || j.id==getID(PBMoves,:FLY) || j.id==getID(PBMoves,:SKYDROP)
							end  
							score*=1.2 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:BOUNCE) || j.id==getID(PBMoves,:FLY) || j.id==getID(PBMoves,:SKYDROP)
							end  
							score*=1.2 if movecheck      
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:BOUNCE) || j.id==getID(PBMoves,:FLY) || j.id==getID(PBMoves,:SKYDROP)
							end  
							score*=1.2 if movecheck     
						end            
					end  
				end
				#    if pbWeather == PBWeather::SUNNYDAY
				#      score*=0.7
				#     end          
			end   
		when 0x09 # Paralysis + Flinch
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanParalyze?(false,move,attacker)
				miniscore=100
				if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
					miniscore*=1.1
				end
				if opponent.hp==opponent.totalhp
					miniscore*=1.2
				end   
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.5
				end         
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.2
				end              
				if roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Pivot")
					miniscore*=1.2
				end
				if roles.include?("Tank")
					miniscore*=1.2
				end          
				if pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed && (pbRoughStat(opponent,PBStats::SPEED,skill)/2.0)<attacker.pbSpeed && @trickroom==0
					miniscore*=1.3
				end
				if pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)
					miniscore*=1.1
				end
				count = -1
				sweepvar = false
				for i in pbParty(attacker.index)
					count+=1
					next if i.nil?
					temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
					if temprole.include?("Sweeper")
						sweepvar = true
					end
				end  
				miniscore*=1.3 if sweepvar
				if opponent.effects[PBEffects::Confusion]>0
					miniscore*=1.1
				end
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=1.1
				end  
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end 
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end    
				if opponent.effects[PBEffects::Substitute]==0 && !opponent.hasWorkingAbility(:INNERFOCUS)
					if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
						miniscore*=1.1
					end
					if opponent.hasWorkingAbility(:STEADFAST)
						miniscore*=0.3
					end            
				end          
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0
				score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust          
			end         
		when 0x0A # Burn 
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanBurn?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.1
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end   
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.7
				end         
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:FLAREBOOST) || opponent.hasWorkingAbility(:MAGICGUARD)
					miniscore*=0.3
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end            
				end            
				if opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.1
				end    
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end            
				end           
				if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
					miniscore*=1.7
				end      
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end   
				if opponent.hasWorkingAbility(:SYNCHRONIZE) && attacker.status==0
					miniscore*=0.5
				end  
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end     
				if move.basedamage>0
					if opponent.hasWorkingAbility(:STURDY)
						miniscore*=1.1
					end
				end
				if opponent.hasWorkingAbility(:HYDRATION) && pbWeather==PBWeather::RAINDANCE
					miniscore=0
				end
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end
					miniscore+=100
					miniscore/=100.0
					score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust
				else
					miniscore/=100.0
					score*=miniscore
				end
			else
				if move.basedamage==0
					score=0
				end          
			end  
		when 0x0B # Burn + Flinch
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanBurn?(false,move,attacker) && !theresone
				miniscore=100
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end   
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.7
				end         
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:FLAREBOOST) || opponent.hasWorkingAbility(:MAGICGUARD)
					miniscore*=0.3
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end            
				end            
				if opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.1
				end    
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end            
				end           
				if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
					miniscore*=1.4
				end      
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end   
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end            
				if opponent.effects[PBEffects::Substitute]==0 && !opponent.hasWorkingAbility(:INNERFOCUS)
					if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
						miniscore*=1.1
					end
					if opponent.hasWorkingAbility(:STEADFAST)
						miniscore*=0.3
					end            
				end          
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0
				score*=miniscore  if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust         
			end           
		when 0x0C # Freeze
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanFreeze?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.2
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FLAMEWHEEL) || j.id==getID(PBMoves,:SACREDFIRE) || j.id==getID(PBMoves,:FLAREBLITZ) || j.id==getID(PBMoves,:FUSIONFLARE) || j.id==getID(PBMoves,:SCALD) || j.id==getID(PBMoves,:STEAMERUPTION)
						end  
						miniscore*=0 if movecheck             
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FLAMEWHEEL) || j.id==getID(PBMoves,:SACREDFIRE) || j.id==getID(PBMoves,:FLAREBLITZ) || j.id==getID(PBMoves,:FUSIONFLARE) || j.id==getID(PBMoves,:SCALD) || j.id==getID(PBMoves,:STEAMERUPTION)
						end  
						miniscore*=0 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FLAMEWHEEL) || j.id==getID(PBMoves,:SACREDFIRE) || j.id==getID(PBMoves,:FLAREBLITZ) || j.id==getID(PBMoves,:FUSIONFLARE) || j.id==getID(PBMoves,:SCALD) || j.id==getID(PBMoves,:STEAMERUPTION)
						end  
						miniscore*=0 if movecheck      
					end            
				end            
				if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
					miniscore*=1.2
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.2 if movecheck     
					end            
				end  
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPDEF]
				ministat+=opponent.stages[PBStats::SPEED]
				ministat+=opponent.stages[PBStats::ACCURACY]
				ministat+=opponent.stages[PBStats::EVASION]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.7
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.9
				end   
				if opponent.hasWorkingAbility(:SYNCHRONIZE) && attacker.status==0
					miniscore*=0.5
				end  
				miniscore-=100
				if move.addlEffect.to_f != 100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
				end
				miniscore+=100
				miniscore/=100.0      
				score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust          
			end  
		when 0x0D # Blizzard Freeze
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanFreeze?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.4
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FLAMEWHEEL) || j.id==getID(PBMoves,:SACREDFIRE) || j.id==getID(PBMoves,:FLAREBLITZ) || j.id==getID(PBMoves,:FUSIONFLARE) || j.id==getID(PBMoves,:SCALD) || j.id==getID(PBMoves,:STEAMERUPTION)
						end  
						miniscore*=0 if movecheck             
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FLAMEWHEEL) || j.id==getID(PBMoves,:SACREDFIRE) || j.id==getID(PBMoves,:FLAREBLITZ) || j.id==getID(PBMoves,:FUSIONFLARE) || j.id==getID(PBMoves,:SCALD) || j.id==getID(PBMoves,:STEAMERUPTION)
						end  
						miniscore*=0 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FLAMEWHEEL) || j.id==getID(PBMoves,:SACREDFIRE) || j.id==getID(PBMoves,:FLAREBLITZ) || j.id==getID(PBMoves,:FUSIONFLARE) || j.id==getID(PBMoves,:SCALD) || j.id==getID(PBMoves,:STEAMERUPTION)
						end  
						miniscore*=0 if movecheck      
					end            
				end            
				if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
					miniscore*=1.3
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.2 if movecheck     
					end            
				end  
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPDEF]
				ministat+=opponent.stages[PBStats::SPEED]
				ministat+=opponent.stages[PBStats::ACCURACY]
				ministat+=opponent.stages[PBStats::EVASION]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.8
				end            
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0       
				score*=miniscore  if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust         
				#  if pbWeather == PBWeather::HAIL
				#    score*=1.3
				#  end        
			end  
		when 0x0E # Freeze + Flinch
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanFreeze?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.1
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FLAMEWHEEL) || j.id==getID(PBMoves,:SACREDFIRE) || j.id==getID(PBMoves,:FLAREBLITZ) || j.id==getID(PBMoves,:FUSIONFLARE) || j.id==getID(PBMoves,:SCALD) || j.id==getID(PBMoves,:STEAMERUPTION)
						end  
						miniscore*=0 if movecheck             
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FLAMEWHEEL) || j.id==getID(PBMoves,:SACREDFIRE) || j.id==getID(PBMoves,:FLAREBLITZ) || j.id==getID(PBMoves,:FUSIONFLARE) || j.id==getID(PBMoves,:SCALD) || j.id==getID(PBMoves,:STEAMERUPTION)
						end  
						miniscore*=0 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FLAMEWHEEL) || j.id==getID(PBMoves,:SACREDFIRE) || j.id==getID(PBMoves,:FLAREBLITZ) || j.id==getID(PBMoves,:FUSIONFLARE) || j.id==getID(PBMoves,:SCALD) || j.id==getID(PBMoves,:STEAMERUPTION)
						end  
						miniscore*=0 if movecheck      
					end            
				end            
				if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
					miniscore*=1.3
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.2 if movecheck     
					end            
				end  
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPDEF]
				ministat+=opponent.stages[PBStats::SPEED]
				ministat+=opponent.stages[PBStats::ACCURACY]
				ministat+=opponent.stages[PBStats::EVASION]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.8
				end     
				if opponent.effects[PBEffects::Substitute]==0 && !opponent.hasWorkingAbility(:INNERFOCUS)
					if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
						miniscore*=1.1
					end
					if opponent.hasWorkingAbility(:STEADFAST)
						miniscore*=0.3
					end            
				end           
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0       
				score*=miniscore  if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust         
			end          
		when 0x0F # Flinch  
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	     
			if opponent.effects[PBEffects::Substitute]==0 && !opponent.hasWorkingAbility(:INNERFOCUS) && !theresone
				if (pbRoughStat(opponent,PBStats::SPEED,skill) < attacker.pbSpeed) ^ (@trickroom!=0)
					miniscore=100
					miniscore*=1.3
					if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || (pbWeather == PBWeather::HAIL && !opponent.pbHasType?(:ICE)) || (pbWeather == PBWeather::SANDSTORM && !opponent.pbHasType?(:ROCK) && !opponent.pbHasType?(:GROUND) && !opponent.pbHasType?(:STEEL)) || opponent.effects[PBEffects::LeechSeed]>-1 || opponent.effects[PBEffects::Curse]
						miniscore*=1.1
						if opponent.effects[PBEffects::Toxic]>0
							miniscore*=1.2
						end
					end            
					if opponent.hasWorkingAbility(:STEADFAST)
						miniscore*=0.3
					end
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !(isConst?(attacker.species,PBSpecies,:KIRICORN) && attacker.item == PBItems::KIRICORNITE && attacker.willmega)
						miniscore*=2
					end
					miniscore+=100
					miniscore/=100.0       
					score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust             
				end            
			end 
		when 0x10 # Stomp
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.effects[PBEffects::Substitute]==0 && !opponent.hasWorkingAbility(:INNERFOCUS) && !theresone
				if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
					miniscore=100
					miniscore*=1.3           
					if opponent.hasWorkingAbility(:STEADFAST)
						miniscore*=0.3
					end
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !(isConst?(attacker.species,PBSpecies,:KIRICORN) && attacker.item == PBItems::KIRICORNITE && attacker.willmega)
						miniscore*=2
					end
					miniscore+=100
					miniscore/=100.0       
					score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust              
				end                   
			end 
			score*=2 if opponent.effects[PBEffects::Minimize]
		when 0x11 # Snore
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if attacker.status==PBStatuses::SLEEP
				score*=2
				if opponent.effects[PBEffects::Substitute]!=0
					score*=1.3
				end
				if !opponent.hasWorkingAbility(:INNERFOCUS) && ((pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0))
					miniscore=100
					miniscore*=1.3
					if opponent.hasWorkingAbility(:STEADFAST)
						miniscore*=0.3
					end   
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end
					miniscore+=100
					miniscore/=100.0       
					score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust 
				end
			else
				score=0
			end        
		when 0x12 # Fake Out
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if attacker.turncount==0 #&& !opponent.hasWorkingAbility(:QUICKCHARGE)
				if opponent.effects[PBEffects::Substitute]==0 && !opponent.hasWorkingAbility(:INNERFOCUS) && !theresone
					if score>1
						if (pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed && @doublebattle) || !@doublebattle
							score=120
						else
							score=100
						end
					end
					if attacker.hasWorkingItem(:NORMALGEM)
						score*=1.1
						if attacker.hasWorkingAbility(:UNBURDEN)
							score*=2
						end
					end          
					if opponent.hasWorkingAbility(:STEADFAST)
						score*=0.3
					end          
				end 
				maxdam=0
				for j in attacker.moves
					tempdam = pbRoughDamage(j,attacker,opponent,skill,j.basedamage)
					maxdam=tempdam if tempdam>maxdam
				end  
				if $game_switches[330] && @turncount==0
					busted=false
					for i in 0...4
						if opponent.moves[i].id==getID(PBMoves,:WIDEGUARD) || opponent.moves[i].id==getID(PBMoves,:TRICKROOM) || opponent.moves[i].id==getID(PBMoves,:STICKYWEB) || opponent.pbPartner.moves[i].id==getID(PBMoves,:FAKEOUT)
							busted=true
						else 
							if maxdam<opponent.hp*3/4 || pbCheckGlobalAbility(:CLOUDNINE) 
								if opponent==@battlers[2]
									if opponent.species==PBSpecies::METALYNX
										score*=1.1
									else
										score*=0.9
									end
								end
							end
						end
					end
				end 
				score*=0.3 if attacker.hasWorkingAbility(:SHEERFORCE) || @field.effects[PBEffects::MistyTerrain]>0 || theresone
				#score*=0.7 if isConst?(opponent.species,PBSpecies,:METALYNX)     
				score*=30 if busted && !opponent.hasWorkingAbility(:INNERFOCUS) && !theresone && !isConst?(opponent.species,PBSpecies,:METALYNX)
				score*=30 if @weatherbackup==PBWeather::FALLOUT
			else
				score=0
			end                  
		when 0x13 # Confusion 
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanConfuse?(false,attacker) && !theresone
				miniscore=100
				miniscore*=1.2
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				if ministat>0
					minimini=10*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end      
				if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
					miniscore*=1.2
				end
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end   
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=1.1
				end
				if opponent.status==PBStatuses::PARALYSIS
					miniscore*=1.1
				end
				if opponent.effects[PBEffects::Yawn]>0 || opponent.status==PBStatuses::SLEEP
					miniscore*=0.4
				end
				if opponent.hasWorkingAbility(:TANGLEDFEET)
					miniscore*=0.7
				end    
				if attacker.pbHasMove?(getID(PBMoves,:SUBSTITUTE))
					miniscore*=1.2
					if attacker.effects[PBEffects::Substitute]>0
						miniscore*=1.3
					end
				end  
				if pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed && attacker.hasWorkingAbility(:PRANKSTER) && move.basedamage==0 && @trickroom==0
					miniscore*=1.5
				end       
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
					miniscore+=100
				end
				miniscore/=100.0
				score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust
			else
				if move.basedamage<=0
					score=0
				end
			end
		when 0x14 # Chatter
			#This is no longer used, Chatter works off of the standard confusion
			#function code, 0x13
		when 0x15 # Hurricane
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanConfuse?(false,attacker) && !theresone
				miniscore=100
				miniscore*=1.2
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				if ministat>0
					minimini=10*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end      
				if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
					miniscore*=1.2
				end
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end   
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=1.1
				end
				if opponent.status==PBStatuses::PARALYSIS
					miniscore*=1.1
				end
				if opponent.effects[PBEffects::Yawn]>0 || opponent.status==PBStatuses::SLEEP
					miniscore*=0.4
				end
				if opponent.hasWorkingAbility(:TANGLEDFEET)
					miniscore*=0.7
				end    
				if attacker.pbHasMove?(getID(PBMoves,:SUBSTITUTE))
					miniscore*=1.2
					if attacker.effects[PBEffects::Substitute]>0
						miniscore*=1.3
					end
				end      
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end     
				miniscore+=100
				miniscore/=100.0
				score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust          
			end        
			#   if pbWeather == PBWeather::RAINDANCE || $fefieldeffect==27 || $fefieldeffect==28 # Rain/Mountain/Snowy Mountain
			#      score*=1.3
			#    end
			invulmove=PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function
			if invulmove==0xC9 || invulmove==0xCC || invulmove==0xCE
				if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
					score*=2
				end
			end
			if (pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed) ^ (@trickroom!=0)
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:BOUNCE) || j.id==getID(PBMoves,:FLY) || j.id==getID(PBMoves,:SKYDROP)
						end  
						score*=1.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:BOUNCE) || j.id==getID(PBMoves,:FLY) || j.id==getID(PBMoves,:SKYDROP)
						end  
						score*=1.2 if movecheck      
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:BOUNCE) || j.id==getID(PBMoves,:FLY) || j.id==getID(PBMoves,:SKYDROP)
						end  
						score*=1.2 if movecheck     
					end            
				end  
			end  
			#     if pbWeather == PBWeather::SUNNYDAY
			#      score*=0.7
			#    end        
		when 0x16 # Attract
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			canattract=true
			agender=attacker.gender
			ogender=opponent.gender
			if agender==2 || ogender==2 || agender==ogender # Pokemon are genderless or same gender
				canattract=false
			elsif opponent.effects[PBEffects::Attract]>=0
				canattract=false
			elsif opponent.hasWorkingAbility(:OBLIVIOUS) || theresone || @field.effects[PBEffects::MistyTerrain]>0
				canattract=false
			end
			if canattract
				score*=1.2
				if attacker.hasWorkingAbility(:CUTECHARM)
					score*=0.7
				end
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					score*=1.3
				end          
				if opponent.effects[PBEffects::Confusion]>0
					score*=1.1
				end
				if opponent.status==PBStatuses::PARALYSIS
					score*=1.1
				end  
				if opponent.effects[PBEffects::Yawn]>0 || opponent.status==PBStatuses::SLEEP
					score*=0.5
				end           
				if opponent.hasWorkingItem(:DESTINYKNOT)
					score*=0.1
				end
				if attacker.pbHasMove?(getID(PBMoves,:SUBSTITUTE))
					score*=1.2
					if attacker.effects[PBEffects::Substitute]>0
						score*=1.3
					end
				end          
			else
				score=0
			end        
		when 0x17 # Tri Attack
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.status==0
				miniscore=100
				miniscore*=1.4
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPDEF]
				ministat+=opponent.stages[PBStats::SPEED]
				ministat+=opponent.stages[PBStats::ACCURACY]
				ministat+=opponent.stages[PBStats::EVASION]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.3
				end  
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0       
				score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust
			end        
		when 0x18 # Refresh
			if attacker.status==PBStatuses::BURN || attacker.status==PBStatuses::POISON || attacker.status==PBStatuses::PARALYSIS
				score*=3
				if attacker.species==PBSpecies::SYRENTIDE && (attacker.item == PBItems::SYRENTIDEITE || attacker.PULSE3) && (attacker.status==PBStatuses::PARALYSIS || attacker.effects[PBEffects::Toxic]>3) &&
					attacker.lastMoveUsed!=396
					score*=10
				end
			else
				score=0
			end
			if (attacker.hp.to_f)/attacker.totalhp>0.5
				score*=1.5
			else
				score*=0.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				score*=0.1
			end       
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=0.1
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=0.1
					end   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=0.1
					end          
				end          
			end  
			if opponent.effects[PBEffects::Toxic]>2
				score*=1.3
			end           
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:HEX)
					end  
					score*=1.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:HEX)
					end  
					score*=1.3 if movecheck      
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:HEX)
					end  
					score*=1.3 if movecheck     
				end            
			end          
		when 0x19 # Aromatherapy
			party=pbParty(attacker.index)
			statuses=0
			for i in 0...party.length
				statuses+=1 if party[i] && party[i].status!=0
			end
			if statuses!=0
				score*=1.2
				statuses=0
				count=-1
				for i in 0...party.length
					count+=1
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if party[i].status==PBStatuses::POISON && isConst?(party[i].ability,PBAbilities,:POISONHEAL)
						score*=0.5
					end
					if isConst?(party[i].ability,PBAbilities,:GUTS) || isConst?(party[i].ability,PBAbilities,:QUICKFEET) || party[i].knowsMove?(:FACADE)
						score*=0.8
					end
					if party[i].status==PBStatuses::SLEEP || party[i].status==PBStatuses::FROZEN
						score*=1.1
					end
					if (temproles.include?("Physical Wall") || temproles.include?("Special Wall")) && party[i].status==PBStatuses::POISON
						score*=1.2
					end
					if temproles.include?("Sweeper") && party[i].status==PBStatuses::PARALYSIS
						score*=1.2
					end
					if party[i].attack>party[i].spatk && party[i].status==PBStatuses::BURN
						score*=1.2
					end
				end
				if attacker.status!=0
					score*=1.3
				end
				if attacker.effects[PBEffects::Toxic]>2
					score*=1.3
				end        
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						score*=1.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						score*=1.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						score*=1.1 if movecheck     
					end            
				end  
			else
				score=0
			end        
		when 0x1A # Safeguard 
			if attacker.pbOwnSide.effects[PBEffects::Safeguard]<=0 && ((pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)) && attacker.status==0 && !roles.include?("Status Absorber") 
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:SPORE)
						end  
						score+=50 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:SPORE)
						end  
						score+=50 if movecheck      
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:SPORE)
						end  
						score+=50 if movecheck     
					end            
				end  
			else
				score=0
			end        
		when 0x1B # Psycho Shift  
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if attacker.status!=0 && opponent.status==0 && opponent.effects[PBEffects::Yawn]==0
				score*=1.3
				if opponent.status==0 && opponent.effects[PBEffects::Yawn]==0
					score*=1.3
					if attacker.status==PBStatuses::BURN && opponent.pbCanBurn?(false,nil,attacker) && !theresone
						if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
							score*=1.2
						end
						if opponent.hasWorkingAbility(:FLAREBOOST)
							score*=0.7
						end
					end
					if attacker.status==PBStatuses::PARALYSIS && opponent.pbCanParalyze?(false,nil,attacker) && !theresone
						if pbRoughStat(opponent,PBStats::ATTACK,skill)<pbRoughStat(opponent,PBStats::SPATK,skill)
							score*=1.1
						end
						if (pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed) ^ (@trickroom!=0)
							score*=1.2
						end
					end
					if attacker.status==PBStatuses::POISON && opponent.pbCanPoison?(false,nil,attacker) && !theresone
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									movecheck=true if j.isHealingMove?
								end  
								score*=1.1 if movecheck            
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									movecheck=true if j.isHealingMove?
								end  
								score*=1.1 if movecheck     
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									movecheck=true if j.isHealingMove?
								end  
								score*=1.1 if movecheck     
							end            
						end  
						if attacker.effects[PBEffects::Toxic]>0
							score*=1.4
						end
						if opponent.hasWorkingAbility(:POISONHEAL)
							score*=0.3
						end
						if opponent.hasWorkingAbility(:TOXICBOOST)
							score*=0.7
						end
					end
					if opponent.hasWorkingAbility(:SHEDSKIN) || opponent.hasWorkingAbility(:NATURALCURE) || opponent.hasWorkingAbility(:GUTS) || opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:MARVELSCALE)
						score*=0.7
					end
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:FACADE)
							end  
							score*=0.7 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:FACADE)
							end  
							score*=0.7 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:FACADE)
							end  
							score*=0.7 if movecheck     
						end            
					end            
				end
				if attacker.pbHasMove?(getID(PBMoves,:HEX))
					score*=1.3
				end
			else
				score=0
			end 
		when 0x1C # Howl
			miniscore=100        
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end        
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4.0)
						miniscore*=1.2
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4.0)
						miniscore*=1.2
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4.0)
						miniscore*=1.2
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.2
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			maxdam=0
			for j in attacker.moves
				tempdam = pbRoughDamage(j,attacker,opponent,skill,j.basedamage)
				maxdam=tempdam if tempdam>maxdam
			end  
			if (opponent.effects[PBEffects::AquaRing] || opponent.effects[PBEffects::Ingrain]) && maxdam<(opponent.hp*3/4)
				miniscore*=1.2
				miniscore*=1.2 if pbCheckGlobalAbility(:STALL)
			end
			berryhp=opponent.hp
			berryhp=opponent.hp+10 if maxdam<opponent.hp && opponent.hasWorkingItem(:ORANBERRY)				
			if maxdam<berryhp/3
				miniscore*=3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100          
				minimini/=100.0          
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end    
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::BURN
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end        
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken))  && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end
			if move.basedamage>0
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE)
					miniscore*=2
				end     
				miniscore+=100
				miniscore/=100.0          
				if attacker.pbTooHigh?(PBStats::ATTACK) 
					miniscore=1
				end       
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0.5
				end          
			else
				miniscore/=100.0
				if attacker.pbTooHigh?(PBStats::ATTACK)
					miniscore=0
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end            
				end
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0
				end            
			end
			score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE)  #>>DemICE #fixing sheer force
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end        
			if move.basedamage==0
				physmove=false
				for j in attacker.moves
					if j.pbIsPhysical?(j.type)
						physmove=true
					end
				end    
				score=0 if !physmove
			end        
		when 0x1D # Harden
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.3
			end
			if attacker.stages[PBStats::DEFENSE]>0
				ministat=attacker.stages[PBStats::DEFENSE]
				minimini=-15*ministat
				minimini+=100          
				minimini/=100.0          
				miniscore*=minimini
			end
			if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end        
				end          
			end          
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end        
			if move.basedamage>0
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE)
					miniscore*=2
				end     
				miniscore+=100
				miniscore/=100.0          
				if attacker.pbTooHigh?(PBStats::DEFENSE) 
					miniscore=1
				end       
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0.5
				end          
			else
				miniscore/=100.0
				if attacker.pbTooHigh?(PBStats::DEFENSE)
					miniscore=0
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end            
				end
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0
				end            
			end
			score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE)  #>>DemICE #fixing sheer force   
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x1E # Defense Curl
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0                    
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end  
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end    
			if @doublebattle
				miniscore*=0.3
			end
			if attacker.stages[PBStats::DEFENSE]>0
				ministat=attacker.stages[PBStats::DEFENSE]
				minimini=-15*ministat
				minimini+=100          
				minimini/=100.0          
				miniscore*=minimini
			end
			if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end        
				end          
			end  
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end       
			if move.basedamage>0
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE)
					miniscore*=2
				end     
				miniscore+=100
				miniscore/=100.0          
				if attacker.pbTooHigh?(PBStats::DEFENSE) 
					miniscore=1
				end       
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0.5
				end          
			else
				miniscore/=100.0
				if attacker.pbTooHigh?(PBStats::DEFENSE)
					miniscore=0
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end            
				end
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0
				end            
			end
			score*=miniscore  
			if attacker.pbHasMove?(getID(PBMoves,:ROLLOUT)) && attacker.effects[PBEffects::DefenseCurl]==false
				score*=1.3
			end 
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x1F # Flame Charge
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.attack<attacker.spatk
				if attacker.stages[PBStats::SPATK]<0            
					ministat=attacker.stages[PBStats::SPATK]
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
			else
				if attacker.stages[PBStats::ATTACK]<0            
					ministat=attacker.stages[PBStats::ATTACK]
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
			end
			ministat=0
			ministat+=opponent.stages[PBStats::DEFENSE]
			ministat+=opponent.stages[PBStats::SPDEF]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end        
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if @trickroom!=0
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end        
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.2
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end
			if attacker.hasWorkingAbility(:MOXIE)
				miniscore*=1.3
			end        
			if move.basedamage>0
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE)
					miniscore*=2
				end     
				miniscore+=100
				miniscore/=100.0          
				if attacker.pbTooHigh?(PBStats::SPEED) 
					miniscore=1
				end       
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0.5
				end          
			else
				miniscore/=100.0
				if attacker.pbTooHigh?(PBStats::SPEED)
					miniscore=0
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end            
				end
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0
				end            
			end
			score*=miniscore   
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x20 # Charge Beam
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end    
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end
			if move.basedamage>0
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE)
					miniscore*=2
				end     
				miniscore+=100
				miniscore/=100.0          
				if attacker.pbTooHigh?(PBStats::SPATK) 
					miniscore=1
				end       
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0.5
				end          
			else
				miniscore/=100.0
				if attacker.pbTooHigh?(PBStats::SPATK)
					miniscore=0
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end            
				end
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0
				end            
			end
			score*=miniscore
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if move.basedamage==0 
				specmove=false
				for j in attacker.moves
					if j.pbIsSpecial?(j.type)
						specmove=true
					end
				end    
				score=0 if !specmove
			end  
		when 0x21 # Charge        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end
			if opponent.status==PBStatuses::BURN
				miniscore*=1.2
			end        
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.3
			end
			if attacker.stages[PBStats::SPDEF]>0
				ministat=attacker.stages[PBStats::SPDEF]
				minimini=-15*ministat
				minimini+=100          
				minimini/=100.0          
				miniscore*=minimini
			end
			if pbRoughStat(opponent,PBStats::ATTACK,skill)<pbRoughStat(opponent,PBStats::SPATK,skill)
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end        
				end          
			end          
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end        
			if move.basedamage>0
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE)
					miniscore*=2
				end     
				miniscore+=100
				miniscore/=100.0          
				if attacker.pbTooHigh?(PBStats::SPDEF) 
					miniscore=1
				end       
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0.5
				end          
			else
				miniscore/=100.0
				if attacker.pbTooHigh?(PBStats::SPDEF)
					miniscore=0
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end            
				end
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0
				end            
			end
			elecmove=false
			for j in attacker.moves
				if j.type==13 # Move is Electric
					if j.basedamage>0
						elecmove=true
					end            
				end
			end
			if elecmove==true && attacker.effects[PBEffects::Charge]==0
				miniscore*=1.5
			end        
			score*=miniscore 
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x22 # Double Team         
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end   
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.4 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.4 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.4 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.2
			end         
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			If 
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end 
			if opponent.hasWorkingAbility(:NOGUARD)
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.accuracy==0
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.accuracy==0
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.accuracy==0
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end
			if attacker.hasWorkingItem(:BRIGHTPOWDER) || attacker.hasWorkingItem(:LAXINCENSE)
				miniscore*=1.3
			end
			if move.basedamage>0
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !(isConst?(attacker.species,PBSpecies,:KIRICORN) && attacker.item == PBItems::KIRICORNITE && attacker.willmega)
					miniscore*=2
				end     
				miniscore+=100
				miniscore/=100.0          
				if attacker.pbTooHigh?(PBStats::EVASION) 
					miniscore=1
				end       
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0.5
				end          
			else
				miniscore/=100.0
				if attacker.pbTooHigh?(PBStats::EVASION)
					miniscore=0
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end            
				end
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0
				end            
			end         
			score*=miniscore  
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x23 # Focus Energy    
			if move.basedamage==0
				if attacker.effects[PBEffects::FocusEnergy]!=2
					if (attacker.hp.to_f)/attacker.totalhp>0.75
						score*=1.2
					end
					if (attacker.hp.to_f)/attacker.totalhp<0.33
						score*=0.3          
					end
					if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
						score*=0.3
					end
					if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
						score*=0.3
					end     
					if opponent.effects[PBEffects::HyperBeam]>0
						score*=1.3
					end
					if opponent.effects[PBEffects::Yawn]>0
						score*=1.7
					end
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							maxdam=0
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if tempdam>maxdam
							end  
							if maxdam<(attacker.hp/4)
								score*=1.2
							end
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							maxdam=0
							for j in @aiMoveMemory[1]
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if tempdam>maxdam
							end  
							if maxdam<(attacker.hp/4)
								score*=1.2
							end  
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							maxdam=0
							for j in @aiMoveMemory[0]
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if tempdam>maxdam
							end  
							if maxdam<(attacker.hp/4)
								score*=1.2
							end        
						end          
					end  
					if attacker.turncount<2
						score*=1.2
					end
					if opponent.status!=0
						score*=1.2
					end
					if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
						score*=1.3
					end
					if opponent.effects[PBEffects::Encore]>0
						if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
							score*=1.5
						end          
					end  
					if attacker.effects[PBEffects::Confusion]>0
						score*=0.2
					end
					if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
						score*=0.6
					end
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
							end  
							score*=0.5 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
							end  
							score*=0.5 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
							end  
							score*=0.5 if movecheck     
						end            
					end         
					if @doublebattle
						score*=0.5
					end
					if attacker.hasWorkingAbility(:SUPERLUCK) || attacker.hasWorkingAbility(:SNIPER)
						score*=2
					end
					if attacker.hasWorkingItem(:SCOPELENS) || attacker.hasWorkingItem(:RAZORCLAW) || (attacker.hasWorkingItem(:STICK) && attacker.species==94)
						score*=1.2
					end
					if attacker.hasWorkingItem(:LANSATBERRY)
						score*=1.3
					end
					if opponent.hasWorkingAbility(:ANGERPOINT) || opponent.hasWorkingAbility(:SHELLARMOR) || opponent.hasWorkingAbility(:BATTLEARMOR)
						score*=0.2
					end
					if attacker.pbHasMove?(getID(PBMoves,:FROSTBREATH)) || attacker.pbHasMove?(getID(PBMoves,:STORMTHROW))
						score*=0.5
					end
					for j in attacker.moves
						if j.hasHighCriticalRate?
							score*=2
						end
					end          
				else
					score=0
				end     
				if (opponent.level-5)>attacker.level
					score*=0.6
					if (opponent.level-10)>attacker.level
						score*=0.2
					end
				end
			else
				if attacker.effects[PBEffects::FocusEnergy]!=2
					miniscore=100        
					if attacker.effects[PBEffects::Substitute]>0
						miniscore*=1.3
					end
					if initialscores.length>0
						badmoves=true
						for i in 0...initialscores.length
							next if i==scoreindex
							if initialscores[i]>20
								badmoves=false
							end
						end
						miniscore*=1.3 if badmoves
					end   
					#~ if (attacker.hp.to_f)/attacker.totalhp>0.75
					#~ miniscore*=1.2
					#~ end
					#~ if (attacker.hp.to_f)/attacker.totalhp<0.33
					#~ miniscore*=0.3
					#~ end
					if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
						miniscore*=0.3
					end
					#~ if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
					#~ miniscore*=0.3
					#~ end        
					if opponent.effects[PBEffects::HyperBeam]>0
						miniscore*=1.3
					end
					if opponent.effects[PBEffects::Yawn]>0
						miniscore*=1.7
					end
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							maxdam=0
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if tempdam>maxdam
							end  
							if maxdam<(attacker.hp/4.0)
								miniscore*=1.2
							else
								if move.basedamage==0
									miniscore*=0.8
									if maxdam>attacker.hp
										miniscore*=0.1
									end
								end
							end
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							maxdam=0
							for j in @aiMoveMemory[1]
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if tempdam>maxdam
							end  
							if maxdam<(attacker.hp/4.0)
								miniscore*=1.2
							else
								if move.basedamage==0
									miniscore*=0.8
									if maxdam>attacker.hp
										miniscore*=0.1
									end
								end
							end  
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							maxdam=0
							for j in @aiMoveMemory[0]
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if tempdam>maxdam
							end  
							if maxdam<(attacker.hp/4.0)
								miniscore*=1.2
							else
								if move.basedamage==0
									miniscore*=0.8
									if maxdam>attacker.hp
										miniscore*=0.1
									end
								end
							end        
						end          
					end  
					if attacker.turncount<2
						miniscore*=1.2
					end
					if opponent.status!=0
						miniscore*=1.2
					end
					if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
						miniscore*=1.3
					end
					if opponent.effects[PBEffects::Encore]>0
						if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
							miniscore*=1.5
						end          
					end  
					if attacker.effects[PBEffects::Confusion]>0
						miniscore*=0.2
					end
					if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
						miniscore*=0.6
					end
					if attacker.hasWorkingAbility(:SUPERLUCK) || attacker.hasWorkingAbility(:SNIPER)
						miniscore*=1.1
					end
					if attacker.hasWorkingItem(:SCOPELENS) || attacker.hasWorkingItem(:RAZORCLAW) || (attacker.hasWorkingItem(:STICK) && attacker.species==94)
						miniscore*=1.1
					end
					if attacker.hasWorkingItem(:LANSATBERRY)
						miniscore*=1.2
					end
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
							end  
							miniscore*=0.5 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
							end  
							miniscore*=0.5 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
							end  
							miniscore*=0.5 if movecheck     
						end            
					end  
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.isHealingMove?
							end  
							miniscore*=1.3 if movecheck     
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.isHealingMove?
							end  
							miniscore*=1.3 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.isHealingMove?
							end  
							miniscore*=1.3 if movecheck     
						end            
					end  
					if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken))  && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
						miniscore*=1.4
					end
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.priority>0
							end  
							miniscore*=0.6 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.priority>0
							end  
							miniscore*=0.6 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.priority>0
							end  
							miniscore*=0.6 if movecheck     
						end            
					end
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE)
						miniscore*=2
					end     
					miniscore+=100
					miniscore/=100.0                        
					score*=miniscore
				end
			end
		when 0x24 # Bulk Up        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end    
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::BURN
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end        
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end
			end  
			if physmove && !attacker.pbTooHigh?(PBStats::ATTACK) 
				miniscore/=100.0
				score*=miniscore
			end
			miniscore=100
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end
			if pbRoughStat(opponent,PBStats::SPATK,skill)<pbRoughStat(opponent,PBStats::ATTACK,skill)
				if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
					if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && (attacker.hp.to_f)/attacker.totalhp>0.75
						miniscore*=1.3
					elsif (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						miniscore*=0.7
					end
				end
				miniscore*=1.3
			end
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.2
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end 
			if !attacker.pbTooHigh?(PBStats::DEFENSE) 
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end
			if attacker.pbTooHigh?(PBStats::ATTACK) && attacker.pbTooHigh?(PBStats::DEFENSE) 
				score*=0
			end    
		when 0x25 # Coil        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end    
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::BURN
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end        
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end
			end  
			if physmove && !attacker.pbTooHigh?(PBStats::ATTACK)          
				miniscore/=100.0
				score*=miniscore
			end
			miniscore=100
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end
			if pbRoughStat(opponent,PBStats::SPATK,skill)<pbRoughStat(opponent,PBStats::ATTACK,skill)
				if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
					if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && (attacker.hp.to_f)/attacker.totalhp>0.75
						miniscore*=1.3
					elsif (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						miniscore*=0.7
					end
				end
				miniscore*=1.3
			end
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.2
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end 
			if !attacker.pbTooHigh?(PBStats::DEFENSE)         
				miniscore/=100.0
				score*=miniscore
			end
			miniscore=100
			weakermove=false
			for j in attacker.moves
				if j.basedamage<95
					weakermove=true
				end
			end
			if weakermove
				miniscore*=1.3
			end       
			if opponent.stages[PBStats::EVASION]>0
				ministat=opponent.stages[PBStats::EVASION]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if opponent.hasWorkingItem(:BRIGHTPOWDER) || opponent.hasWorkingItem(:LAXINCENSE)
				miniscore*=1.3
			end
			if !attacker.pbTooHigh?(PBStats::ACCURACY)           
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end
			if attacker.pbTooHigh?(PBStats::ATTACK) && attacker.pbTooHigh?(PBStats::DEFENSE) && attacker.pbTooHigh?(PBStats::ACCURACY)
				score*=0
			end
		when 0x26 # Dragon Dance        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.5
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.2
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if (attacker.pbSpeed<=pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=1.3
			end    
			if roles.include?("Sweeper")
				miniscore*=1.5
			end
			if attacker.status==PBStatuses::BURN
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end        
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end
			end  
			if physmove && !attacker.pbTooHigh?(PBStats::ATTACK)          
				miniscore/=100.0
				score*=miniscore
			end
			miniscore=100
			if attacker.stages[PBStats::ATTACK]<0
				ministat=attacker.stages[PBStats::ATTACK]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=0.8
			end 
			if @trickroom!=0
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end                
			if attacker.hasWorkingAbility(:MOXIE)
				miniscore*=1.3
			end
			if !attacker.pbTooHigh?(PBStats::SPEED)        
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end 
			if attacker.pbTooHigh?(PBStats::ATTACK) && attacker.pbTooHigh?(PBStats::SPEED) 
				score*=0
			end    
		when 0x27 # Work Up        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.2
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end    
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			specmove=false
			for j in attacker.moves
				if j.pbIsSpecial?(j.type)
					specmove=true
				end
			end        
			if attacker.status==PBStatuses::BURN && !specmove
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end        
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end
			end  
			if (physmove && !attacker.pbTooHigh?(PBStats::ATTACK)) || (specmove && !attacker.pbTooHigh?(PBStats::SPATK))
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end
			if attacker.pbTooHigh?(PBStats::SPATK) && attacker.pbTooHigh?(PBStats::ATTACK)
				score*=0
			end    
		when 0x28 # Growth        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.2
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end    
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			specmove=false
			for j in attacker.moves
				if j.pbIsSpecial?(j.type)
					specmove=true
				end
			end        
			if attacker.status==PBStatuses::BURN && !specmove
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end        
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end
			end  
			if (physmove && !attacker.pbTooHigh?(PBStats::ATTACK)) || (specmove && !attacker.pbTooHigh?(PBStats::SPATK))	        
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end      
			if attacker.pbTooHigh?(PBStats::SPATK) && attacker.pbTooHigh?(PBStats::ATTACK)
				score*=0
			end
		when 0x29 # Hone Claws        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.2
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end        
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=1.5
			end 
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::BURN
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end        
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end
			end  
			if physmove && !attacker.pbTooHigh?(PBStats::ATTACK) 
				miniscore/=100.0
				score*=miniscore
			end
			miniscore=100
			weakermove=false
			for j in attacker.moves
				if j.basedamage<95
					weakermove=true
				end
			end
			if weakermove
				miniscore*=1.3
			end       
			if opponent.stages[PBStats::EVASION]>0
				ministat=opponent.stages[PBStats::EVASION]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if opponent.hasWorkingItem(:BRIGHTPOWDER) || opponent.hasWorkingItem(:LAXINCENSE)
				miniscore*=1.3
			end
			if !attacker.pbTooHigh?(PBStats::ACCURACY)         
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end 
			if attacker.pbTooHigh?(PBStats::ACCURACY) && attacker.pbTooHigh?(PBStats::ATTACK)
				score*=0
			end
		when 0x2A # Cosmic Power        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.1
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.8
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.9
			end
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.5
			end        
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.9
			end
			if attacker.stages[PBStats::DEFENSE]>0 || attacker.stages[PBStats::SPDEF]>0
				ministat=attacker.stages[PBStats::SPDEF]
				ministat+=attacker.stages[PBStats::DEFENSE]
				minimini=-5*ministat
				minimini+=100          
				minimini/=100.0          
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end        
				end          
			end          
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Baton Passer")
				miniscore*=1.3
			end   
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end        
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=2
			end
			if attacker.pbHasMove?(getID(PBMoves,:BATONPASS))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:STOREDPOWER))
				miniscore*=1.5
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end 
			if !attacker.pbTooHigh?(PBStats::SPDEF) || !attacker.pbTooHigh?(PBStats::DEFENSE)         
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end        
			if attacker.pbTooHigh?(PBStats::SPDEF) && attacker.pbTooHigh?(PBStats::DEFENSE)
				score*=0
			end
		when 0x2B # Quiver Dance        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100        
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end    
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end        
			specmove=false
			for j in attacker.moves
				if j.pbIsSpecial?(j.type)
					specmove=true
				end
			end  
			if specmove && !attacker.pbTooHigh?(PBStats::SPATK)         
				miniscore/=100.0
				score*=miniscore
			end
			miniscore=100
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end
			if pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)
				if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
					if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && (attacker.hp.to_f)/attacker.totalhp>0.75
						miniscore*=1.3
					elsif (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						miniscore*=0.7
					end
				end
				miniscore*=1.3
			end
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end 
			if !attacker.pbTooHigh?(PBStats::SPDEF)          
				miniscore/=100.0
				score*=miniscore
			end
			miniscore=100
			if attacker.stages[PBStats::SPATK]<0
				ministat=attacker.stages[PBStats::SPATK]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=0.8
			end 
			if @trickroom!=0
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end                
			if !attacker.pbTooHigh?(PBStats::SPEED)         
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end  
			if attacker.pbTooHigh?(PBStats::SPATK) && attacker.pbTooHigh?(PBStats::SPDEF) && attacker.pbTooHigh?(PBStats::SPEED)
				score*=0
			end
		when 0x2C # Calm Mind        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100        
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end    
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end        
			specmove=false
			for j in attacker.moves
				if j.pbIsSpecial?(j.type)
					specmove=true
				end
			end  
			if specmove && !attacker.pbTooHigh?(PBStats::SPATK)        
				miniscore/=100.0
				score*=miniscore
			end
			miniscore=100
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end
			if pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)
				if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
					if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && (attacker.hp.to_f)/attacker.totalhp>0.75
						miniscore*=1.3
					elsif (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						miniscore*=0.7
					end
				end        
				miniscore*=1.3
			end
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end 
			if !attacker.pbTooHigh?(PBStats::SPDEF)           
				miniscore/=100.0
				score*=miniscore
			end    
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end
			if attacker.pbTooHigh?(PBStats::SPATK) && attacker.pbTooHigh?(PBStats::SPDEF) 
				score*=0
			end        
		when 0x2D # Ancientpower        
			miniscore=100
			miniscore*=2 
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			miniscore-=100
			miniscore*=(move.addlEffect.to_f/100)
			if attacker.hasWorkingAbility(:SERENEGRACE)
				miniscore*=2
			end     
			miniscore+=100
			miniscore/=100.0   
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore=0.1
			end 
			score*=miniscore if !attacker.hasWorkingAbility(:SHEERFORCE)  #>>DemICE #fixing sheer force
		when 0x2E # Swords Dance        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if attacker.effects[PBEffects::KingsShield]==true
				score*=2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.1
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end    
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::BURN
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end        
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end
			miniscore/=100.0
			if attacker.pbTooHigh?(PBStats::ATTACK)
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end            
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end  
			end        
			miniscore=0 if !physmove  
			score*=miniscore
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if attacker.hasWorkingAbility(:SPEEDBOOST)
				score*=2
			end 			
		when 0x2F # Iron Defense        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end 
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.3
			end
			if attacker.stages[PBStats::DEFENSE]>0
				ministat=attacker.stages[PBStats::DEFENSE]
				minimini=-15*ministat
				minimini+=100          
				minimini/=100.0          
				miniscore*=minimini
			end
			if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end        
				end          
			end          
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end  
			if move.basedamage>0
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE)
					miniscore*=2
				end     
				miniscore+=100
				miniscore/=100.0          
				if attacker.pbTooHigh?(PBStats::DEFENSE) 
					miniscore=1
				end       
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0.5
				end          
			else
				miniscore/=100.0
				if attacker.pbTooHigh?(PBStats::DEFENSE)
					miniscore=0
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
						end  
						miniscore*=0 if movecheck    
					end            
				end
				if attacker.hasWorkingAbility(:CONTRARY)
					miniscore*=0
				end            
			end
			score*=miniscore 
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x30 # Agility        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8 if !attacker.hasWorkingItem(:WEAKNESSPOLICY)
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8 if !attacker.hasWorkingItem(:WEAKNESSPOLICY)
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8 if !attacker.hasWorkingItem(:WEAKNESSPOLICY)
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.attack<attacker.spatk
				if attacker.stages[PBStats::SPATK]<0            
					ministat=attacker.stages[PBStats::SPATK]
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
			else
				if attacker.stages[PBStats::ATTACK]<0            
					ministat=attacker.stages[PBStats::ATTACK]
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
			end
			ministat=0
			ministat+=opponent.stages[PBStats::DEFENSE]
			ministat+=opponent.stages[PBStats::SPDEF]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end        
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=0.3
				livecount=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount+=1 if i.hp!=0
				end
				if livecount==1
					miniscore*=0.1
				end          
			end
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if @trickroom!=0
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end        
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.2
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end
			if attacker.hasWorkingAbility(:MOXIE)
				miniscore*=1.3
			end        
			miniscore/=100.0
			if attacker.pbTooHigh?(PBStats::SPEED) || (attacker.stages[PBStats::SPEED]>=2  && attacker.species==PBSpecies::DEAREWL)
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end            
			score*=miniscore  
			if attacker.hasWorkingItem(:WEAKNESSPOLICY)
				score*=3
			end			
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x31 # Autotomize        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.attack<attacker.spatk
				if attacker.stages[PBStats::SPATK]<0            
					ministat=attacker.stages[PBStats::SPATK]
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
			else
				if attacker.stages[PBStats::ATTACK]<0            
					ministat=attacker.stages[PBStats::ATTACK]
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
			end
			ministat=0
			ministat+=opponent.stages[PBStats::DEFENSE]
			ministat+=opponent.stages[PBStats::SPDEF]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end        
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=0.3
				livecount=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount+=1 if i.hp!=0
				end
				if livecount==1
					miniscore*=0.1
				end          
			end
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if @trickroom!=0
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end        
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.2
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end
			if attacker.hasWorkingAbility(:MOXIE)
				miniscore*=1.3
			end        
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:LOWKICK) || j.id==getID(PBMoves,:GRASSKNOT)
					end  
					miniscore*=1.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:LOWKICK) || j.id==getID(PBMoves,:GRASSKNOT)
					end  
					miniscore*=1.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:LOWKICK) || j.id==getID(PBMoves,:GRASSKNOT)
					end  
					miniscore*=1.5 if movecheck    
				end            
			end  
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:HEATCRASH) || j.id==getID(PBMoves,:HEAVYSLAM)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:HEATCRASH) || j.id==getID(PBMoves,:HEAVYSLAM)
					end  
					miniscore*=0.5 if movecheck    
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:HEATCRASH) || j.id==getID(PBMoves,:HEAVYSLAM)
					end  
					miniscore*=0.5 if movecheck    
				end            
			end      
			if attacker.pbHasMove?(getID(PBMoves,:HEATCRASH)) || attacker.pbHasMove?(getID(PBMoves,:HEAVYSLAM))
				miniscore*=0.8
			end
			miniscore/=100.0
			if attacker.pbTooHigh?(PBStats::SPEED)
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end            
			score*=miniscore
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x32 # Nasty Plot        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end    
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end      
			miniscore/=100.0
			if attacker.pbTooHigh?(PBStats::SPATK)
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end       
			specmove=false
			for j in attacker.moves
				if j.pbIsSpecial?(j.type)
					specmove=true
				end
			end    
			miniscore=0 if !specmove
			score*=miniscore 
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x33 # Amnesia         
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end
			if opponent.status==PBStatuses::BURN
				miniscore*=1.2
			end        
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.3
			end
			if attacker.stages[PBStats::SPDEF]>0
				ministat=attacker.stages[PBStats::SPDEF]
				minimini=-15*ministat
				minimini+=100          
				minimini/=100.0          
				miniscore*=minimini
			end
			if pbRoughStat(opponent,PBStats::ATTACK,skill)<pbRoughStat(opponent,PBStats::SPATK,skill)
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end        
				end          
			end          
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end        
			miniscore/=100.0
			if attacker.pbTooHigh?(PBStats::SPDEF)
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end                
			score*=miniscore 
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x34 # Minimize        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end   
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.4 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.4 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.4 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.2
			end         
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end 
			if opponent.hasWorkingAbility(:NOGUARD)
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.accuracy==0
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.accuracy==0
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.accuracy==0
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end
			if attacker.hasWorkingItem(:BRIGHTPOWDER) || attacker.hasWorkingItem(:LAXINCENSE)
				miniscore*=1.3
			end        
			miniscore/=100.0
			if attacker.pbTooHigh?(PBStats::EVASION)
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end                  
			score*=miniscore
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x35 # Shell Smash        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.3
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.3
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.3
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.3
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.5
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.1
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if attacker.pbSpeed<=pbRoughStat(opponent,PBStats::SPEED,skill) && (2*attacker.pbSpeed)>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.3
			end    
			if roles.include?("Sweeper")
				miniscore*=1.5
			end
			specmove=false
			for j in attacker.moves
				if j.pbIsSpecial?(j.type)
					specmove=true
				end
			end    
			if attacker.status==PBStatuses::BURN && !specmove
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.2 if movecheck     
				end            
			end    
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=0.1
			end 
			if @trickroom!=0
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end  
			if attacker.hasWorkingAbility(:MOXIE)
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:WHITEHERB)
				miniscore*=1.5
			end  
			if !attacker.pbTooHigh?(PBStats::SPEED)          
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY) && !healmove  
				score=0
			end      
		when 0x36 # Shift Gear        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.5
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.2
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end 
			if (attacker.pbSpeed<=pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=1.3
			end    
			if roles.include?("Sweeper")
				miniscore*=1.5
			end
			if attacker.status==PBStatuses::BURN
				miniscore*=0.5
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.3 if movecheck     
				end            
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end        
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end
			end  
			if physmove && !attacker.pbTooHigh?(PBStats::ATTACK)          
				miniscore/=100.0
				score*=miniscore
			end
			miniscore=100
			if attacker.stages[PBStats::ATTACK]<0
				ministat=attacker.stages[PBStats::ATTACK]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=0.8
			end 
			if @trickroom!=0
				miniscore*=0.1
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.1 if movecheck     
					end            
				end  
			end    
			if attacker.hasWorkingAbility(:MOXIE)
				miniscore*=1.3
			end
			if !attacker.pbTooHigh?(PBStats::SPEED)          
				miniscore/=100.0
				score*=miniscore
			end
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end   
		when 0x37 # Acupressure        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end   
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.4 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.4 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.4 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.2
			end         
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end 
			if opponent.hasWorkingAbility(:NOGUARD)
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.accuracy==0
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.accuracy==0
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.accuracy==0
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end
			if attacker.hasWorkingItem(:BRIGHTPOWDER) || attacker.hasWorkingItem(:LAXINCENSE)
				miniscore*=1.3
			end
			miniscore/=100.0
			maxstat=0
			maxstat+=1 if attacker.pbTooHigh?(PBStats::ATTACK)        
			maxstat+=1 if attacker.pbTooHigh?(PBStats::DEFENSE)        
			maxstat+=1 if attacker.pbTooHigh?(PBStats::SPATK)        
			maxstat+=1 if attacker.pbTooHigh?(PBStats::SPDEF)        
			maxstat+=1 if attacker.pbTooHigh?(PBStats::SPEED)        
			maxstat+=1 if attacker.pbTooHigh?(PBStats::ACCURACY)        
			maxstat+=1 if attacker.pbTooHigh?(PBStats::EVASION)        
			if maxstat>1
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end                
			score*=miniscore  
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x38 # Cotton Guard        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end 
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.3
			end
			if attacker.stages[PBStats::DEFENSE]>0
				ministat=attacker.stages[PBStats::DEFENSE]
				minimini=-15*ministat
				minimini+=100          
				minimini/=100.0          
				miniscore*=minimini
			end
			if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end        
				end          
			end          
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end          
			miniscore/=100.0
			if attacker.pbTooHigh?(PBStats::DEFENSE)
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end            
			score*=miniscore
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x39 # Tail Glow        
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.33
				miniscore*=0.3
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
				miniscore*=0.3
			end
			if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
				miniscore*=0.3
			end     
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.2
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end    
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end    
			miniscore/=100.0
			if attacker.pbTooHigh?(PBStats::SPATK)
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end       
			specmove=false
			for j in attacker.moves
				if j.pbIsSpecial?(j.type)
					specmove=true
				end
			end    
			miniscore=0 if !specmove
			score*=miniscore  
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x3A # Belly Drum
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.5
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.85
				miniscore*=1.2
			end        
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.5
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.4
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.4
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.4
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<1
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.4
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.1
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.2
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.1 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.1 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.1 if movecheck     
				end            
			end  
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.1
			end        
			if @doublebattle
				miniscore*=0.1
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=10*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-10)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end    
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			else
				primove=false
				for j in attacker.moves
					if j.priority>0
						primove=true
					end
				end
				if !primove
					miniscore*=0.3
				end
			end        
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::BURN
				miniscore*=0.8
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.2
			end        
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.1 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.1 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
					end  
					miniscore*=0.1 if movecheck     
				end            
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.1 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.1 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.1 if movecheck     
				end            
			end    
			miniscore/=100.0
			if attacker.pbTooHigh?(PBStats::ATTACK)
				miniscore=0
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck   
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:CLEARSMOG) || j.id==getID(PBMoves,:HAZE)
					end  
					score*=0.3 if movecheck  
				end            
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0
			end            
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end  
			end        
			miniscore=0 if !physmove  
			score*=miniscore
			if (opponent.level-5)>attacker.level
				score*=0.6
				if (opponent.level-10)>attacker.level
					score*=0.2
				end
			end
		when 0x3B # Superpower
			thisinitial = score
			if attacker.hasWorkingAbility(:CONTRARY)
				score*=1.7
			else
				if thisinitial<100
					score*=0.9
					if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=1.2
					else
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									movecheck=true if j.priority>0 && j.pbIsPhysical?(j.type)
								end  
								score*=0.8 if movecheck            
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									movecheck=true if j.priority>0 && j.pbIsPhysical?(j.type)
								end  
								score*=0.8 if movecheck      
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									movecheck=true if j.priority>0 && j.pbIsPhysical?(j.type)
								end  
								score*=0.8 if movecheck      
							end            
						end  
					end
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.5 if movecheck     
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.5 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.5 if movecheck     
						end            
					end
				end
				if initialscores.length>0
					greatmoves=false
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>=100
							greatmoves=true
						end
					end        
					score*=0.5 if greatmoves
				end          
				miniscore=100
				livecount=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount+=1 if i.hp!=0
				end
				if livecount>1
					miniscore*=(livecount-1)
					miniscore/=100.0
					miniscore*=0.06
					miniscore=(1-miniscore)
					score*=miniscore
				end
				count=-1
				party=pbParty(attacker.index)
				pivotvar=false
				for i in 0...party.length
					count+=1
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Pivot")
						pivotvar=true
					end
				end
				if pivotvar && !@doublebattle
					score*=1.2
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount>1 && livecount2==1
					score*=0.8
				end
			end      
		when 0x3C # Close Combat
			thisinitial = score
			if attacker.hasWorkingAbility(:CONTRARY)
				score*=1.5
			else
				if thisinitial<100
					score*=0.9
					if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=1.3
					else
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									movecheck=true if j.priority>0 
								end  
								score*=0.7 if movecheck            
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									movecheck=true if j.priority>0
								end  
								score*=0.7 if movecheck      
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									movecheck=true if j.priority>0
								end  
								score*=0.7 if movecheck      
							end            
						end  
					end
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.7 if movecheck     
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.7 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.7 if movecheck     
						end            
					end
				end
				if initialscores.length>0
					greatmoves=false
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>=100
							greatmoves=true
						end
					end
					score*=0.5 if greatmoves
				end 
				miniscore=100
				livecount=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount+=1 if i.hp!=0
				end
				if livecount>1
					miniscore*=(livecount-1)
					miniscore/=100.0
					miniscore*=0.06
					miniscore=(1-miniscore)
					score*=miniscore
				end
				count=-1
				party=pbParty(attacker.index)
				pivotvar=false
				for i in 0...party.length
					count+=1
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Pivot")
						pivotvar=true
					end
				end
				if pivotvar && !@doublebattle
					score*=1.2
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount>1 && livecount2==1
					score*=0.9
				end
			end   
		when 0x3D # V-Create
			thisinitial = score
			if attacker.hasWorkingAbility(:CONTRARY)
				score*=1.7
			else
				if thisinitial<100
					score*=0.8
					if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=1.3
					else
						livecount=0
						for i in pbParty(opponent.index)
							next if i.nil?
							livecount+=1 if i.hp!=0
						end
						livecount2=0
						for i in pbParty(attacker.index)
							next if i.nil?
							livecount2+=1 if i.hp!=0
						end
						if livecount>1 && livecount2==1
							score*=0.7
						end            
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									movecheck=true if j.priority>0
								end  
								score*=0.7 if movecheck            
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									movecheck=true if j.priority>0
								end  
								score*=0.7 if movecheck      
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									movecheck=true if j.priority>0
								end  
								score*=0.7 if movecheck      
							end            
						end  
					end
				end                                                  
				if initialscores.length>0
					greatmoves=false
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>=100
							greatmoves=true
						end
					end        
					score*=0.5 if greatmoves
				end          
				miniscore=100
				livecount=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount+=1 if i.hp!=0
				end
				if livecount>1
					miniscore*=(livecount-1)
					miniscore/=100.0
					miniscore*=0.06
					miniscore=(1-miniscore)
					score*=miniscore
				end
				count=-1
				party=pbParty(attacker.index)
				pivotvar=false
				for i in 0...party.length
					count+=1
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Pivot")
						pivotvar=true
					end
				end
				if pivotvar && !@doublebattle
					score*=1.2
				end          
			end
		when 0x3E # Hammer Arm
			thisinitial = score
			if attacker.hasWorkingAbility(:CONTRARY)
				score*=1.3
			else
				if thisinitial<100
					score*=0.9
				end
				if initialscores.length>0
					greatmoves=false
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>=100
							greatmoves=true
						end
					end        
					score*=0.7 if greatmoves
				end    
				livecount=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=0.8
					if livecount>1 && livecount2==1
						score*=0.8
					end         
				else
					score*=1.1
				end          
				if roles.include?("Tank")
					score*=1.1
				end                                                                                               
				miniscore=100
				livecount=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount+=1 if i.hp!=0
				end
				if livecount>1
					miniscore*=(livecount-1)
					miniscore/=100.0
					miniscore*=0.06
					miniscore=(1-miniscore)
					score*=miniscore
				end
				count=-1
				party=pbParty(attacker.index)
				pivotvar=false
				for i in 0...party.length
					count+=1
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Pivot")
						pivotvar=true
					end
				end
				if pivotvar && !@doublebattle
					score*=1.2
				end          
			end
		when 0x3F # Overheat
			thisinitial = score
			if attacker.hasWorkingAbility(:CONTRARY)
				score*=1.7
			elsif pbAICritRate(attacker,opponent,move)>1
				score*=1
			else                      
				if thisinitial<100
					score*=0.9
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.5 if movecheck     
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.5 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.5 if movecheck     
						end            
					end
				end          
				if initialscores.length>0
					greatmoves=false
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>=100
							greatmoves=true
						end
					end        
					score*=0.5 if greatmoves
				end          
				miniscore=100
				livecount=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount+=1 if i.hp!=0
				end
				if livecount>1
					miniscore*=(livecount-1)
					miniscore/=100.0
					miniscore*=0.06
					miniscore=(1-miniscore)
					score*=miniscore
				end
				count=-1
				party=pbParty(attacker.index)
				pivotvar=false
				for i in 0...party.length
					count+=1
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Pivot")
						pivotvar=true
					end
				end
				if pivotvar && !@doublebattle
					score*=1.2
				end 
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount>1 && livecount2==1
					score*=0.8
				end
			end
		when 0x40 # Flatter
			if opponent.pbCanConfuse?(false,attacker) &&
				!(isConst?(opponent.species,PBSpecies,:KIRICORN) && opponent.item == PBItems::KIRICORNITE && @field.effects[PBEffects::MistyTerrain]==0) &&
				!(isConst?(opponent.pbPartner.species,PBSpecies,:KIRICORN) && opponent.pbPartner.item == PBItems::KIRICORNITE && @field.effects[PBEffects::MistyTerrain]==0) &&
				!(isConst?(attacker.pbPartner.species,PBSpecies,:KIRICORN) && attacker.pbPartner.item == PBItems::KIRICORNITE && @field.effects[PBEffects::MistyTerrain]==0)
				miniscore=100
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				if ministat>0
					minimini=10*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end      
				if opponent.attack>opponent.spatk
					miniscore*=1.5
				else
					miniscore*=0.3
				end
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=1.1
				end
				if opponent.status==PBStatuses::PARALYSIS
					miniscore*=1.1
				end
				if opponent.effects[PBEffects::Yawn]>0 || opponent.status==PBStatuses::SLEEP
					miniscore*=0.4
				end
				if opponent.hasWorkingAbility(:TANGLEDFEET)
					miniscore*=0.7
				end          
				if opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=1.5
				end
				if attacker.pbHasMove?(getID(PBMoves,:SUBSTITUTE))
					miniscore*=1.2
					if attacker.effects[PBEffects::Substitute]>0
						miniscore*=1.3
					end
				end
				miniscore/=100.0
				score*=miniscore
			else
				score=0
			end
		when 0x41 # Swagger
			if opponent.pbCanConfuse?(false,attacker) &&
				!(isConst?(opponent.species,PBSpecies,:KIRICORN) && opponent.item == PBItems::KIRICORNITE && @field.effects[PBEffects::MistyTerrain]==0) &&
				!(isConst?(opponent.pbPartner.species,PBSpecies,:KIRICORN) && opponent.pbPartner.item == PBItems::KIRICORNITE && @field.effects[PBEffects::MistyTerrain]==0) &&
				!(isConst?(attacker.pbPartner.species,PBSpecies,:KIRICORN) && attacker.pbPartner.item == PBItems::KIRICORNITE && @field.effects[PBEffects::MistyTerrain]==0)
				miniscore=100      
				if opponent.attack<opponent.spatk
					miniscore*=1.5
				else
					miniscore*=0.7
				end
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=1.3
				end
				if opponent.status==PBStatuses::PARALYSIS
					miniscore*=1.3
				end
				if opponent.effects[PBEffects::Yawn]>0 || opponent.status==PBStatuses::SLEEP
					miniscore*=0.4
				end
				if opponent.hasWorkingAbility(:TANGLEDFEET)
					miniscore*=0.7
				end          
				if opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=1.5
				end
				if attacker.pbHasMove?(getID(PBMoves,:SUBSTITUTE))
					miniscore*=1.2
					if attacker.effects[PBEffects::Substitute]>0
						miniscore*=1.3
					end
				end
				if attacker.pbHasMove?(getID(PBMoves,:FOULPLAY))
					miniscore*=1.5
				end          
				miniscore/=100.0
				score*=miniscore
			else
				score=0
			end
		when 0x42 # Growl
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if (pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)) || opponent.stages[PBStats::ATTACK]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::ATTACK) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.status==PBStatuses::POISON
					miniscore*=1.2
				end
				if opponent.stages[PBStats::ATTACK]<0
					minimini = 5*opponent.stages[PBStats::ATTACK]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if attacker.pbHasMove?(getID(PBMoves,:FOULPLAY))
					miniscore*=0.5
				end  
				if opponent.status==PBStatuses::BURN
					miniscore*=0.5
				end          
				if livecount1==1 && move.basedamage==0
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
					miniscore+=100
				end          
				miniscore/=100.0    
				score*=miniscore if move.basedamage==0 || (move.basedamage>0 && !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken))  #>>DemICE #fixing sheer force + shield dust
			end     
		when 0x43 # Tail Whip
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end  
			end     
			if !physmove || opponent.stages[PBStats::DEFENSE]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::DEFENSE) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck       
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck         
					end            
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)            
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN
					miniscore*=1.2
				end
				if opponent.stages[PBStats::DEFENSE]<0
					minimini = 5*opponent.stages[PBStats::DEFENSE]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end     
				if livecount1==1 && move.basedamage==0
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				if attacker.status!=0
					miniscore*=0.7
				end
				if attacker.status==PBStatuses::BURN
					miniscore*=0.7
				end                    
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
					miniscore+=100
				end
				miniscore/=100.0    
				score*=miniscore if move.basedamage==0 || (move.basedamage>0 && !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken))  #>>DemICE #fixing sheer force + shield dust
			end    
		when 0x44 # Rock Tomb
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if ((pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)) || opponent.stages[PBStats::SPEED]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::SPEED) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.stages[PBStats::SPEED]<0
					minimini = 5*opponent.stages[PBStats::SPEED]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end       
				if livecount1==1 && move.basedamage==0
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				if opponent.hasWorkingAbility(:SPEEDBOOST)
					miniscore*=0.5
				end
				if attacker.pbHasMove?(getID(PBMoves,:ELECTROBALL))
					miniscore*=1.5
				end  
				if attacker.pbHasMove?(getID(PBMoves,:GYROBALL))
					miniscore*=0.5
				end   
				if @trickroom!=0
					miniscore*=0.1
				else
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							miniscore*=0.1 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							miniscore*=0.1 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							miniscore*=0.1 if movecheck     
						end            
					end  
				end   
				if opponent.hasWorkingItem(:LAGGINGTAIL) || opponent.hasWorkingItem(:IRONBALL)
					miniscore*=0.1
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
						end  
						miniscore*=1.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
						end  
						miniscore*=1.3 if movecheck     
					end            
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:GYROBALL)
						end  
						miniscore*=0.5 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:GYROBALL)
						end  
						miniscore*=0.5 if movecheck 
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:GYROBALL)
						end  
						miniscore*=0.5 if movecheck 
					end            
				end  
				if move.basedamage>0 && !attacker.hasWorkingAbility(:SHEERFORCE) && !(opponent.hasWorkingAbility(:SHIELDDUST) && !opponent.moldbroken)  #>>DemICE #fixing sheer force + shield dust
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE)
						miniscore*=2
					end     
					miniscore+=100
				end            
				miniscore/=100.0    
				score*=miniscore
			end
		when 0x45 # Snarl
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if (pbRoughStat(opponent,PBStats::SPATK,skill)<pbRoughStat(opponent,PBStats::ATTACK,skill)) || opponent.stages[PBStats::SPATK]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::SPATK) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN
					miniscore*=1.2
				end
				if opponent.stages[PBStats::SPATK]<0
					minimini = 5*opponent.stages[PBStats::SPATK]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end       
				if livecount1==1 && move.basedamage==0
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end          
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
					miniscore+=100
				end          
				miniscore/=100.0    
				score*=miniscore
			end      
		when 0x46 # Psychic
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			specmove=false
			for j in attacker.moves
				if j.pbIsSpecial?(j.type)
					specmove=true
				end  
			end     
			if !specmove || opponent.stages[PBStats::SPDEF]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::SPDEF) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck       
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck         
					end            
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN
					miniscore*=1.2
				end
				if opponent.stages[PBStats::SPDEF]<0
					minimini = 5*opponent.stages[PBStats::SPDEF]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end     
				if livecount1==1 && move.basedamage==0
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				if attacker.status!=0
					miniscore*=0.7
				end         
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/105)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
					miniscore+=100
				end          
				miniscore/=100.0    
				score*=miniscore
			end    
		when 0x47 # Sand Attack
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			nevermiss=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						nevermiss=true if j.accuracy==0
					end             
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						nevermiss=true if j.accuracy==0
					end    
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						nevermiss=true if j.accuracy==0
					end   
				end            
			end       
			if nevermiss || opponent.stages[PBStats::ACCURACY]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::ACCURACY) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN
					miniscore*=1.3
				end
				if opponent.stages[PBStats::ACCURACY]<0
					minimini = 5*opponent.stages[PBStats::ACCURACY]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end     
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end      
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
					miniscore+=100
				end          
				miniscore/=100.0    
				score*=miniscore
			end
		when 0x48 # Sweet Scent
			score=0
		when 0x49 # Defog
			miniscore=100
			livecount1=0
			for i in pbParty(attacker.index)
				next if i.nil?
				livecount1+=1 if i.hp!=0
			end
			livecount2=0
			for i in pbParty(opponent.index)
				next if i.nil?
				livecount2+=1 if i.hp!=0
			end
			if livecount1>1
				miniscore*=2 if attacker.pbOwnSide.effects[PBEffects::StealthRock]
				miniscore*=3 if attacker.pbOwnSide.effects[PBEffects::StickyWeb]
				miniscore*=(1.5**attacker.pbOwnSide.effects[PBEffects::Spikes])
				miniscore*=(1.7**attacker.pbOwnSide.effects[PBEffects::ToxicSpikes])
			end
			miniscore-=100
			miniscore*=(livecount1-1) if livecount1>1
			minimini=100
			if livecount2>1
				minimini*=0.5 if attacker.pbOwnSide.effects[PBEffects::StealthRock]
				minimini*=0.3 if attacker.pbOwnSide.effects[PBEffects::StickyWeb]
				minimini*=(0.7**attacker.pbOwnSide.effects[PBEffects::Spikes])
				minimini*=(0.6**attacker.pbOwnSide.effects[PBEffects::ToxicSpikes])
			end
			minimini-=100
			minimini*=(livecount2-1) if livecount2>1
			miniscore+=minimini
			miniscore+=100
			if miniscore<0
				miniscore=0
			end
			miniscore/=100.0
			score*=miniscore
			if opponent.pbOwnSide.effects[PBEffects::Reflect]>0
				score*=2
			end        
			if opponent.pbOwnSide.effects[PBEffects::LightScreen]>0
				score*=2
			end
			if opponent.pbOwnSide.effects[PBEffects::ShadowVeil]>0
				score*=3
			end
			if opponent.pbOwnSide.effects[PBEffects::Safeguard]>0
				score*=1.3
			end
			if opponent.pbOwnSide.effects[PBEffects::Mist]>0
				score*=1.3
			end        
		when 0x4A # Tickle 
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			miniscore=100
			if (pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)) || opponent.stages[PBStats::ATTACK]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::ATTACK) || theresone
				#~ maxdam=0
				#~ for j in attacker.moves
				#~ tempdam = pbRoughDamage(j,attacker,opponent,skill,j.basedamage)
				#~ maxdam=tempdam if tempdam>maxdam
				#~ end  
				#~ if (opponent.effects[PBEffects::AquaRing] || opponent.effects[PBEffects::Ingrain]) && maxdam<(opponent.hp*3/4)
				#~ miniscore*=1.2
				#~ miniscore*=1.2 if pbCheckGlobalAbility(:STALL)
				#~ end
				if move.basedamage==0
					miniscore*=0.5
				end
			else
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if opponent.status==PBStatuses::POISON
					miniscore*=1.2
				end
				if opponent.stages[PBStats::ATTACK]+opponent.stages[PBStats::DEFENSE]<0
					minimini = 5*opponent.stages[PBStats::ATTACK]
					minimini+= 5*opponent.stages[PBStats::DEFENSE]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if attacker.pbHasMove?(getID(PBMoves,:FOULPLAY))
					miniscore*=0.5
				end        
				if livecount1==1
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
			end        
			miniscore/=100.0
			score*=miniscore
			miniscore=100        
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end  
			end     
			if !physmove || opponent.stages[PBStats::DEFENSE]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::DEFENSE) || theresone
				if move.basedamage==0
					miniscore*=0.5
				end
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck       
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck         
					end            
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if livecount1==1
					miniscore*=0.5
				end          
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				if attacker.status!=0
					miniscore*=0.7
				end
				if attacker.status==PBStatuses::BURN
					miniscore*=0.7
				end                    
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
					miniscore+=100
				end          
			end        
			miniscore/=100.0    
			score*=miniscore
		when 0x4B # Feather Dance
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if (pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)) || opponent.stages[PBStats::ATTACK]>1 || !opponent.pbCanReduceStatStageAI?(PBStats::ATTACK) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.status==PBStatuses::POISON
					miniscore*=1.2
				end
				if opponent.stages[PBStats::ATTACK]<0
					minimini = 5*opponent.stages[PBStats::ATTACK]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if attacker.pbHasMove?(getID(PBMoves,:FOULPLAY))
					miniscore*=0.5
				end  
				if opponent.status==PBStatuses::BURN
					miniscore*=0.5
				end          
				if livecount1==1
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end       
				miniscore/=100.0    
				score*=miniscore
			end    
		when 0x4C # Screech 
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			physmove=false
			for j in attacker.moves
				if j.pbIsPhysical?(j.type)
					physmove=true
				end  
			end     
			if !physmove || opponent.stages[PBStats::DEFENSE]>1 || !opponent.pbCanReduceStatStageAI?(PBStats::DEFENSE) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck       
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck         
					end            
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if skill>=PBTrainerAI.bestSkill
					if move.id==getID(PBMoves,:SCREECH)
						if opponent.hasWorkingAbility(:SOUNDPROOF)
							miniscore=0
						end
					end
				end				
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN
					miniscore*=1.2
				end
				if opponent.stages[PBStats::DEFENSE]<0
					minimini = 5*opponent.stages[PBStats::DEFENSE]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end     
				if livecount1==1
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				if attacker.status!=0
					miniscore*=0.7
				end
				if attacker.status==PBStatuses::BURN
					miniscore*=0.7
				end                                
				miniscore/=100.0    
				score*=miniscore
			end    
		when 0x4D # Scary Face
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if ((pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)) || opponent.stages[PBStats::SPEED]>1 || !opponent.pbCanReduceStatStageAI?(PBStats::SPEED) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.3
				end
				if opponent.stages[PBStats::SPEED]<0
					minimini = 5*opponent.stages[PBStats::SPEED]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end       
				if livecount1==1 && move.basedamage==0
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				if opponent.hasWorkingAbility(:SPEEDBOOST)
					miniscore*=0.5
				end
				if attacker.pbHasMove?(getID(PBMoves,:ELECTROBALL))
					miniscore*=1.5
				end  
				if attacker.pbHasMove?(getID(PBMoves,:GYROBALL))
					miniscore*=0.5
				end   
				if @trickroom!=0
					miniscore*=0.1
				else
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							miniscore*=0.1 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							miniscore*=0.1 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							miniscore*=0.1 if movecheck     
						end            
					end  
				end   
				if opponent.hasWorkingItem(:LAGGINGTAIL) || opponent.hasWorkingItem(:IRONBALL)
					miniscore*=0.1
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
						end  
						miniscore*=1.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
						end  
						miniscore*=1.3 if movecheck     
					end            
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:GYROBALL)
						end  
						miniscore*=0.5 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:GYROBALL)
						end  
						miniscore*=0.5 if movecheck 
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:GYROBALL)
						end  
						miniscore*=0.5 if movecheck 
					end            
				end            
				miniscore/=100.0    
				score*=miniscore
			end
		when 0x4E # Captivate   
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if (pbRoughStat(opponent,PBStats::SPATK,skill)<pbRoughStat(opponent,PBStats::ATTACK,skill)) || opponent.stages[PBStats::SPATK]>1 || !opponent.pbCanReduceStatStageAI?(PBStats::SPATK) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN
					miniscore*=1.2
				end
				if opponent.stages[PBStats::SPATK]<0
					minimini = 5*opponent.stages[PBStats::SPATK]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end       
				if livecount1==1
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end         
				miniscore/=100.0    
				score*=miniscore
			end
			canattract=true
			agender=attacker.gender
			ogender=opponent.gender
			if agender==2 || ogender==2 || agender==ogender # Pokemon are genderless or same gender
				canattract=false
			elsif opponent.hasWorkingAbility(:OBLIVIOUS)
				canattract=false
			end
			if !canattract
				score=0
			end        
		when 0x4F # Acid Spray
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			specmove=false
			for j in attacker.moves
				if j.pbIsSpecial?(j.type)
					specmove=true
				end  
			end     
			if !specmove || opponent.stages[PBStats::SPDEF]>1 || !opponent.pbCanReduceStatStageAI?(PBStats::SPDEF) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck       
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck         
					end            
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN
					miniscore*=1.2
				end
				if opponent.stages[PBStats::SPDEF]<0
					minimini = 5*opponent.stages[PBStats::SPDEF]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end     
				if livecount1==1
					miniscore*=0.9
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				if attacker.status!=0
					miniscore*=0.7
				end
				if skill>=PBTrainerAI.bestSkill
					if move.id==getID(PBMoves,:METALSOUND)
						if opponent.hasWorkingAbility(:SOUNDPROOF)
							miniscore=0
						end
					end
				end          
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
					miniscore+=100
				end          
				miniscore/=100.0    
				score*=miniscore
			end
		when 0x50 # Clear Smog
			miniscore=0
			miniscore+= 5*opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]>0
			miniscore+= 5*opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]>0
			miniscore+= 5*opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]>0
			miniscore+= 5*opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]>0
			miniscore+= 5*opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]>0
			miniscore+= 5*opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]>0
			minimini=0
			minimini+= 5*opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]<0
			minimini+= 5*opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]<0
			minimini+= 5*opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]<0
			minimini+= 5*opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]<0
			minimini+= 5*opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]<0
			minimini+= 5*opponent.stages[PBStats::ACCURACY] if opponent.stages[PBStats::ACCURACY]<0
			miniscore+=minimini
			miniscore+=100
			miniscore/=100.0
			score*=miniscore
			if opponent.hasWorkingAbility(:SPEEDBOOST)
				score*=1.1
			end       
		when 0x51 # Haze
			stages=0
			stages+=attacker.stages[PBStats::ATTACK]
			stages+=attacker.stages[PBStats::DEFENSE]
			stages+=attacker.stages[PBStats::SPEED]
			stages+=attacker.stages[PBStats::SPATK]
			stages+=attacker.stages[PBStats::SPDEF]
			stages+=attacker.stages[PBStats::EVASION]
			stages+=attacker.stages[PBStats::ACCURACY]
			miniscore = (-10)*stages
			stages=0
			stages+=opponent.stages[PBStats::ATTACK]
			stages+=opponent.stages[PBStats::DEFENSE]
			stages+=opponent.stages[PBStats::SPEED]
			stages+=opponent.stages[PBStats::SPATK]
			stages+=opponent.stages[PBStats::SPDEF]
			stages+=opponent.stages[PBStats::EVASION]
			stages+=opponent.stages[PBStats::ACCURACY]
			minimini = (10)*stages
			if @doublebattle
				if attacker.pbPartner.hp>0
					stages=0
					stages+=attacker.pbPartner.stages[PBStats::ATTACK]
					stages+=attacker.pbPartner.stages[PBStats::DEFENSE]
					stages+=attacker.pbPartner.stages[PBStats::SPEED]
					stages+=attacker.pbPartner.stages[PBStats::SPATK]
					stages+=attacker.pbPartner.stages[PBStats::SPDEF]
					stages+=attacker.pbPartner.stages[PBStats::EVASION]
					stages+=attacker.pbPartner.stages[PBStats::ACCURACY]
					miniscore+= (-10)*stages
				end
				if opponent.pbPartner.hp>0
					stages=0
					stages+=opponent.pbPartner.stages[PBStats::ATTACK]
					stages+=opponent.pbPartner.stages[PBStats::DEFENSE]
					stages+=opponent.pbPartner.stages[PBStats::SPEED]
					stages+=opponent.pbPartner.stages[PBStats::SPATK]
					stages+=opponent.pbPartner.stages[PBStats::SPDEF]
					stages+=opponent.pbPartner.stages[PBStats::EVASION]
					stages+=opponent.pbPartner.stages[PBStats::ACCURACY]
					minimini+= (10)*stages
				end
			end
			if miniscore==0 && minimini==0
				score*=0
			else
				miniscore+=minimini
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
			end      
			movecheck=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end           
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end            
			end            
			if opponent.hasWorkingAbility(:SPEEDBOOST) || movecheck
				score*=0.8
			end        
		when 0x52 # Power Swap
			stages=0
			stages+=attacker.stages[PBStats::ATTACK]       
			stages+=attacker.stages[PBStats::SPATK]
			miniscore = (-10)*stages
			if attacker.attack > attacker.spatk
				if attacker.stages[PBStats::ATTACK]!=0
					miniscore*=2
				end
			else
				if attacker.stages[PBStats::SPATK]!=0
					miniscore*=2
				end
			end
			stages=0
			stages+=opponent.stages[PBStats::ATTACK]       
			stages+=opponent.stages[PBStats::SPATK]
			minimini = (10)*stages
			if opponent.attack > opponent.spatk
				if opponent.stages[PBStats::ATTACK]!=0
					minimini*=2
				end
			else
				if opponent.stages[PBStats::SPATK]!=0
					minimini*=2
				end
			end
			if miniscore==0 && minimini==0
				score*=0
			else
				miniscore+=minimini
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
				if @doublebattle
					score*=0.8
				end
			end                          
		when 0x53 # Guard Swap
			stages=0
			stages+=attacker.stages[PBStats::DEFENSE]       
			stages+=attacker.stages[PBStats::SPDEF]
			miniscore = (-10)*stages
			if attacker.defense > attacker.spdef
				if attacker.stages[PBStats::DEFENSE]!=0
					miniscore*=2
				end
			else
				if attacker.stages[PBStats::SPDEF]!=0
					miniscore*=2
				end
			end
			stages=0
			stages+=opponent.stages[PBStats::DEFENSE]       
			stages+=opponent.stages[PBStats::SPDEF]
			minimini = (10)*stages
			if opponent.defense > opponent.spdef
				if opponent.stages[PBStats::DEFENSE]!=0
					minimini*=2
				end
			else
				if opponent.stages[PBStats::SPDEF]!=0
					minimini*=2
				end
			end
			if miniscore==0 && minimini==0
				score*=0
			else
				miniscore+=minimini
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
				if @doublebattle
					score*=0.8
				end
			end   
		when 0x54 # Heart Swap
			stages=0
			stages+=attacker.stages[PBStats::ATTACK] unless attacker.attack<attacker.spatk
			stages+=attacker.stages[PBStats::DEFENSE] unless opponent.attack<opponent.spatk
			stages+=attacker.stages[PBStats::SPEED]
			stages+=attacker.stages[PBStats::SPATK] unless attacker.attack>attacker.spatk
			stages+=attacker.stages[PBStats::SPDEF] unless opponent.attack>opponent.spatk
			stages+=attacker.stages[PBStats::EVASION]
			stages+=attacker.stages[PBStats::ACCURACY]
			miniscore = (-10)*stages
			stages=0
			stages+=opponent.stages[PBStats::ATTACK] unless opponent.attack<opponent.spatk
			stages+=opponent.stages[PBStats::DEFENSE] unless attacker.attack<attacker.spatk
			stages+=opponent.stages[PBStats::SPEED]
			stages+=opponent.stages[PBStats::SPATK] unless opponent.attack>opponent.spatk
			stages+=opponent.stages[PBStats::SPDEF] unless attacker.attack>attacker.spatk
			stages+=opponent.stages[PBStats::EVASION]
			stages+=opponent.stages[PBStats::ACCURACY]
			minimini = (10)*stages        
			if !(miniscore==0 && minimini==0)         
				miniscore+=minimini
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
				if @doublebattle
					score*=0.8
				end
			else
				score=0        
			end
		when 0x55 # Psych Up
			stages=0
			stages+=attacker.stages[PBStats::ATTACK] unless attacker.attack<attacker.spatk
			stages+=attacker.stages[PBStats::DEFENSE] unless opponent.attack<opponent.spatk
			stages+=attacker.stages[PBStats::SPEED]
			stages+=attacker.stages[PBStats::SPATK] unless attacker.attack>attacker.spatk
			stages+=attacker.stages[PBStats::SPDEF] unless opponent.attack>opponent.spatk
			stages+=attacker.stages[PBStats::EVASION]
			stages+=attacker.stages[PBStats::ACCURACY]
			miniscore = (-10)*stages
			stages=0
			stages+=opponent.stages[PBStats::ATTACK] unless attacker.attack<attacker.spatk
			stages+=opponent.stages[PBStats::DEFENSE] unless opponent.attack<opponent.spatk
			stages+=opponent.stages[PBStats::SPEED]
			stages+=opponent.stages[PBStats::SPATK] unless attacker.attack>attacker.spatk
			stages+=opponent.stages[PBStats::SPDEF] unless opponent.attack>opponent.spatk
			stages+=opponent.stages[PBStats::EVASION]
			stages+=opponent.stages[PBStats::ACCURACY]
			minimini = (10)*stages       
			if !(miniscore==0 && minimini==0)
				miniscore+=minimini
				miniscore+=100
				miniscore/=100
				score*=miniscore
			else
				score=0
			end
			miniscore=100
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end            
				miniscore*=1.3 if badmoves
			end  
			if attacker.hp*(1.0/attacker.totalhp)>=0.75
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.5
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					secondcheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
						secondcheck=true if j.priority>0
					end  
					miniscore*=1.3 if movecheck   
					miniscore*=0.6 if secondcheck
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					secondcheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
						secondcheck=true if j.priority>0
					end  
					miniscore*=1.3 if movecheck  
					miniscore*=0.6 if secondcheck
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					secondcheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
						secondcheck=true if j.priority>0
					end  
					miniscore*=1.3 if movecheck  
					miniscore*=0.6 if secondcheck
				end            
			end
			if roles.include?("Sweeper")            
				miniscore*=1.3
			end
			specialvar = false
			for i in attacker.moves          
				if i.pbIsSpecial?(i.type)
					special=true
				end
			end   
			if attacker.stages[PBStats::SPATK]!=6 && specialvar
				score*=miniscore
			else
				score=0
			end       
		when 0x56 # Mist
			miniscore = 1
			minimini = 1
			if attacker.pbOwnSide.effects[PBEffects::Mist]==0
				minimini*=1.1
				movecheck=false
				# check opponent for stat decreasing moves
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if (j.function==0x42 || j.function==0x43 || j.function==0x44 || j.function==0x45 || j.function==0x46 || j.function==0x47 || j.function==0x48 || j.function==0x49 || j.function==0x4A || j.function==0x4B || j.function==0x4C || j.function==0x4D || j.function==0x4E || j.function==0x4F || j.function==0xE2 || j.function==0x151 || j.function==0x139 || j.function==0x148)
						end           
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if (j.function==0x42 || j.function==0x43 || j.function==0x44 || j.function==0x45 || j.function==0x46 || j.function==0x47 || j.function==0x48 || j.function==0x49 || j.function==0x4A || j.function==0x4B || j.function==0x4C || j.function==0x4D || j.function==0x4E || j.function==0x4F || j.function==0xE2 || j.function==0x151 || j.function==0x139 || j.function==0x148)
						end 
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if (j.function==0x42 || j.function==0x43 || j.function==0x44 || j.function==0x45 || j.function==0x46 || j.function==0x47 || j.function==0x48 || j.function==0x49 || j.function==0x4A || j.function==0x4B || j.function==0x4C || j.function==0x4D || j.function==0x4E || j.function==0x4F || j.function==0xE2 || j.function==0x151 || j.function==0x139 || j.function==0x148)
						end 
					end            
				end
				if movecheck
					minimini*=1.3
				end
			end
			score*=miniscore
			score*=minimini
			if miniscore<=1 && minimini<=1
				score*=0
			end                  
		when 0x57 # Power Trick
			if attacker.attack - attacker.defense >= 100
				if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) || (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom!=0)
					score*=1.5
				end
				if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
					score*=2
				end
				healmove=false
				for j in attacker.moves
					if j.isHealingMove?
						healmove=true
					end
				end
				if healmove
					score*=2
				end
			elsif attacker.defense - attacker.attack >= 100
				if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) || (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom!=0)
					score*=1.5
					if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
						score*=2
					end
				else
					score*=0
				end
			else
				score*=0.1
			end
			if attacker.effects[PBEffects::PowerTrick]
				score*=0.1
			end                            
		when 0x58 # Power Split
			if  pbRoughStat(opponent,PBStats::ATTACK,skill)> pbRoughStat(opponent,PBStats::SPATK,skill)
				if attacker.attack > pbRoughStat(opponent,PBStats::ATTACK,skill)
					score*=0
				else
					miniscore = pbRoughStat(opponent,PBStats::ATTACK,skill) - attacker.attack
					miniscore+=100
					miniscore/=100
					if attacker.attack>attacker.spatk
						miniscore*=2
					else
						miniscore*=0.5
					end
					score*=miniscore
				end
			else
				if attacker.spatk > pbRoughStat(opponent,PBStats::SPATK,skill)
					score*=0
				else
					miniscore = pbRoughStat(opponent,PBStats::SPATK,skill) - attacker.spatk
					miniscore+=100
					miniscore/=100
					if attacker.attack<attacker.spatk
						miniscore*=2
					else
						miniscore*=0.5
					end
					score*=miniscore
				end
			end               
		when 0x59 # Guard Split
			if  pbRoughStat(opponent,PBStats::ATTACK,skill)> pbRoughStat(opponent,PBStats::SPATK,skill)
				if attacker.defense > pbRoughStat(opponent,PBStats::DEFENSE,skill)
					score*=0
				else
					miniscore = pbRoughStat(opponent,PBStats::DEFENSE,skill) - attacker.defense
					miniscore+=100
					miniscore/=100
					if attacker.attack>attacker.spatk
						miniscore*=2
					else
						miniscore*=0.5
					end
					score*=miniscore
				end
			else
				if attacker.spdef > pbRoughStat(opponent,PBStats::SPDEF,skill)
					score*=0
				else
					miniscore = pbRoughStat(opponent,PBStats::SPDEF,skill) - attacker.spdef
					miniscore+=100
					miniscore/=100
					if attacker.attack<attacker.spatk
						miniscore*=2
					else
						miniscore*=0.5
					end
					score*=miniscore
				end
			end
		when 0x5A # Pain Split
			if opponent.effects[PBEffects::Substitute]<=0
				ministat = opponent.hp + (attacker.hp/2)
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						end  
						if tempdam>ministat
							score*=0
						elsif tempdam>attacker.hp
							if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
								score*=2
							else
								score*=0
							end 
						else
							miniscore=(opponent.hp/(attacker.hp).to_f)
							score*=miniscore
						end
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						for j in @aiMoveMemory[1]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						end  
						if tempdam>ministat
							score*=0
						elsif tempdam>attacker.hp
							if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
								score*=2
							else
								score*=0
							end
						else
							miniscore=(opponent.hp/(attacker.hp.to_f))
							score*=miniscore
						end                            
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						for j in @aiMoveMemory[0]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						end  
						if tempdam>ministat
							score*=0
						elsif tempdam>attacker.hp
							if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
								score*=2
							else
								score*=0
							end 
						else
							miniscore=(opponent.hp/(attacker.hp.to_f))
							score*=miniscore
						end        
					end          
				end  
			else
				score*=0
			end        
		when 0x5B # Tailwind
			if attacker.pbOwnSide.effects[PBEffects::Tailwind]>0
				score = 0
			else 
				if @doublebattle
					if (((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) || ((attacker.pbPartner.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))) #&& !roles.include?("Lead") #vaeryn specific. revert if its problematic for other fights
						score*=0.8
					end
				else
					if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && !roles.include?("Lead")
						score*=0.8
					end
				end
				if opponent.hasWorkingAbility(:SPEEDBOOST)
					score*=0.5
				end
				if @doublebattle
					score*=1.3
				end
				if pbCheckGlobalAbility(:CLOUDNINE) && attacker.pbPartner.hasWorkingAbility(:SLUSHRUSH) && @weather==PBWeather::HAIL &&
					((attacker.pbPartner.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
					score*=2
				end
				if @trickroom!=0
					score*=0.1
				else
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							score*=0.1 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							score*=0.1 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							score*=0.1 if movecheck     
						end            
					end  
				end   
				if roles.include?("Lead")
					score*=1.1
				end              
			end        
		when 0x5C # Mimic
			blacklist=[
				0x02,   # Struggle
				0x14,   # Chatter
				0x5C,   # Mimic
				0x5D,   # Sketch
				0xB6    # Metronome
			]
			miniscore = PBMoveData.new(opponent.lastMoveUsed).basedamage
			if miniscore=0
				miniscore=40
			end
			miniscore+=100
			miniscore/=100.0
			if miniscore<=1.5
				miniscore*=0.5
			end
			score*=miniscore
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				if blacklist.include?(PBMoveData.new(opponent.lastMoveUsed).function) || opponent.lastMoveUsed<0
					score*=0
				end
			else
				score*=0.5
			end  
		when 0x5D # Sketch
			blacklist=[
				0x02,   # Struggle
				0x14,   # Chatter
				0x5D,   # Sketch
			]
			miniscore = PBMoveData.new(opponent.lastMoveUsedSketch).basedamage
			if miniscore=0
				miniscore=40
			end
			miniscore+=100
			miniscore/=100.0
			if miniscore<=1.5
				miniscore*=0.5
			end
			score*=miniscore
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				if blacklist.include?(PBMoveData.new(opponent.lastMoveUsedSketch).function) || opponent.lastMoveUsedSketch<0
					score*=0
				end
			else
				score*=0.5
			end
		when 0x5E # Conversion         
			miniscore = [PBTypes.getCombinedEffectiveness(opponent.type1,attacker.type1,attacker.type2,attacker.type3),PBTypes.getCombinedEffectiveness(opponent.type2,attacker.type1,attacker.type2,attacker.type3),PBTypes.getCombinedEffectiveness(opponent.type3,attacker.type1,attacker.type2,attacker.type3)].max
			minimini = [PBTypes.getEffectiveness(opponent.type1,attacker.moves[0].type),PBTypes.getEffectiveness(opponent.type2,attacker.moves[0].type),PBTypes.getEffectiveness(opponent.type3,attacker.moves[0].type)].max
			if minimini < miniscore
				score*=3       
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.2
				else
					score*=0.5
				end
				stabvar = false
				for i in attacker.moves
					if i.type==attacker.type1 || i.type==attacker.type2 || i.type==attacker.type3
						stabvar = true
					end
				end
				if !stabvar
					score*=1.3
				end
				if $feconversionuse==1
					score*=0.3
				end          
			else
				score*=0
			end                 
		when 0x5F # Conversion 2
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.2
			else
				score*=0.7
			end
			stabvar = false
			for i in attacker.moves
				if i.type==attacker.type1 || i.type==attacker.type2 || i.type==attacker.type3
					stabvar = true
				end
			end
			if stabvar
				score*=1.3
			else
				score*=0.7
			end
			if $feconversionuse==2
				score*=0.3
			end
		when 0x60 # Camouflage
			score=0     
		when 0x61 # Soak
			sevar = false
			for i in attacker.moves
				if isConst?(i.type,PBTypes,:ELECTRIC) || isConst?(i.type,PBTypes,:GRASS)
					sevar = true
				end
			end
			if sevar
				score*=1.5
			else
				score*=0.7
			end
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				if attacker.pbHasMove?(getID(PBMoves,:TOXIC))
					if attacker.pbHasType?(:STEEL) || attacker.pbHasType?(:POISON)
						score*=1.5
					end
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if isConst?(j.type,PBTypes,:WATER)
					end  
					if movecheck
						score*=0.5
					else
						score*=1.1
					end            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if isConst?(j.type,PBTypes,:WATER)
					end  
					if movecheck
						score*=0.5
					else
						score*=1.1
					end            
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if isConst?(j.type,PBTypes,:WATER)
					end  
					if movecheck
						score*=0.5
					else
						score*=1.1
					end            
				end            
			end  
			if opponent.type1==getConst(PBTypes,:WATER) || opponent.type2==getConst(PBTypes,:WATER) || opponent.type3==getConst(PBTypes,:WATER)
				score=0
			end
			if opponent.hasWorkingAbility(:MULTITYPE)
				score*=0
			end
		when 0x62 # Reflect Type
			typeid=getID(PBTypes,type)
			miniscore = [PBTypes.getCombinedEffectiveness(opponent.type1,attacker.type1,attacker.type2,attacker.type3),PBTypes.getCombinedEffectiveness(opponent.type2,attacker.type1,attacker.type2,attacker.type3),PBTypes.getCombinedEffectiveness(opponent.type3,attacker.type1,attacker.type2,attacker.type3)].max
			minimini = [PBTypes.getCombinedEffectiveness(opponent.type1,opponent.type1,opponent.type2,opponent.type3),PBTypes.getCombinedEffectiveness(opponent.type2,opponent.type1,opponent.type2,opponent.type3),PBTypes.getCombinedEffectiveness(opponent.type3,opponent.type1,opponent.type2,opponent.type3)].max
			if minimini < miniscore
				score*=3    
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.2
				else
					score*=0.7
				end
				stabvar = false
				oppstab = false
				for i in attacker.moves
					if i.type == attacker.type1 || i.type == attacker.type2 || i.type == attacker.type3
						stabvar = true
					end
					if i.type == opponent.type1 || i.type == opponent.type2 || i.type == opponent.type3
						oppstab = true
					end
				end
				if !stabvar
					score*=1.2
				end
				if oppstab
					score*=1.3
				end          
			else
				score*=0
			end   
			if isConst?(attacker.ability,PBAbilities,:MULTITYPE) || (attacker.type1 == opponent.type1 && attacker.type2 == opponent.type2) || (attacker.type1 == opponent.type2 && attacker.type2 == opponent.type1)
				score*=0
			end        
		when 0x63 # Simple Beam        
			if !isConst?(opponent.ability,PBAbilities,:SIMPLE)
				miniscore = getAbilityDisruptScore(move,attacker,opponent,skill)
				score*=miniscore
				movecheck=false
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						end           
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						end 
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						end 
					end            
				end
				if movecheck
					if opponent==attacker.pbPartner
						score*=1.3
					else
						score*=0.5
					end
				end
			else
				score*=0
			end                    
		when 0x64 # Worry Seed
			if !isConst?(opponent.ability,PBAbilities,:INSOMNIA)
				miniscore = getAbilityDisruptScore(move,attacker,opponent,skill)
				score*=miniscore
				snorecheck=false
				restcheck=false
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							snorecheck=true if (j.id==getID(PBMoves,:SNORE) || j.id==getID(PBMoves,:SLEEPTALK))
							restcheck=true if j.id==getID(PBMoves,:REST)
						end           
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							snorecheck=true if (j.id==getID(PBMoves,:SNORE) || j.id==getID(PBMoves,:SLEEPTALK))
							restcheck=true if j.id==getID(PBMoves,:REST)
						end 
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							snorecheck=true if (j.id==getID(PBMoves,:SNORE) || j.id==getID(PBMoves,:SLEEPTALK))
							restcheck=true if j.id==getID(PBMoves,:REST)
						end 
					end            
				end
				if snorecheck
					score*=1.3
				end
				if restcheck
					score*=2
				end
				if attacker.pbHasMove?(getID(PBMoves,:SPORE)) || attacker.pbHasMove?(getID(PBMoves,:SLEEPPOWDER)) || attacker.pbHasMove?(getID(PBMoves,:HYPNOSIS)) || attacker.pbHasMove?(getID(PBMoves,:SING)) || attacker.pbHasMove?(getID(PBMoves,:GRASSWHISTLE)) || attacker.pbHasMove?(getID(PBMoves,:DREAMEATER)) || attacker.pbHasMove?(getID(PBMoves,:NIGHTMARE)) || attacker.hasWorkingAbility(:BADDREAMS) || (isConst?(attacker.species,PBSpecies,:DRAMSAMA) && attacker.item == PBItems::DRAMSAMAITE)
					score*=0.7
				end          
			else
				score*=0
			end
		when 0x65 # Role Play
			if !(opponent.ability==0 ||
					attacker.ability==opponent.ability ||
					isConst?(opponent.ability,PBAbilities,:MULTITYPE) ||
					isConst?(opponent.ability,PBAbilities,:FLOWERGIFT) ||
					isConst?(opponent.ability,PBAbilities,:FORECAST) ||
					isConst?(opponent.ability,PBAbilities,:ILLUSION) ||
					isConst?(opponent.ability,PBAbilities,:IMPOSTER) ||
					isConst?(opponent.ability,PBAbilities,:MULTITYPE) ||
					isConst?(opponent.ability,PBAbilities,:TRACE) ||
					isConst?(opponent.ability,PBAbilities,:WONDERGUARD) ||
					isConst?(opponent.ability,PBAbilities,:ZENMODE) ||
					isConst?(opponent.ability,PBAbilities,:STANCECHANGE))
				miniscore = getAbilityDisruptScore(move,opponent,attacker,skill)
				minimini = getAbilityDisruptScore(move,attacker,opponent,skill)
				score *= (1 + (minimini-miniscore))
			else
				score=0
			end
		when 0x66 # Entrainment
			if !(opponent.ability==0 ||
					attacker.ability==opponent.ability ||
					isConst?(opponent.ability,PBAbilities,:MULTITYPE) ||
					isConst?(opponent.ability,PBAbilities,:FLOWERGIFT) ||
					isConst?(opponent.ability,PBAbilities,:FORECAST) ||
					isConst?(opponent.ability,PBAbilities,:ILLUSION) ||
					isConst?(opponent.ability,PBAbilities,:IMPOSTER) ||
					isConst?(opponent.ability,PBAbilities,:MULTITYPE) ||
					isConst?(opponent.ability,PBAbilities,:TRACE) ||
					isConst?(opponent.ability,PBAbilities,:WONDERGUARD) ||
					isConst?(opponent.ability,PBAbilities,:ZENMODE) ||
					isConst?(opponent.ability,PBAbilities,:STANCECHANGE))
				miniscore = getAbilityDisruptScore(move,opponent,attacker,skill)
				minimini = getAbilityDisruptScore(move,attacker,opponent,skill)
				score *= (1 + (minimini-miniscore))
				if isConst?(attacker.ability,PBAbilities,:TRUANT)
					score*=2
				end          
			else
				score=0
			end
		when 0x67 # Skill Swap
			if opponent.ability!=0
				miniscore = getAbilityDisruptScore(move,opponent,attacker,skill)
				minimini = getAbilityDisruptScore(move,attacker,opponent,skill)
				score *= (1 + (minimini-miniscore)*2)
				if isConst?(attacker.ability,PBAbilities,:TRUANT)
					score*=2
				end       
				if isConst?(opponent.ability,PBAbilities,:TRUANT) && opponent==attacker.pbPartner
					score*=2
				end 
			end	         
		when 0x68 # Gastro Acid
			miniscore = getAbilityDisruptScore(move,attacker,opponent,skill)
			score*=miniscore
			if opponent.effects[PBEffects::GastroAcid] || opponent.effects[PBEffects::Substitute]>0
				score = 0
			end        
		when 0x69 # Transform
			if !(attacker.effects[PBEffects::Transform] || attacker.effects[PBEffects::Illusion] || opponent.effects[PBEffects::Substitute]>0)
				miniscore = opponent.level
				miniscore -= attacker.level
				miniscore*=5
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
				miniscore=0
				miniscore+=opponent.stages[PBStats::ATTACK]
				miniscore+=opponent.stages[PBStats::SPATK]
				miniscore+=opponent.stages[PBStats::DEFENSE]
				miniscore+=opponent.stages[PBStats::SPDEF]
				miniscore+=opponent.stages[PBStats::SPEED]
				miniscore*=10
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
				miniscore+=attacker.stages[PBStats::ATTACK]
				miniscore+=attacker.stages[PBStats::SPATK]
				miniscore+=attacker.stages[PBStats::DEFENSE]
				miniscore+=attacker.stages[PBStats::SPDEF]
				miniscore+=attacker.stages[PBStats::SPEED]
				miniscore*=(-10)
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
				score=1000
			else
				score=0
			end   
		when 0x6A # Sonicboom
		when 0x6B # Dragon Rage
		when 0x6C # Super Fang
		when 0x6D # Seismic Toss
		when 0x6E # Endeavor
			if attacker.hp > opponent.hp
				score=0
			else
				privar = false
				for i in attacker.moves
					if i.priority>0
						privar=true
					end
				end
				if privar
					score*=1.5
				end
				if (attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH)) && attacker.hp == attacker.totalhp
					score*=1.5
				end
				if pbWeather==PBWeather::SANDSTORM && (!opponent.pbHasType?(:ROCK) && !opponent.pbHasType?(:GROUND) && !opponent.pbHasType?(:STEEL))
					score*=1.5
				end
				if opponent.level - attacker.level > 9
					score*=2
				end   
			end        
		when 0x6F # Psywave
		when 0x70 # Fissure
			if !(opponent.level>attacker.level) && !opponent.hasWorkingAbility(:STURDY)
				if opponent.effects[PBEffects::LockOn]>0
					score*=3.5
				else
					score*=0.7
				end
			else
				score*=0
			end                         
		when 0x71 # Counter
			maxdam=0
			maxspec = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
							maxspec=true if j.pbIsSpecial?(j.type)
						end                
					end                
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
							maxspec=true if j.pbIsSpecial?(j.type)
						end                
					end                
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
							maxspec=true if j.pbIsSpecial?(j.type)
						end                
					end                
				end          
			end  
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=0.5
			end
			if (attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH)) && attacker.hp == attacker.totalhp
				score*=1.2
			else
				score*=0.8          
				if maxdam>attacker.hp
					score*=0.8
				end
			end
			if PBMoveData.new(attacker.lastMoveUsed).function==0x71
				score*=0.7
			end
			movecheck=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end           
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end            
			end
			if movecheck
				score*=0.6
			end
			miniscore = attacker.hp*(1.0/attacker.totalhp)
			score*=miniscore
			if opponent.spatk>opponent.attack
				score*=0.3
			end
			if maxspec
				score*=0.05
			end
			if PBMoveData.new(attacker.lastMoveUsed).function==0x72
				score*=1.1
			end      
		when 0x72 # Mirror Coat
			maxdam=0
			maxphys = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
							maxphys=true if j.pbIsPhysical?(j.type)
						end                
					end                
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
							maxphys=true if j.pbIsPhysical?(j.type)
						end                
					end                
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
							maxphys=true if j.pbIsPhysical?(j.type)
						end                
					end                
				end          
			end  
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=0.5
			end
			if (attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH)) && attacker.hp == attacker.totalhp
				score*=1.2
			else
				score*=0.8          
				if maxdam>attacker.hp
					score*=0.8
				end
			end
			if PBMoveData.new(attacker.lastMoveUsed).function==0x71
				score*=0.7
			end
			movecheck=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end           
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end            
			end
			if movecheck
				score*=0.6
			end
			miniscore = attacker.hp*(1.0/attacker.totalhp)
			score*=miniscore
			if opponent.spatk<opponent.attack
				score*=0.3
			end
			if maxspec
				score*=0.05
			end
			if PBMoveData.new(attacker.lastMoveUsed).function==0x71
				score*=1.1
			end
		when 0x73 # Metal Burst
			maxdam=0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end          
			end  
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=0.01
			end
			if (attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH)) && attacker.hp == attacker.totalhp
				score*=1.2
			else
				score*=0.8          
				if maxdam>attacker.hp
					score*=0.8
				end
			end
			if PBMoveData.new(attacker.lastMoveUsed).function==0x73
				score*=0.7
			end
			movecheck=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end           
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end            
			end
			if movecheck
				score*=0.6
			end
			miniscore = attacker.hp*(1.0/attacker.totalhp)
			score*=miniscore   
		when 0x74 # Flame Burst 
			if @doublebattle && opponent.pbPartner.hp>0
				score*=1.1
			end
		when 0x75 # Surf
		when 0x76 # Earthquake  
			if $game_switches[330]
				if attacker.species==PBSpecies::ANDERIND && 
					(opponent.species==PBSpecies::ELECTRUXO || opponent.species==PBSpecies::ARCHILLES) && 
					opponent==@battlers[2] && ((@turncount==0 && !pbCheckGlobalAbility(:CLOUDNINE)) || (@turncount>0 && pbCheckGlobalAbility(:CLOUDNINE)))
					#~ maxdam=0
					#~ for j in attacker.moves
					#~ tempdam = pbRoughDamage(move,attacker,opponent,skill,move.basedamage)
					#~ maxdam=tempdam if tempdam>maxdam
					#~ end  
					if pbRoughDamage(move,attacker,opponent,skill,move.basedamage)>=opponent.hp
						score*=1.5
					end	
				end	
			end	
		when 0x77 # Gust
		when 0x78 # Twister
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.effects[PBEffects::Substitute]==0 && !opponent.hasWorkingAbility(:INNERFOCUS)
				if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
					miniscore=100
					miniscore*=1.3          
					if opponent.hasWorkingAbility(:STEADFAST)
						miniscore*=0.3
					end
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					miniscore+=100
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end            
					miniscore/=100.0       
					score*=miniscore             
				end            
			end 
		when 0x79 # Fusion Bolt - to do
		when 0x7A # Fusion Flare - to do
		when 0x7B # Venoshock- handled in base damage   
		when 0x7C # Smelling Salts
			if opponent.status==PBStatuses::PARALYSIS 
				score*=0.8
				if opponent.speed>attacker.speed && opponent.speed/2.0<attacker.speed
					score*=0.5
				end
			end
		when 0x7D # Wake-Up Slap
			if opponent.status==PBStatuses::SLEEP
				score*=0.8
				if attacker.hasWorkingAbility(:BADDREAMS) || attacker.pbHasMove?(getID(PBMoves,:DREAMEATER)) || attacker.pbHasMove?(getID(PBMoves,:NIGHTMARE))
					score*=0.3
				end
				if opponent.pbHasMove?(getID(PBMoves,:SNORE)) || opponnet.pbHasMove?(getID(PBMoves,:SLEEPTALK))
					score*=1.3
				end
			end
		when 0x7E # Facade - to do
		when 0x7F # Hex/Irritation - to do
		when 0x80 # Brine - to do
		when 0x81 # Revenge/Avalanche
			if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
				score*=0.5
			end
			if attacker.hp==attacker.totalhp
				score*=1.5
				if attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH)
					score*=1.5
				end
			else
				score*=0.7          
				maxdam=0
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							if tempdam>maxdam
								maxdam=tempdam
							end                
						end                
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						for j in @aiMoveMemory[1]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							if tempdam>maxdam
								maxdam=tempdam
							end                
						end                
					end            
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						for j in @aiMoveMemory[0]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							if tempdam>maxdam
								maxdam=tempdam
							end                
						end                
					end          
				end  
				if maxdam>attacker.hp
					score*=0.3
				end
			end
			movecheck=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end           
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end 
				end            
			end
			if movecheck
				score*=0.8
			end
			miniscore=attacker.hp*(1.0/attacker.totalhp)
			score*=miniscore
		when 0x82 # Assurance
			if (pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed) ^ (@trickroom!=0)
				score*=1.5
			end
		when 0x83 # Round
			if @doublebattle && attacker.pbPartner.pbHasMove?(getID(PBMoves,:ROUND))
				score*=1.5
			end
		when 0x84 # Payback
			if (pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed) ^ (@trickroom!=0)
				score*=2
			end
		when 0x85 # Retaliate - to do
		when 0x86 # Acrobatics - to do
		when 0x87 # Weather Ball - to do
			if pbWeather==PBWeather::RAINDANCE && (opponent.hasWorkingAbility(:DRYSKIN) || 
					opponent.hasWorkingAbility(:STORMDRAIN) || opponent.hasWorkingAbility(:WATERABSORB))
				score*=0.1
			elsif pbWeather==PBWeather::SUNNYDAY && (opponent.hasWorkingAbility(:FLASHFIRE))
				score*0.1
			end
		when 0x88 # Pursuit
			miniscore = 0
			miniscore+=opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]<0
			miniscore+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]<0
			miniscore+=opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]<0
			miniscore+=opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]<0
			miniscore+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]<0
			miniscore+=opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]<0
			miniscore+=opponent.stages[PBStats::ACCURACY] if opponent.stages[PBStats::ACCURACY]<0
			miniscore*=(-10)
			miniscore+=100
			miniscore/=100.0
			score*=miniscore
			if opponent.effects[PBEffects::Confusion]>0
				score*=1.2
			end
			if opponent.effects[PBEffects::LeechSeed]>=0
				score*=1.5
			end
			if opponent.effects[PBEffects::Attract]>=0
				score*=1.3
			end
			if opponent.effects[PBEffects::Substitute]>0
				score*=0.7
			end
			if opponent.effects[PBEffects::Yawn]>0
				score*=1.5
			end
			#~ if pbTypeModNoMessages(move.type,attacker,opponent,move,skill)>4   
			#~ score*=1.5
			#~ end
		when 0x89 # Return - to do
		when 0x8A # Frustration - to do
		when 0x8B # Water Spout
			if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=0.5
			end
		when 0x8C # Crush Grip - to do
		when 0x8D # Gyro Ball - to do
		when 0x8E # Stored Power - to do
		when 0x8F # Punishment - to do
		when 0x90 # Hidden Power - to do
		when 0x91 # Stacking Shot
			if attacker.status==PBStatuses::PARALYSIS 
				score*=0.7
			end
			if attacker.effects[PBEffects::Confusion]>0
				score*=0.7
			end
			if attacker.effects[PBEffects::Attract]>=0
				score*=0.7
			end
			if attacker.stages[PBStats::ACCURACY]<0
				ministat = attacker.stages[PBStats::ACCURACY]
				minimini = 15 * ministat
				minimini += 100
				minimini /= 100.0
				score*=minimini
			end
			miniscore = opponent.stages[PBStats::EVASION]
			miniscore*=(-5)
			miniscore+=100
			miniscore/=100.0
			score*=miniscore
			if attacker.hp==attacker.totalhp
				score*=1.3
			end
			maxdam=0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT) || j.id==getID(PBMoves,:KINGSSHIELD) || j.id==getID(PBMoves,:SPIKYSHIELD))
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if (j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT) || j.id==getID(PBMoves,:KINGSSHIELD) || j.id==getID(PBMoves,:SPIKYSHIELD))
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						movecheck=true if (j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT) || j.id==getID(PBMoves,:KINGSSHIELD) || j.id==getID(PBMoves,:SPIKYSHIELD))
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end          
			end  
			if maxdam<(attacker.hp/3.0)
				score*=1.5
			end
			if movecheck
				score*=0.8
			end
		when 0x92 # Echoed Voice
			if attacker.status==PBStatuses::PARALYSIS 
				score*=0.7
			end
			if attacker.effects[PBEffects::Confusion]>0
				score*=0.7
			end
			if attacker.effects[PBEffects::Attract]>=0
				score*=0.7
			end        
			if attacker.hp==attacker.totalhp
				score*=1.3
			end
			maxdam=0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end          
			end  
			if maxdam<(attacker.hp/3.0)
				score*=1.5
			end
		when 0x93 # Rage
			if attacker.attack>attacker.spatk
				score*=1.2
			end
			if attacker.hp==attacker.totalhp
				score*=1.3
			end
			maxdam=0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end          
			end  
			if maxdam<(attacker.hp/4.0)
				score*=1.3
			end
		when 0x94 # Present
			if opponent.hp==opponent.totalhp
				score*=1.2
			end
		when 0x95 # Magnitude
		when 0x96 # Natural Gift
			if !pbIsBerry?(attacker.item) || attacker.hasWorkingAbility(:KLUTZ) || @field.effects[PBEffects::MagicRoom]>0 || attacker.effects[PBEffects::Embargo]>0 || opponent.hasWorkingAbility(:UNNVERVE)
				score*=0
			end
		when 0x97 # Trump Card
			if attacker.hp==attacker.totalhp
				score*=1.2
			end
			maxdam=0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end                
				end          
			end  
			if maxdam<(attacker.hp/3.0)
				score*=1.3
			end
		when 0x98 # Reversal/Flail
			if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.1
				if attacker.hp<attacker.totalhp
					score*1.3
				end          
			end
		when 0x99 # Electro Ball - to do
		when 0x9A # Low Kick - to do
		when 0x9B # Heavy Slam - to do
		when 0x9C # Helping Hand
			if @doublebattle
				effvar = false
				for i in attacker.moves
					if pbTypeModNoMessages(i.type,attacker,opponent,i,skill)>=4            
						effvar = true
					end
				end
				if !effvar
					score*=2
				end
				if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && ((attacker.pbSpeed<pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0))
					score*=1.2
					if attacker.hp*(1.0/attacker.totalhp) < 0.33
						score*=1.5
					end
					if attacker.pbPartner.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill) && attacker.pbPartner.pbSpeed<pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)
						score*=1.5
					end
				end
				ministat = [attacker.pbPartner.attack,attacker.pbPartner.spatk].max
				minimini = [attacker.attack,attacker.spatk].max
				ministat-=minimini
				ministat+=100
				ministat/=100.0
				score*=ministat
				if attacker.pbPartner.hp==0
					score*=0
				end
			else
				score*=0
			end
		when 0x9D # Mud Sport
			if @field.effects[PBEffects::MudSport]==0
				eff1 = PBTypes.getCombinedEffectiveness(PBTypes::ELECTRIC,attacker.type1,attacker.type2,attacker.type3)
				eff2 = PBTypes.getCombinedEffectiveness(PBTypes::ELECTRIC,attacker.pbPartner.type1,attacker.pbPartner.type2,attacker.pbPartner.type3)
				if eff1>4 || eff2>4 && opponent.hasType?(:ELECTRIC)
					score*=1.5
				end
				elevar=false
				for mon in pbParty(attacker.index)
					next if mon.nil?
					if mon.hasType?(:ELECTRIC)
						elevar=true
					end
				end
				if elevar
					score*=0.7
				end
			else
				score*=0
			end
		when 0x9E # Water Sport
			if @field.effects[PBEffects::WaterSport]==0
				eff1 = PBTypes.getCombinedEffectiveness(PBTypes::FIRE,attacker.type1,attacker.type2,attacker.type3)
				eff2 = PBTypes.getCombinedEffectiveness(PBTypes::FIRE,attacker.pbPartner.type1,attacker.pbPartner.type2,attacker.pbPartner.type3)
				if eff1>4 || eff2>4 && opponent.hasType?(:FIRE)
					score*=1.5
				end
				firevar=false
				grassvar=false
				bugvar=false
				for mon in pbParty(attacker.index)
					next if mon.nil?
					if mon.hasType?(:FIRE)
						firevar=true
					end
					if mon.hasType?(:GRASS)
						grassvar=true
					end
					if mon.hasType?(:BUG)
						bugvar=true
					end
				end
				if firevar
					score*=0.7
				end
			else
				score*=0
			end
		when 0x9F # Judgement - to do
			move.type = move.pbType(move.type,attacker,opponent)
		when 0xA0 # Frost Breath
			thisinitial = score
			if !opponent.hasWorkingAbility(:BATTLEARMOR) && !opponent.hasWorkingAbility(:SHELLARMOR)
				miniscore = 100
				ministat = 0
				ministat += opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]>0
				ministat += opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]>0
				miniscore += 10*ministat
				ministat = 0
				ministat -= attacker.stages[PBStats::ATTACK] if attacker.stages[PBStats::ATTACK]<0
				ministat -= attacker.stages[PBStats::SPATK] if attacker.stages[PBStats::SPATK]<0
				miniscore += 10*ministat
				if attacker.effects[PBEffects::FocusEnergy]>0
					miniscore -= 10*attacker.effects[PBEffects::FocusEnergy]
				end
				miniscore/=100.0
				score*=miniscore
				if opponent.hasWorkingAbility(:ANGERPOINT) && thisinitial<100
					score*=0.7
					if opponent.attack>opponent.spatk
						score*=0.2
					end
				end
			else
				score*=0.7
			end        
		when 0xA1 # Lucky Chant 
			if attacker.pbOwnSide.effects[PBEffects::LuckyChant]==0  && !attacker.hasWorkingAbility(:BATTLEARMOR) || !attacker.hasWorkingAbility(:SHELLARMOR) && (opponent.effects[PBEffects::FocusEnergy]>1)
				score+=20
			end        
		when 0xA2 # Reflect        
			if attacker.pbOwnSide.effects[PBEffects::Reflect]<=0
				score*=1.2        
				if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
					score*=1.3
				end
				if attacker.hasWorkingItem(:LIGHTCLAY)
					score*=1.5
				end
				if opponent.effects[PBEffects::KingsShield]==true
					score*=2
				end
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.1
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							maxdam=0
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								if !j.pbIsPhysical?(j.type)
									next
								end    
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if maxdam<tempdam
							end  
							if maxdam>attacker.hp && (maxdam/2.0)<attacker.hp
								score*=2
							end  
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							maxdam=0
							for j in @aiMoveMemory[1]
								if !j.pbIsPhysical?(j.type)
									next
								end         
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if maxdam<tempdam
							end  
							if maxdam>attacker.hp && (maxdam/2.0)<attacker.hp
								score*=2
							end 
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							maxdam=0
							for j in @aiMoveMemory[0]
								if !j.pbIsPhysical?(j.type)
									next
								end                  
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if maxdam<tempdam
							end  
							if maxdam>attacker.hp && (maxdam/2.0)<attacker.hp
								score*=2
							end         
						end          
					end  
				end
				if ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
					score*=1.3
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:BRICKBREAK)
						end  
						score*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:BRICKBREAK)
						end  
						score*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:BRICKBREAK)
						end  
						score*=0.1 if movecheck     
					end            
				end  
			else
				score=0
			end        
		when 0xA3 # Light Screen 
			if attacker.pbOwnSide.effects[PBEffects::LightScreen]<=0
				score*=1.2        
				if pbRoughStat(opponent,PBStats::ATTACK,skill)<pbRoughStat(opponent,PBStats::SPATK,skill)
					score*=1.3
				end
				if attacker.hasWorkingItem(:LIGHTCLAY)
					score*=1.5
				end
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.1
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							maxdam=0
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								if !j.pbIsSpecial?(j.type)
									next
								end                  
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if maxdam<tempdam
							end  
							if maxdam>attacker.hp && (maxdam/2.0)<attacker.hp
								score*=2
							end                
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							maxdam=0
							for j in @aiMoveMemory[1]
								if !j.pbIsSpecial?(j.type)
									next
								end    
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if maxdam<tempdam
							end                  
							if maxdam>attacker.hp && (maxdam/2.0)<attacker.hp
								score*=2
							end                  
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							maxdam=0
							for j in @aiMoveMemory[0]
								if !j.pbIsSpecial?(j.type)
									next
								end      
								tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
								maxdam=tempdam if maxdam<tempdam
							end  
							if maxdam>attacker.hp && (maxdam/2.0)<attacker.hp
								score*=2
							end   
						end          
					end  
				end
				if ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
					score*=1.3
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:BRICKBREAK)
						end  
						score*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:BRICKBREAK)
						end  
						score*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:BRICKBREAK)
						end  
						score*=0.1 if movecheck     
					end            
				end  
			else
				score=0
			end 
		when 0xA4 # Secret Power
			score*=1.2
		when 0xA5 # Never Miss  
			if score==110
				score*=1.1
			end        
			if !attacker.hasWorkingAbility(:NOGUARD) && !opponent.hasWorkingAbility(:NOGUARD)
				if attacker.stages[PBStats::ACCURACY]<0
					miniscore = (-5)*attacker.stages[PBStats::ACCURACY]
					miniscore+=100
					miniscore/=100.0
					score*=miniscore
				end
				if opponent.stages[PBStats::EVASION]>0
					miniscore = (5)*opponent.stages[PBStats::EVASION]
					miniscore+=100
					miniscore/=100.0
					score*=miniscore
				end
				if opponent.hasWorkingItem(:LAXINCENSE) || opponent.hasWorkingItem(:BRIGHTPOWDER)
					score*=1.2
				end
				#~ if (opponent.hasWorkingAbility(:SANDVEIL) && pbWeather==PBWeather::SANDSTORM) || (opponent.hasWorkingAbility(:SNOWCLOAK) && pbWeather==PBWeather::HAIL)
				#~ score*=1.3
				#~ end
				if opponent.vanished && ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
					score*=3
				end
			end        
		when 0xA6 # Lock On
			if opponent.effects[PBEffects::LockOn]>0
				score*=0
			else
				if attacker.pbHasMove?(getID(PBMoves,:INFERNO)) || attacker.pbHasMove?(getID(PBMoves,:ZAPCANNON)) || attacker.pbHasMove?(getID(PBMoves,:DYNAMICPUNCH))
					if !attacker.hasWorkingAbility(:NOGUARD) && !opponent.hasWorkingAbility(:NOGUARD)
						score*=3
					end
				end
				if attacker.pbHasMove?(getID(PBMoves,:GUILLOTINE)) || attacker.pbHasMove?(getID(PBMoves,:SHEERCOLD)) || attacker.pbHasMove?(getID(PBMoves,:GUILLOTINE)) || attacker.pbHasMove?(getID(PBMoves,:FISSURE)) || attacker.pbHasMove?(getID(PBMoves,:HORNDRILL))
					score*=10
				end
				ministat=0
				ministat = attacker.stages[PBStats::ACCURACY] if attacker.stages[PBStats::ACCURACY]<0
				ministat*=10
				ministat+=100
				ministat/=100.0
				score*=ministat
				ministat = opponent.stages[PBStats::EVASION]
				ministat*=10
				ministat+=100
				ministat/=100.0
				score*=ministat
			end                    
		when 0xA7 # Foresight
			if opponent.effects[PBEffects::Foresight]
				score*=0
			else
				ministat = 0
				ministat = opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]>0
				ministat*=10
				ministat+=100
				ministat/=100.0
				score*=ministat
				if opponent.pbHasType?(:GHOST)
					score*=1.5
					effectvar = false
					for i in attacker.moves
						next if i.basedamage==0
						if !isConst?(i.type,PBTypes,:NORMAL) && !isConst?(i.type,PBTypes,:FIGHTING)
							effectvar = true
							break
						end
					end
					if !effectvar && !attacker.hasWorkingAbility(:SCRAPPY)
						score*=5
					end
				end          
			end        
		when 0xA8 # Miracle Eye
			if opponent.effects[PBEffects::MiracleEye]
				score*=0
			else
				ministat = 0
				ministat = opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]>0
				ministat*=10
				ministat+=100
				ministat/=100.0
				score*=ministat
				if opponent.pbHasType?(:DARK)
					score*=1.1
					effectvar = false
					for i in attacker.moves
						next if i.basedamage==0
						if !isConst?(i.type,PBTypes,:PSYCHIC)
							effectvar = true
							break
						end
					end
					if !effectvar
						score*=2
					end
				end          
			end             
		when 0xA9 # Chip Away
			ministat = 0
			ministat+=opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]>0
			ministat+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]>0
			ministat+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]>0
			ministat*=5
			ministat+=100
			ministat/=100.0
			score*=ministat
		when 0xAA # Protect
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ARCHILLES) && j.item == PBItems::ARCHILLESITE && j.form==0)
					theresone=true
				end
			end
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ELECTRUXO) && j.item == PBItems::ELECTRUXOLITE && j.form==0)
					theresone=true
				end
			end
			#~ if @doublebattle
			#~ score*=1.3
			#~ end
			if attacker.lastMoveUsed!=391
				if attacker.hasWorkingAbility(:MOODY) || attacker.pbPartner.hasWorkingAbility(:MOODY) 
					score*=3
				end
				if attacker.hasWorkingAbility(:REBUILD)
					score*=1.5 				
					score*=10 if attacker.hp!=attacker.totalhp
				end
				if (opponent.lastMoveUsed==254 || opponent.lastMoveUsed==510)
					score*=10
				end
			end	
			if (attacker.hasWorkingItem(:TOXICORB) || attacker.hasWorkingItem(:FLAMEORB)) &&
				attacker.turncount<1
				score*=3
			end
			if opponent.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || opponent.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || opponent.pbHasMove?(getID(PBMoves,:CALMMIND)) || opponent.pbHasMove?(getID(PBMoves,:WORKUP)) || opponent.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || opponent.pbHasMove?(getID(PBMoves,:TAILGLOW)) || opponent.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || opponent.pbHasMove?(getID(PBMoves,:BULKUP)) || opponent.pbHasMove?(getID(PBMoves,:COIL)) || opponent.pbHasMove?(getID(PBMoves,:CURSE)) || opponent.pbHasMove?(getID(PBMoves,:GROWTH)) || opponent.pbHasMove?(getID(PBMoves,:HONECLAWS)) || opponent.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || opponent.pbHasMove?(getID(PBMoves,:SHELLSMASH))
				score*=0.6
			end 
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON)) || attacker.effects[PBEffects::Ingrain] || attacker.effects[PBEffects::AquaRing]
				score*=1.2
			end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN        
				score*=1.2
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if attacker.status==PBStatuses::POISON || attacker.status==PBStatuses::BURN        
				score*=0.7
				if attacker.effects[PBEffects::Toxic]>0
					score*=0.3
				end
			end
			if opponent.effects[PBEffects::LeechSeed]>=0
				score*=1.3
			end
			if opponent.effects[PBEffects::PerishSong]!=0
				score*=2
			end
			if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) && (@trickroom!=0)
				score*=0.1
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				score*=0.3
			end
			if opponent.vanished
				score*=2
				if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.5
				end
			end
			if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && attacker.hasWorkingAbility(:SPEEDBOOST) 
				score*=4
				#experimental -- cancels out drop if killing moves		
				if initialscores.length>0		
					greatmoves=false		
					for i in 0...initialscores.length		
						next if i==scoreindex		
						if initialscores[i]>=100		
							greatmoves=true		
						end		
					end        		
					score*=6 if greatmoves		
				end 		
				#end experimental
			else
				score*=0.8
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
					end  
					score*=0.1 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
					end  
					score*=0.1 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
					end  
					score*=0.1 if movecheck     
				end            
			end  
			if attacker.effects[PBEffects::Wish]>0
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						maxdam=0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>attacker.hp
							score*=3
						else
							score*=1.4
						end                
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						maxdam=0
						for j in @aiMoveMemory[1]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>attacker.hp
							score*=3
						else
							score*=1.4
						end                             
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						maxdam=0
						for j in @aiMoveMemory[0]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>attacker.hp
							score*=3
						else
							score*=1.4
						end        
					end          
				end  
			end
			#~ maxdam=0
			#~ for j in opponent.moves#@aiMoveMemory[2][opponent.pokemonIndex]
			#~ tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
			#~ maxdam=tempdam if tempdam>maxdam
			#~ end  
			#~ hplost=(attacker.totalhp-attacker.hp)
			#~ thisdam=maxdam*1.1
			#~ if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
			#~ hplost+=maxdam
			#~ end
			#~ if thisdam>hplost
			#~ score*=0.1
			#~ else
			#~ if thisdam<(attacker.totalhp*0.55)
			#~ score*=3
			#~ end
			#~ end
			if (opponent.pbHasType?(:NUCLEAR) || opponent.pbHasType?(:STEEL)) && @weatherbackup==PBWeather::FALLOUT
				score*=0.5
			end
			atype=getConst(PBTypes,:NUCLEAR) || 0
			eff=PBTypes.getCombinedEffectiveness(atype,opponent.type1,opponent.type2,opponent.type3)
			falldam=(opponent.totalhp*eff/64).floor
			fallsurv=opponent.hp-falldam
			fallsurv=0 if fallsurv<0
			if !opponent.pbHasType?(:NUCLEAR) && !opponent.pbHasType?(:STEEL) && (attacker.pbHasType?(:NUCLEAR) || attacker.pbHasType?(:STEEL)) && @weatherbackup==PBWeather::FALLOUT
				score*=1.3
			end
			if (@trickroom!=0 && (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill))) || 
				(opponent.turncount==0 && opponent.hasWorkingAbility(:QUICKCHARGE)) || 
				(fallsurv==0 && (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) && !opponent.hasWorkingItem(:SAFETYGOGGLES) && !opponent.hasWorkingAbility(:OVERCOAT) && !opponent.hasWorkingAbility(:MAGICGUARD))
				score*=10
			end
			hpcheck=0.8
			if opponent.species==PBSpecies::ARCHILLES && (opponent.nature==PBNatures::ADAMANT || opponent.nature==PBNatures::NAUGHTY || opponent.nature==PBNatures::LONELY || opponent.nature==PBNatures::BRAVE)
				hpcheck=0.92
			end
			if (attacker.pbHasType?(:NUCLEAR) && (theresone || pbWeather!=PBWeather::FALLOUT) && @weatherbackup==PBWeather::FALLOUT && ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))) || 
				(@trickroom==1 && (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)))
				if attacker.species!=PBSpecies::URAYNE || (attacker.species==PBSpecies::URAYNE && (((attacker.hp.to_f)/attacker.totalhp)<hpcheck || (((attacker.hp.to_f)/attacker.totalhp)>0.65 && !(attacker.hasWorkingItem(:OCCABERRY)))))
					score*=10
				else
					if attacker.effects[PBEffects::ProtectRate]==1
						score*=10
					else
						if attacker.effects[PBEffects::ProtectRate]>1
							score/=(attacker.effects[PBEffects::ProtectRate]*3.0)
						end
					end
				end							
			else	
				if attacker.effects[PBEffects::ProtectRate]>1
					score/=(attacker.effects[PBEffects::ProtectRate]*3.0)
				end
			end
		when 0xAB # Quick Guard
			if attacker.effects[PBEffects::ProtectRate]>1
				score/=(attacker.effects[PBEffects::ProtectRate]*4.0)
			end
			privar = false
			movecheck = false
			healvar = false
			setupvar = false
			maxdam = 0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
						privar=true if j.priority>0
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
						healvar=true if j.isHealingMove?
						setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
						privar=true if j.priority>0
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
						healvar=true if j.isHealingMove?
						setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
						privar=true if j.priority>0
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
						healvar=true if j.isHealingMove?
						setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end  
				end          
			end
			if ((opponent.hasWorkingAbility(:GALEWINGS)) && opponent.hp == opponent.totalhp) || (opponent.hasWorkingAbility(:PRANKSTER) && attacker.pbHasType?(:POISON)) || privar
				score*=2
				if @doublebattle
					score*=1.3
					if setupvar || healvar
						score*=0.3
					end
					if movecheck
						score*=0.1
					end
					if attacker.effects[PBEffects::Wish]>0
						if maxdam>attacker.hp || (attacker.pbPartner.hp*(1.0/attacker.pbPartner.totalhp))<0.25
							score*=2
						end
					end
				end
			else
				score*=0
			end
			if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
				score*=4
				#experimental -- cancels out drop if killing moves       
				if initialscores.length>0    
					greatmoves=false       
					for i in 0...initialscores.length      
						next if i==scoreindex    
						if initialscores[i]>=100     
							greatmoves=true    
						end      
					end            
					score*=6 if greatmoves     
				end      
				#end experimental
			else
				score*=0.8
			end
		when 0xAC # Wide Guard
			if attacker.effects[PBEffects::ProtectRate]>1
				score/=(attacker.effects[PBEffects::ProtectRate]*4.0)
			end
			widevar = false
			movecheck = false
			healvar = false
			setupvar = false
			combust = false
			collapse = false
			shatter = false
			maxdam = 0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
						healvar=true if j.isHealingMove?
						setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						widevar = true if (j.target == PBTargets::AllOpposing || j.target == PBTargets::AllNonUsers) 
						combust=true if (j.id==getID(PBMoves,:HEATWAVE) || j.id==getID(PBMoves,:LAVAPLUME) || j.id==getID(PBMoves,:ERUPTION))
						collapse=true if (j.id==getID(PBMoves,:MAGNITUDE) || j.id==getID(PBMoves,:EARTHQUAKE) || j.id==getID(PBMoves,:BULLDOZE))
						shatter=true if (j.id==getID(PBMoves,:HYPERVOICE) || j.id==getID(PBMoves,:BOOMBURST))
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
						healvar=true if j.isHealingMove?
						setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						widevar = true if (j.target == PBTargets::AllOpposing || j.target == PBTargets::AllNonUsers) 
						combust=true if (j.id==getID(PBMoves,:HEATWAVE) || j.id==getID(PBMoves,:LAVAPLUME) || j.id==getID(PBMoves,:ERUPTION))
						collapse=true if (j.id==getID(PBMoves,:MAGNITUDE) || j.id==getID(PBMoves,:EARTHQUAKE) || j.id==getID(PBMoves,:BULLDOZE))
						shatter=true if (j.id==getID(PBMoves,:HYPERVOICE) || j.id==getID(PBMoves,:BOOMBURST))
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
						healvar=true if j.isHealingMove?
						setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						widevar = true if (j.target == PBTargets::AllOpposing || j.target == PBTargets::AllNonUsers) 
						combust=true if (j.id==getID(PBMoves,:HEATWAVE) || j.id==getID(PBMoves,:LAVAPLUME) || j.id==getID(PBMoves,:ERUPTION))
						collapse=true if (j.id==getID(PBMoves,:MAGNITUDE) || j.id==getID(PBMoves,:EARTHQUAKE) || j.id==getID(PBMoves,:BULLDOZE))
						shatter=true if (j.id==getID(PBMoves,:HYPERVOICE) || j.id==getID(PBMoves,:BOOMBURST))
					end  
				end          
			end
			if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
				score*=4
				#experimental -- cancels out drop if killing moves       
				if initialscores.length>0    
					greatmoves=false       
					for i in 0...initialscores.length      
						next if i==scoreindex    
						if initialscores[i]>=100     
							greatmoves=true    
						end      
					end            
					score*=6 if greatmoves     
				end      
				#end experimental
			else
				score*=0.8
			end
			if @doublebattle
				if widevar 
					score*=2
					if setupvar || healvar
						score*=0.3
					end
					if movecheck
						score*=0.1
					end
					if attacker.effects[PBEffects::Wish]>0
						if maxdam>attacker.hp || (attacker.pbPartner.hp*(1.0/attacker.pbPartner.totalhp))<0.25
							score*=2
						end
					end                  
				end          
			else
				score*=0
			end
		when 0xAD # Feint
			movecheck=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT) || j.id==getID(PBMoves,:SPIKYSHIELD)              
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT) || j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT) || j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end          
			end
			if movecheck
				score*=1.1
				if opponent.effects[PBEffects::ProtectRate]==0
					score*=1.2
				end
			end        
		when 0xAE # Mirror Move
			if opponent.lastMoveUsed>0  
				mirrored = PBMove.new(opponent.lastMoveUsed)
				mirrmove = PokeBattle_Move.pbFromPBMove(self,mirrored)
				if mirrmove.flags&0x10==0
					score*=0
				else
					rough = pbRoughDamage(mirrmove,attacker,opponent,skill,mirrmove.basedamage)
					mirrorscore = pbGetMoveScore(mirrmove,attacker,opponent,skill,rough,initialscores,scoreindex)
					score = mirrorscore
					if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=0.5
					end
				end
			else
				score*=0        
			end
		when 0xAF # Copycat
			if opponent.lastMoveUsed>0  
				copied = PBMove.new(opponent.lastMoveUsed)
				copymove = PokeBattle_Move.pbFromPBMove(self,copied)
				if copymove.flags&0x10==0
					score*=0
				else
					rough = pbRoughDamage(copymove,attacker,opponent,skill,copymove.basedamage)
					copyscore = pbGetMoveScore(copymove,attacker,opponent,skill,rough,initialscores,scoreindex)
					score = copyscore
					if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=0.5
					end
				end
			else
				score*=0          
			end        
		when 0xB0 # Me First
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				privar = false
				setupvar = false
				maxdam = 0
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							tempdam = pbRoughDamage(j,attacker,opponent,skill,j.basedamage)                
							maxdam=tempdam if tempdam>maxdam # This is damage against opponent, nonstandard
							privar=true if j.priority>0                
							setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						end  
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						for j in @aiMoveMemory[1]
							tempdam = pbRoughDamage(j,attacker,opponent,skill,j.basedamage)                
							maxdam=tempdam if tempdam>maxdam # This is damage against opponent, nonstandard
							privar=true if j.priority>0                
							setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						end  
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						for j in @aiMoveMemory[0]
							tempdam = pbRoughDamage(j,attacker,opponent,skill,j.basedamage)                
							maxdam=tempdam if tempdam>maxdam # This is damage against opponent, nonstandard
							privar=true if j.priority>0                
							setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						end  
					end          
				end
				if setupvar
					score*=0.8
				else
					score*=1.5
				end
				if privar || opponent.hasWorkingAbility(:PRANKSTER) || ((opponent.hasWorkingAbility(:GALEWINGS)) && opponent.hp==opponent.totalhp)
					score*=0.6
				else
					score*=1.5
				end
				if opponent.hp>0 && initialscores.length>0
					if maxdam/(1.0*opponent.hp)>initialscores.max
						score*=2
					else
						score*=0.5
					end
				end
			else
				score*=0
			end        
		when 0xB1 # Magic Coat
			if attacker.lastMoveUsed>0
				olddata = PBMove.new(attacker.lastMoveUsed)
				oldmove = PokeBattle_Move.pbFromPBMove(self,olddata)
				if oldmove.function==0xB1
					score*=0.5
				else
					if attacker.hp==attacker.totalhp
						score*=1.5
					end
					statvar = true
					for i in opponent.moves
						if i.basedamage>0
							statvar=false
						end
					end
					if statvar
						score*=3
					end
				end
			else
				if attacker.hp==attacker.totalhp
					score*=1.5
				end
				statvar = true
				for i in opponent.moves
					if i.basedamage>0
						statvar=false
					end
				end
				if statvar
					score*=3
				end
			end        
		when 0xB2 # Snatch
			setupvar = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]               
						setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]               
						setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]              
						setupvar=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
					end  
				end          
			end
			if attacker.lastMoveUsed>0
				olddata = PBMove.new(attacker.lastMoveUsed)
				oldmove = PokeBattle_Move.pbFromPBMove(self,olddata)
				if oldmove.function==0xB2
					score*=0.5
				else
					if opponent.hp==opponent.totalhp
						score*=1.5
					end
					if setupvar
						score*=2
					end
					if opponent.attack>opponent.spatk
						if attacker.attack>attacker.spatk
							score*=1.5
						else
							score*=0.7
						end
					else
						if attacker.spatk>attacker.attack
							score*=1.5
						else
							score*=0.7
						end
					end
				end
			else
				if opponent.hp==opponent.totalhp
					score*=1.5
				end
				if setupvar
					score*=2
				end
				if opponent.attack>opponent.spatk
					if attacker.attack>attacker.spatk
						score*=1.5
					else
						score*=0.7
					end
				else
					if attacker.spatk>attacker.attack
						score*=1.5
					else
						score*=0.7
					end
				end
			end
		when 0xB3 # Nature Power
		when 0xB4 # Sleep Talk
			if attacker.status==PBStatuses::SLEEP
				if attacker.statusCount<=1
					score*=0
				else
					if attacker.pbHasMove?(getID(PBMoves,:SNORE))
						count=-1
						for k in attacker.moves
							count+=1
							if k.id == 312 # Snore index
								break
							end 
						end
						if initialscores
							snorescore = initialscores[count]
							otherscores = 0
							for s in initialscores
								next if s.index==scoreindex
								next if s.index==count
								otherscores+=s
							end
							otherscores/=2.0
							if otherscores>snorescore
								score*=0.1
							else
								score*=5
							end
						end
					end
					if attacker.statusCount>1
						score*=5
					end
				end
			else
				score*=0
			end
		when 0xB5 # Assist
			if attacker.pbNonActivePokemonCount > 0
				if initialscores.length>0
					scorecheck = false
					for s in initialscores
						next if initialscores.index(s) == scoreindex
						scorecheck=true if s>25
					end
					if scorecheck
						score*=0.5
					else
						score*=1.5
					end
				end
			else
				score*=0
			end        
		when 0xB6 # Metronome
			if initialscores.length>0
				scorecheck = false
				for s in initialscores
					next if initialscores.index(s) == scoreindex
					scorecheck=true if s>21
				end
				if scorecheck
					score*=0.5
				else
					score*=1.2
				end
			end				
		when 0xB7 # Torment
			olddata = PBMove.new(attacker.lastMoveUsed)
			oldmove = PokeBattle_Move.pbFromPBMove(self,olddata)
			maxdam = 0
			moveid = -1
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
							moveid = j.id
						end              
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
							moveid = j.id
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
							moveid = j.id
						end 
					end  
				end          
			end
			if opponent.effects[PBEffects::Torment]
				score=0
			else
				if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) || (attacker.hasWorkingAbility(:PRANKSTER))
					score*=1.2
				else
					score*=0.7
				end
				if oldmove.basedamage>0
					score*=1.5
					if moveid == oldmove.id
						score*=1.3
						if maxdam*3<attacker.totalhp
							score*=1.5
						end
					end
					if attacker.pbHasMove?(getID(PBMoves,:PROTECT))
						score*=1.5
					end
					if attacker.hasWorkingItem(:LEFTOVERS)
						score*=1.3
					end
				else
					score*=0.5
				end
			end                        
		when 0xB8 # Imprison
			if attacker.effects[PBEffects::Imprison]
				score*=0
			else
				miniscore=1
				ourmoves = []
				olddata = PBMove.new(attacker.lastMoveUsed)
				oldmove = PokeBattle_Move.pbFromPBMove(self,olddata)
				for m in attacker.moves
					ourmoves.push(m.id) unless m.id<1
				end 
				if ourmoves.include?(oldmove.id)
					score*=1.3
				end          
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							if ourmoves.include?(j.id)
								miniscore+=1
								if j.isHealingMove?
									score*=1.5
								end                  
							else
								score*=0.5
							end                
						end  
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						for j in @aiMoveMemory[1]
							if ourmoves.include?(j.id)
								miniscore+=1
								if j.isHealingMove?
									score*=1.5
								end  
							else
								score*=0.5
							end
						end  
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						for j in @aiMoveMemory[0]
							if ourmoves.include?(j.id)
								miniscore+=1
								if j.isHealingMove?
									score*=1.5
								end  
							else
								score*=0.5
							end 
						end  
					end          
				end
				score*=miniscore
			end        
		when 0xB9 # Disable
			olddata = PBMove.new(attacker.lastMoveUsed)
			oldmove = PokeBattle_Move.pbFromPBMove(self,olddata)
			maxdam = 0
			moveid = -1
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
							moveid = j.id
						end              
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
							moveid = j.id
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
							moveid = j.id
						end 
					end  
				end          
			end
			if opponent.effects[PBEffects::Disable]>0 
				score=0
			else
				if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) || (attacker.hasWorkingAbility(:PRANKSTER))
					score*=1.2
				else
					score*=0.3
				end
				if oldmove.basedamage>0 || oldmove.isHealingMove?
					score*=1.5
					if moveid == oldmove.id
						score*=1.3
						if maxdam*3<attacker.totalhp
							score*=1.5
						end
					end            
				else
					score*=0.5
				end
			end                        
		when 0xBA # Taunt
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			olddata = PBMove.new(attacker.lastMoveUsed)
			oldmove = PokeBattle_Move.pbFromPBMove(self,olddata)
			if opponent.effects[PBEffects::Taunt]>0 || theresone
				score=0
			else
				if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) || (attacker.hasWorkingAbility(:PRANKSTER))
					score*=1.5
				else
					score*=0.7
				end
				if (pbGetMonRole(opponent,attacker,skill)).include?("Lead")
					score*=1.2
				else
					score*=0.8
				end
				if opponent.turncount<=1
					score*=1.1
				else
					score*=0.9
				end          
				if oldmove.isHealingMove?
					score*=1.3
				end
			end        
		when 0xBB # Heal Block
			olddata = PBMove.new(attacker.lastMoveUsed)
			oldmove = PokeBattle_Move.pbFromPBMove(self,olddata)
			if opponent.effects[PBEffects::HealBlock]>0
				score=0
			else
				if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) || (attacker.hasWorkingAbility(:PRANKSTER))
					score*=1.5
				end
				if oldmove.isHealingMove?
					score*=2.5
				end          
				if opponent.hasWorkingItem(:LEFTOVERS)
					score*=1.3
				end
			end
		when 0xBC # Encore
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			olddata = PBMove.new(opponent.lastMoveUsed)
			oldmove = PokeBattle_Move.pbFromPBMove(self,olddata)
			if opponent.effects[PBEffects::Encore]>0 || theresone
				score=0
			else
				if opponent.lastMoveUsed<=0
					score*=0.2
				else
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=1.5
					else
						if (attacker.hasWorkingAbility(:PRANKSTER))
							score*=2
						else              
							score*=0.2
						end            
					end
					if oldmove.basedamage>0 && pbRoughDamage(oldmove,opponent,attacker,skill,oldmove.basedamage)*5>attacker.hp
						score*=0.3
					else
						if opponent.stages[PBStats::SPEED]>0
							if (!attacker.hasWorkingAbility(:PRANKSTER) || opponent.hasWorkingAbility(:SPEEDBOOST))
								score*=0.5
							else
								score*=2
							end
						else
							score*=2
						end            
					end         
				end 
			end
		when 0xBD # Double Kick
			if opponent.hasWorkingItem(:ROCKYHELMET) || opponent.hasWorkingAbility(:IRONBARBS) || opponent.hasWorkingAbility(:ROUGHSKIN)
				score*=0.9
			end
			if opponent.hp==opponent.totalhp && (opponent.hasWorkingItem(:FOCUSSASH) || opponent.hasWorkingAbility(:STURDY))
				score*=1.3
			end
			if opponent.effects[PBEffects::Substitute]>0
				score*=1.3
			end
			if attacker.hasWorkingItem(:KINGSROCK)
				score*=1.1
			end        
		when 0xBE # Twinneedle
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if opponent.pbCanPoison?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.2
				ministat=0
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPDEF]
				ministat+=opponent.stages[PBStats::EVASION]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end  
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.7
				end  
				if opponent.hasWorkingAbility(:TOXICBOOST) || opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.2
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
				if opponent.hasWorkingAbility(:POISONHEAL) || opponent.hasWorkingAbility(:MAGICGUARD)
					miniscore*=0.1
				end 
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end            
				end  
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.5
				end 
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>30
							badmoves=false
						end
					end
					miniscore*=1.2 if badmoves
				end  
				if attacker.pbHasMove?(getID(PBMoves,:VENOSHOCK)) || 
					attacker.pbHasMove?(getID(PBMoves,:VENOMDRENCH))
					miniscore*=1.6
				end   
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end              
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)          
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
			end        
			if opponent.hasWorkingItem(:ROCKYHELMET) || opponent.hasWorkingAbility(:IRONBARBS) || opponent.hasWorkingAbility(:ROUGHSKIN)
				score*=0.8
			end
			if opponent.hp==opponent.totalhp && (opponent.hasWorkingItem(:FOCUSSASH) || opponent.hasWorkingAbility(:STURDY))
				score*=1.3
			end
			if opponent.effects[PBEffects::Substitute]>0
				score*=1.3
			end
			if attacker.hasWorkingItem(:KINGSROCK)
				score*=1.1
			end 
		when 0xBF # Triple Kick  
			if opponent.hasWorkingItem(:ROCKYHELMET) || opponent.hasWorkingAbility(:IRONBARBS) || opponent.hasWorkingAbility(:ROUGHSKIN)
				score*=0.8
			end
			if opponent.hp==opponent.totalhp && (opponent.hasWorkingItem(:FOCUSSASH) || opponent.hasWorkingAbility(:STURDY))
				score*=1.3
			end
			if opponent.effects[PBEffects::Substitute]>0
				score*=1.3
			end
			if attacker.hasWorkingItem(:KINGSROCK)
				score*=1.2
			end 
		when 0xC0 # Bullet Seed
			if opponent.hasWorkingItem(:ROCKYHELMET) || opponent.hasWorkingAbility(:IRONBARBS) || opponent.hasWorkingAbility(:ROUGHSKIN)
				score*=0.7
				if attacker.hasWorkingAbility(:SKILLLINK)
					score*=0.5
				end          
			end
			if opponent.hp==opponent.totalhp && (opponent.hasWorkingItem(:FOCUSSASH) || opponent.hasWorkingAbility(:STURDY))
				score*=1.3
			end
			if opponent.effects[PBEffects::Substitute]>0
				score*=1.3
			end
			if attacker.hasWorkingItem(:KINGSROCK)
				score*=1.3
			end 
		when 0xC1 # Beat Up
			count = -1
			for mon in pbParty(attacker.index)
				next if mon.nil?
				count+=1 if mon.hp>0
			end
			if count>0
				if opponent.hasWorkingAbility(:INFURIATE) || opponent.hasWorkingAbility(:STAMINA)
					score*=0.1        
				end
				if opponent.hp==opponent.totalhp && (opponent.hasWorkingItem(:FOCUSSASH) || opponent.hasWorkingAbility(:STURDY))
					score*=1.3
				end
				if opponent.effects[PBEffects::Substitute]>0
					score*=1.3
				end
				if attacker.hasWorkingItem(:KINGSROCK)
					score*=1.3
				end 
				if opponent == attacker.pbPartner && opponent.hasWorkingAbility(:JUSTIFIED)
					if opponent.stages[PBStats::ATTACK]<1 && opponent.attack>opponent.spatk
						score*=5
					end
				end          
			end
		when 0xC2 # Hyper Beam
			thisinitial = score
			if thisinitial<100
				score*=0.5
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.5 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.5 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.5 if movecheck     
					end            
				end
			end   
			if initialscores.length>0
				greatmoves=false
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>=100
						greatmoves=true
					end
				end        
				score*=0.3 if greatmoves
			end          
			miniscore=100
			livecount=0
			for i in pbParty(opponent.index)
				next if i.nil?
				livecount+=1 if i.hp!=0
			end
			if livecount>1
				miniscore*=(livecount-1)
				miniscore/=100.0
				miniscore*=0.1
				miniscore=(1-miniscore)
				score*=miniscore
			else
				score*=1.1
			end
			if @doublebattle
				score*=0.5
			end        
			livecount2=0
			for i in pbParty(attacker.index)
				next if i.nil?
				livecount2+=1 if i.hp!=0
			end
			if livecount>1 && livecount2==1
				score*=0.7
			end
		when 0xC3 # Razor Wind
			maxdam = 0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end 
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end 
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end          
			end
			if !attacker.hasWorkingItem(:POWERHERB)          
				if maxdam>attacker.hp
					score*=0.4
				else
					if attacker.hp*(1.0/attacker.totalhp)<0.5
						score*=0.6
					end
				end
				if opponent.effects[PBEffects::TwoTurnAttack]!=0
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=2
					else
						score*=0.5
					end
				end
				greatmove = false
				thisko = false
				if initialscores.length>0
					if initialscores[scoreindex] >= 100
						thisko = true
					end            
					for i in initialscores
						if i>=100
							greatmove=true
						end
					end
				end
				if greatmove
					score*=0.1
				end
				if @doublebattle
					score*=0.5
				end
				if movecheck
					score*=0.1
				end          
				if !thisko
					score*=0.7
				end
			else
				#score*=1.2  #>>DemICE
				if attacker.hasWorkingAbility(:UNBURDEN)
					score*=1.5
				end
			end
			fairyvar = false
			firevar = false
			poisonvar = false
			for p in pbParty(attacker.index)
				next if p.nil?
				fairyvar = true if p.hasType?(:FAIRY)
				firevar = true if p.hasType?(:FIRE)
				poisonvar = true if p.hasType?(:POISON)
			end     
		when 0xC4 # Solar Beam
			maxdam = 0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end   
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end 
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end          
			end
			theresone=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ARCHILLES) && j.item == PBItems::ARCHILLESITE && j.willmega)
					theresone=true
				end
			end	
			if !attacker.hasWorkingItem(:POWERHERB) && pbWeather!=PBWeather::SUNNYDAY && !theresone
				if maxdam>attacker.hp
					score*=0.4
				else
					if attacker.hp*(1.0/attacker.totalhp)<0.5
						score*=0.6
					end
				end
				if opponent.effects[PBEffects::TwoTurnAttack]!=0
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=2
					else
						score*=0.5
					end
				end
				greatmove = false
				thisko = false
				if initialscores.length>0
					if initialscores[scoreindex] >= 100
						thisko = true
					end            
					for i in initialscores
						if i>=100
							greatmove=true
						end
					end
				end
				if greatmove
					score*=0.1
				end
				if @doublebattle
					score*=0.5
				end
				if movecheck
					score*=0.1
				end          
				if !thisko
					score*=0.7
				end
			else
				for j in @battlers
					if (isConst?(j.species,PBSpecies,:ELECTRUXO) && j.item == PBItems::ELECTRUXOLITE && j.willmega)
						score*=0
					end
				end
				if attacker.hasWorkingAbility(:UNBURDEN) && pbWeather!=PBWeather::SUNNYDAY
					score*=1.5
				end
			end 
		when 0xC5 # Freeze Shock
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			maxdam = 0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end 
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end 
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end          
			end
			if !attacker.hasWorkingItem(:POWERHERB)          
				if maxdam>attacker.hp
					score*=0.4
				else
					if attacker.hp*(1.0/attacker.totalhp)<0.5
						score*=0.6
					end
				end
				if opponent.effects[PBEffects::TwoTurnAttack]!=0
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=2
					else
						score*=0.5
					end
				end
				greatmove = false
				thisko = false
				if initialscores.length>0
					if initialscores[scoreindex] >= 100
						thisko = true
					end            
					for i in initialscores
						if i>=100
							greatmove=true
						end
					end
				end
				if greatmove
					score*=0.1
				end
				if @doublebattle
					score*=0.5
				end
				if movecheck
					score*=0.1
				end          
				if !thisko
					score*=0.7
				end
			else
				#score*=1.2 #>>DemICE
				if attacker.hasWorkingAbility(:UNBURDEN)
					score*=1.5
				end
			end   
			if opponent.pbCanParalyze?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.1
				if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
					miniscore*=1.3
				end
				if opponent.hp==opponent.totalhp
					miniscore*=1.2
				end   
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.5
				end         
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.2
				end              
				if roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Pivot")
					miniscore*=1.2
				end
				if roles.include?("Tank")
					miniscore*=1.5
				end          
				if pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed && (pbRoughStat(opponent,PBStats::SPEED,skill)/2.0)<attacker.pbSpeed && @trickroom==0
					miniscore*=1.5
				end
				if pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)
					miniscore*=1.3
				end
				count = -1
				sweepvar = false
				for i in pbParty(attacker.index)
					count+=1
					next if i.nil?
					temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
					if temprole.include?("Sweeper")
						sweepvar = true
					end
				end  
				miniscore*=1.3 if sweepvar
				if opponent.effects[PBEffects::Confusion]>0
					miniscore*=1.1
				end
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=1.1
				end  
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end 
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end           
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0
				score*=miniscore          
			end  
		when 0xC6 # Ice Burn
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			maxdam = 0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end 
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end 
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end          
			end
			if !attacker.hasWorkingItem(:POWERHERB)          
				if maxdam>attacker.hp
					score*=0.4
				else
					if attacker.hp*(1.0/attacker.totalhp)<0.5
						score*=0.6
					end
				end
				if opponent.effects[PBEffects::TwoTurnAttack]!=0
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=2
					else
						score*=0.5
					end
				end
				greatmove = false
				thisko = false
				if initialscores.length>0
					if initialscores[scoreindex] >= 100
						thisko = true
					end            
					for i in initialscores
						if i>=100
							greatmove=true
						end
					end
				end
				if greatmove
					score*=0.1
				end
				if @doublebattle
					score*=0.5
				end
				if movecheck
					score*=0.1
				end          
				if !thisko
					score*=0.7
				end
			else
				#score*=1.2  #>>DemICE
				if attacker.hasWorkingAbility(:UNBURDEN)
					score*=1.5
				end
			end   
			if opponent.pbCanBurn?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.2
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end   
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.7
				end         
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:FLAREBOOST) || opponent.hasWorkingAbility(:MAGICGUARD)
					miniscore*=0.3
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end            
				end            
				if opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.1
				end    
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end            
				end           
				if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
					miniscore*=1.7
				end      
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end   
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end                         
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0
				score*=miniscore        
			end  
		when 0xC7 # Sky Attack  
			maxdam = 0
			movecheck = false
			if !attacker.hasWorkingItem(:POWERHERB)
				if maxdam>attacker.hp
					score*=0.4
				else
					if attacker.hp*(1.0/attacker.totalhp)<0.5
						score*=0.6
					end
				end
				if opponent.effects[PBEffects::TwoTurnAttack]!=0
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=2
					else
						score*=0.5
					end
				end
				greatmove = false
				thisko = false
				if initialscores.length>0
					if initialscores[scoreindex] >= 100
						thisko = true
					end            
					for i in initialscores
						if i>=100
							greatmove=true
						end
					end
				end
				if greatmove
					score*=0.1
				end
				if @doublebattle
					score*=0.5
				end
				if movecheck
					score*=0.1
				end          
				if !thisko
					score*=0.7
				end 
			else
				#score*=1.2 #>>DemICE
				if attacker.hasWorkingAbility(:UNBURDEN) && attacker.hasWorkingItem(:POWERHERB)
					score*=1.5
				end
			end 
			#score*=0.1				  
			if opponent.effects[PBEffects::Substitute]==0 && !opponent.hasWorkingAbility(:INNERFOCUS) 
				if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)
					miniscore=100
					miniscore*=1.3        
					if opponent.hasWorkingAbility(:STEADFAST)
						miniscore*=0.3
					end
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SHEERFORCE)
						miniscore*=2
					end
					#~ if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					#~ miniscore*=2
					#~ end
					miniscore+=100
					miniscore/=100.0       
					score*=miniscore             
				end            
			end 
		when 0xC8 # Skull Bash
			maxdam = 0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end 
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end 
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end  
				end          
			end
			if !attacker.hasWorkingItem(:POWERHERB)          
				if maxdam>attacker.hp
					score*=0.4
				else
					if attacker.hp*(1.0/attacker.totalhp)<0.5
						score*=0.6
					end
				end
				if opponent.effects[PBEffects::TwoTurnAttack]!=0
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=2
					else
						score*=0.5
					end
				end
				greatmove = false
				thisko = false
				if initialscores.length>0
					if initialscores[scoreindex] >= 100
						thisko = true
					end            
					for i in initialscores
						if i>=100
							greatmove=true
						end
					end
				end
				if greatmove
					score*=0.1
				end
				if @doublebattle
					score*=0.5
				end
				if movecheck
					score*=0.1
				end          
				if !thisko
					score*=0.7
				end
			else
				#score*=1.2  #>>DemICE
				if attacker.hasWorkingAbility(:UNBURDEN)
					score*=1.5
				end
			end 
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end    
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3.0)
						miniscore*=1.1
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3.0)
						miniscore*=1.1
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/3.0)
						miniscore*=1.1
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.3
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.3
			end
			if attacker.stages[PBStats::DEFENSE]>0
				ministat=attacker.stages[PBStats::DEFENSE]
				minimini=-15*ministat
				minimini+=100          
				minimini/=100.0          
				miniscore*=minimini
			end
			if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end        
				end          
			end          
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end        
			miniscore-=100
			miniscore*=(move.addlEffect.to_f/100)
			if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !(isConst?(attacker.species,PBSpecies,:KIRICORN) && attacker.item == PBItems::KIRICORNITE && attacker.willmega)
				miniscore*=2
			end     
			miniscore+=100
			miniscore/=100.0          
			if attacker.pbTooHigh?(PBStats::DEFENSE) 
				miniscore=1
			end       
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0.5
			end                  
			score*=miniscore
		when 0xC9 # Fly
			livecount1=0
			for i in pbParty(opponent.index)
				next if i.nil?
				livecount1+=1 if i.hp!=0
			end
			livecount2=0
			for i in pbParty(attacker.index)
				next if i.nil?
				livecount2+=1 if i.hp!=0
			end
			if !attacker.hasWorkingItem(:POWERHERB)
				if skill<PBTrainerAI.bestSkill
					if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::MultiTurn]>0 || opponent.effects[PBEffects::Curse]
						score*=1.2
					else
						if livecount1>1
							score*=0.8
						end
					end
					if attacker.status!=0 || attacker.effects[PBEffects::Curse] || attacker.effects[PBEffects::Attract]>-1 || attacker.effects[PBEffects::Confusion]>0
						score*=0.5
					end
					if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
						score*=1.1
					end
					if attacker.pbOwnSide.effects[PBEffects::Tailwind]>0 || attacker.pbOwnSide.effects[PBEffects::Reflect]>0 || attacker.pbOwnSide.effects[PBEffects::LightScreen]>0
						score*=0.7
					end
					if opponent.effects[PBEffects::PerishSong]!=0 && attacker.effects[PBEffects::PerishSong]==0
						score*=1.3
					end
					#~ if attacker.hasWorkingItem(:POWERHERB)
					#~ score*=1.5
					#~ end
					if attacker.hasWorkingAbility(:NOGUARD) || opponent.hasWorkingAbility(:NOGUARD)
						score*=0.1
					end
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						if opponent.vanished
							score*=3
						end            
						score*=1.1
					else
						score*=0.8
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									movecheck=true if j.isHealingMove?
								end  
								score*=0.5 if movecheck     
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									movecheck=true if j.isHealingMove?
								end  
								score*=0.5 if movecheck     
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									movecheck=true if j.isHealingMove?
								end  
								score*=0.5 if movecheck     
							end            
						end
						nevermiss=false
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									nevermiss=true if j.accuracy==0
								end             
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									nevermiss=true if j.accuracy==0
								end    
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									nevermiss=true if j.accuracy==0
								end   
							end            
						end
						if nevermiss
							score*=0.7
						end
					end          
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:THUNDER) || j.id==getID(PBMoves,:HURRICANE)
							end  
							score*=0.3 if movecheck     
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:THUNDER) || j.id==getID(PBMoves,:HURRICANE)
							end  
							score*=0.3 if movecheck      
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:THUNDER) || j.id==getID(PBMoves,:HURRICANE)
							end  
							score*=0.3 if movecheck    
						end            
					end
				end
			end				
			if @field.effects[PBEffects::Gravity]>0
				score*=0
			end
		when 0xCA # Dig
			if !attacker.hasWorkingItem(:POWERHERB)			
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if (opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::MultiTurn]>0 || opponent.effects[PBEffects::Curse])
					score*=1.2
					score*=1.2 if pbCheckGlobalAbility(:STALL)
				else
					if livecount1>1 && opponent.effects[PBEffects::MeanLook]<0
						score*=0.8
					end
				end
				if (attacker.status!=0 || attacker.effects[PBEffects::Curse] || attacker.effects[PBEffects::Attract]>-1)
					score*=0.9
				end
				if attacker.effects[PBEffects::LeechSeed]>0
					score*=0.7
					score*=0.3 if pbCheckGlobalAbility(:STALL)
				end
				if attacker.effects[PBEffects::AquaRing] || attacker.effects[PBEffects::Ingrain] || attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
					score*=1.1
					score*=1.2 if pbCheckGlobalAbility(:STALL)
				end
				if opponent.effects[PBEffects::AquaRing] || opponent.effects[PBEffects::Ingrain] || opponent.hasWorkingItem(:LEFTOVERS) || (opponent.hasWorkingItem(:BLACKSLUDGE) && opponent.pbHasType?(:POISON))
					score*=0.9
					score*=0.7 if pbCheckGlobalAbility(:STALL)
				end
				if attacker.pbOwnSide.effects[PBEffects::Tailwind]>0 || attacker.pbOwnSide.effects[PBEffects::Reflect]>0 || attacker.pbOwnSide.effects[PBEffects::LightScreen]>0
					score*=0.7
				end
				if opponent.effects[PBEffects::PerishSong]!=0 && attacker.effects[PBEffects::PerishSong]==0
					score*=1.3
				end
				#~ if attacker.hasWorkingItem(:POWERHERB)
				#~ score*=1.5
				#~ end
				if (attacker.hasWorkingAbility(:NOGUARD) || opponent.hasWorkingAbility(:NOGUARD))
					score*=0.1
				end
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					if opponent.vanished
						score*=3
					end    
					score*=1.1
				else
					if livecount1>1 && opponent.effects[PBEffects::MeanLook]<0
						score*=0.8
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									movecheck=true if j.isHealingMove?
								end  
								score*=0.5 if movecheck     
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									movecheck=true if j.isHealingMove?
								end  
								score*=0.5 if movecheck     
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									movecheck=true if j.isHealingMove?
								end  
								score*=0.5 if movecheck     
							end            
						end
						nevermiss=false
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									nevermiss=true if j.accuracy==0
								end             
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									nevermiss=true if j.accuracy==0
								end    
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									nevermiss=true if j.accuracy==0
								end   
							end            
						end
						if nevermiss
							score*=0.7
						end
					end	
				end          
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:EARTHQUAKE)
						end  
						score*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:EARTHQUAKE)
						end  
						score*=0.3 if movecheck      
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:EARTHQUAKE)
						end  
						score*=0.3 if movecheck    
					end            
				end
			end
		when 0xCB # Dive
			livecount1=0
			for i in pbParty(opponent.index)
				next if i.nil?
				livecount1+=1 if i.hp!=0
			end
			livecount2=0
			for i in pbParty(attacker.index)
				next if i.nil?
				livecount2+=1 if i.hp!=0
			end         
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::MultiTurn]>0 || opponent.effects[PBEffects::Curse]
				score*=1.2
			else
				if livecount1>1
					score*=0.8
				end
			end
			if attacker.status!=0 || attacker.effects[PBEffects::Curse] || attacker.effects[PBEffects::Attract]>-1 || attacker.effects[PBEffects::Confusion]>0
				score*=0.5
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				score*=1.1
			end
			if attacker.pbOwnSide.effects[PBEffects::Tailwind]>0 || attacker.pbOwnSide.effects[PBEffects::Reflect]>0 || attacker.pbOwnSide.effects[PBEffects::LightScreen]>0
				score*=0.7
			end
			if opponent.effects[PBEffects::PerishSong]!=0 && attacker.effects[PBEffects::PerishSong]==0
				score*=1.3
			end
			if attacker.hasWorkingItem(:POWERHERB)
				score*=1.5
			end
			if attacker.hasWorkingAbility(:NOGUARD) || opponent.hasWorkingAbility(:NOGUARD)
				score*=0.1
			end
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				if opponent.vanished
					score*=3
				end    
				score*=1.1
			else
				score*=0.8
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.5 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.5 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.5 if movecheck     
					end            
				end
				nevermiss=false
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							nevermiss=true if j.accuracy==0
						end             
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							nevermiss=true if j.accuracy==0
						end    
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							nevermiss=true if j.accuracy==0
						end   
					end            
				end
				if nevermiss
					score*=0.7
				end
			end          
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:SURF)
					end  
					score*=0.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:SURF)
					end  
					score*=0.3 if movecheck      
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:SURF)
					end  
					score*=0.3 if movecheck    
				end            
			end   
		when 0xCC # Bounce 
			# DemICE: I commented it out because of too high scores that were causing more bad than good.
			#~ if opponent.pbCanParalyze?(false,move,attacker)
			#~ miniscore=100
			#~ #miniscore*=1.2 
			#~ if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
			#~ miniscore*=1.3
			#~ end
			#~ if opponent.hp==opponent.totalhp
			#~ miniscore*=1.2
			#~ end   
			#~ ministat=0
			#~ ministat+=opponent.stages[PBStats::ATTACK]
			#~ ministat+=opponent.stages[PBStats::SPATK]
			#~ ministat+=opponent.stages[PBStats::SPEED]
			#~ if ministat>0
			#~ minimini=5*ministat
			#~ minimini+=100
			#~ minimini/=100.0
			#~ miniscore*=minimini
			#~ end
			#~ if opponent.hasWorkingAbility(:NATURALCURE)
			#~ miniscore*=0.3
			#~ end
			#~ if opponent.hasWorkingAbility(:MARVELSCALE)
			#~ miniscore*=0.5
			#~ end         
			#~ if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:GUTS)
			#~ miniscore*=0.2
			#~ end              
			#~ if roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Pivot")
			#~ miniscore*=1.2
			#~ end
			#~ if roles.include?("Tank")
			#~ miniscore*=1.5
			#~ end          
			#~ if pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed && (pbRoughStat(opponent,PBStats::SPEED,skill)/2)<attacker.pbSpeed && @trickroom==0
			#~ miniscore*=1.5
			#~ end
			#~ if pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)
			#~ miniscore*=1.3
			#~ end
			#~ count = -1
			#~ sweepvar = false
			#~ for i in pbParty(attacker.index)
			#~ count+=1
			#~ next if i.nil?
			#~ temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
			#~ if temprole.include?("Sweeper")
			#~ sweepvar = true
			#~ end
			#~ end  
			#~ miniscore*=1.3 if sweepvar
			#~ if opponent.effects[PBEffects::Confusion]>0
			#~ miniscore*=1.1
			#~ end
			#~ if opponent.effects[PBEffects::Attract]>=0
			#~ miniscore*=1.1
			#~ end  
			#~ if opponent.effects[PBEffects::Yawn]>0
			#~ miniscore*=0.4
			#~ end 
			#~ if opponent.hasWorkingAbility(:SHEDSKIN)
			#~ miniscore*=0.7
			#~ end      
			#~ miniscore-=100
			#~ miniscore*=(move.addlEffect.to_f/100)
			#~ if attacker.hasWorkingAbility(:SERENEGRACE)
			#~ miniscore*=2
			#~ end
			#~ miniscore+=100
			#~ miniscore/=100.0
			#~ score*=miniscore
			#~ end 
			if !attacker.hasWorkingItem(:POWERHERB)       
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if skill<PBTrainerAI.bestSkill
					if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::MultiTurn]>0 || opponent.effects[PBEffects::Curse]
						score*=1.2
					else
						if livecount1>1
							score*=0.8
						end
					end
					if attacker.status!=0 || attacker.effects[PBEffects::Curse] || attacker.effects[PBEffects::Attract]>-1 || attacker.effects[PBEffects::Confusion]>0
						score*=0.5
					end
					if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
						score*=1.1
					end
					if attacker.pbOwnSide.effects[PBEffects::Tailwind]>0 || attacker.pbOwnSide.effects[PBEffects::Reflect]>0 || attacker.pbOwnSide.effects[PBEffects::LightScreen]>0
						score*=0.7
					end
					if opponent.effects[PBEffects::PerishSong]!=0 && attacker.effects[PBEffects::PerishSong]==0
						score*=1.3
					end
					#~ if attacker.hasWorkingItem(:POWERHERB)
					#~ score*=1.5
					#~ end
					if attacker.hasWorkingAbility(:NOGUARD) || opponent.hasWorkingAbility(:NOGUARD)
						score*=0.1
					end
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						if opponent.vanished
							score*=3
						end    
						score*=1.1
					else
						score*=0.8
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									movecheck=true if j.isHealingMove?
								end  
								score*=0.5 if movecheck     
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									movecheck=true if j.isHealingMove?
								end  
								score*=0.5 if movecheck     
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									movecheck=true if j.isHealingMove?
								end  
								score*=0.5 if movecheck     
							end            
						end
						nevermiss=false
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									nevermiss=true if j.accuracy==0
								end             
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									nevermiss=true if j.accuracy==0
								end    
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									nevermiss=true if j.accuracy==0
								end   
							end            
						end
						if nevermiss
							score*=0.7
						end
					end          
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:THUNDER) || j.id==getID(PBMoves,:HURRICANE) || j.id==getID(PBMoves,:SMACKDOWN)
							end  
							score*=0.3 if movecheck     
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:THUNDER) || j.id==getID(PBMoves,:HURRICANE)
							end  
							score*=0.3 if movecheck      
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:THUNDER) || j.id==getID(PBMoves,:HURRICANE)
							end  
							score*=0.3 if movecheck    
						end            
					end
				end
			end
			if @field.effects[PBEffects::Gravity]>0
				score*=0
			end
		when 0xCD # Phantom Force
			if !attacker.hasWorkingItem(:POWERHERB)
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::MultiTurn]>0 || opponent.effects[PBEffects::Curse]
					score*=1.2
				else
					if livecount1>1
						score*=0.8
					end
				end
				if attacker.status!=0 || attacker.effects[PBEffects::Curse] || attacker.effects[PBEffects::Attract]>-1 || attacker.effects[PBEffects::Confusion]>0
					score*=0.5
				end
				if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
					score*=1.1
				end
				if attacker.pbOwnSide.effects[PBEffects::Tailwind]>0 || attacker.pbOwnSide.effects[PBEffects::Reflect]>0 || attacker.pbOwnSide.effects[PBEffects::LightScreen]>0
					score*=0.7
				end
				if opponent.effects[PBEffects::PerishSong]!=0 && attacker.effects[PBEffects::PerishSong]==0
					score*=1.3
				end
				#~ if attacker.hasWorkingItem(:POWERHERB)
				#~ score*=1.5
				#~ end
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.1
				else
					score*=0.8
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.5 if movecheck     
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.5 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.isHealingMove?
							end  
							score*=0.5 if movecheck     
						end            
					end
					nevermiss=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								nevermiss=true if j.accuracy==0
							end             
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								nevermiss=true if j.accuracy==0
							end    
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								nevermiss=true if j.accuracy==0
							end   
						end            
					end
					if nevermiss
						score*=0.7
					end
				end          
				if attacker.hasWorkingAbility(:NOGUARD) || opponent.hasWorkingAbility(:NOGUARD)
					score*=0.1
				else
					miniscore=100
					if attacker.stages[PBStats::ACCURACY]<0
						miniscore = (-5)*attacker.stages[PBStats::ACCURACY]
						miniscore+=100
						miniscore/=100.0
						score*=miniscore
					end
					if opponent.stages[PBStats::EVASION]>0
						miniscore = (5)*opponent.stages[PBStats::EVASION]
						miniscore+=100
						miniscore/=100.0
						score*=miniscore
					end
					if opponent.hasWorkingItem(:LAXINCENSE) || opponent.hasWorkingItem(:BRIGHTPOWDER)
						score*=1.2
					end
					#~ if (opponent.hasWorkingAbility(:SANDVEIL) && pbWeather==PBWeather::SANDSTORM) || (opponent.hasWorkingAbility(:SNOWCLOAK) && pbWeather==PBWeather::HAIL)
					#~ score*=1.3
					#~ end
					if opponent.vanished && ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
						score*=3
					end
				end
			end
		when 0xCE # Sky Drop
			if opponent.pbHasType?(:FLYING)
				score = 5          
			end     
			livecount1=0
			for i in pbParty(opponent.index)
				next if i.nil?
				livecount1+=1 if i.hp!=0
			end
			livecount2=0
			for i in pbParty(attacker.index)
				next if i.nil?
				livecount2+=1 if i.hp!=0
			end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::MultiTurn]>0 || opponent.effects[PBEffects::Curse]
				score*=1.5
			else
				if livecount1>1
					score*=0.8
				end
			end
			if attacker.status!=0 || attacker.effects[PBEffects::Curse] || attacker.effects[PBEffects::Attract]>-1 || attacker.effects[PBEffects::Confusion]>0
				score*=0.5
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				score*=1.1
			end
			if attacker.pbOwnSide.effects[PBEffects::Tailwind]>0 || attacker.pbOwnSide.effects[PBEffects::Reflect]>0 || attacker.pbOwnSide.effects[PBEffects::LightScreen]>0
				score*=0.7
			end
			if opponent.effects[PBEffects::PerishSong]!=0 && attacker.effects[PBEffects::PerishSong]==0
				score*=1.3
			end
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.1
			else
				score*=0.8
			end
			if opponent.weight>200 || opponent.effects[PBEffects::TwoTurnAttack]>0 ||
				@field.effects[PBEffects::Gravity]>0
				score*=0
			end
		when 0xCF # Fire Spin
			maxdam = 0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end               
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end              
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end               
					end  
				end          
			end
			if opponent.effects[PBEffects::MultiTurn]==0
				score*=1.2
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>30
							badmoves=false
						end
					end
					score*=1.2 if badmoves
				end  
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]>0
				ministat+=opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]>0
				ministat+=opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]>0
				ministat+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]>0
				ministat+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]>0
				ministat*=(-5)
				ministat+=100
				ministat/=100.0
				score*=ministat
				if opponent.totalhp == opponent.hp
					score*=1.2
				elsif opponent.hp*2 < opponent.totalhp
					score*=0.8
				end
				if maxdam>attacker.hp
					score*0.7
				elsif attacker.hp*3<attacker.totalhp
					score*0.7
				end
				if opponent.effects[PBEffects::LeechSeed]>=0
					score*=1.5
				end
				if opponent.effects[PBEffects::Attract]>-1 
					score*=1.3
				end          
				if opponent.effects[PBEffects::Confusion]>0
					score*=1.3
				end  
				if opponent.status==PBStatuses::BURN || opponent.status==PBStatuses::POISON
					score*=3
				end
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					score*=1.2
				end
				movecheck = false
				for j in attacker.moves
					movecheck = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
				end 
				if movecheck
					score*=1.1
				end
				if attacker.hasWorkingItem(:BINDINGBAND)
					score*=1.3
				end
				if attacker.hasWorkingItem(:GRIPCLAW)
					score*=1.1
				end  
			end       
		when 0xD0 # Whirlpool
			maxdam = 0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end               
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end              
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end               
					end  
				end          
			end
			if opponent.effects[PBEffects::MultiTurn]==0
				score*=1.2
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>30
							badmoves=false
						end
					end
					score*=1.2 if badmoves
				end  
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]>0
				ministat+=opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]>0
				ministat+=opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]>0
				ministat+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]>0
				ministat+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]>0
				ministat*=(-5)
				ministat+=100
				ministat/=100.0
				score*=ministat
				if opponent.totalhp == opponent.hp
					score*=1.2
				elsif opponent.hp*2 < opponent.totalhp
					score*=0.8
				end
				if maxdam>attacker.hp
					score*0.7
				elsif attacker.hp*3<attacker.totalhp
					score*0.7
				end
				if opponent.effects[PBEffects::LeechSeed]>=0
					score*=1.5
				end
				if opponent.effects[PBEffects::Attract]>-1 
					score*=1.3
				end          
				if opponent.effects[PBEffects::Confusion]>0
					score*=1.3
				end  
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					score*=1.2
				end
				movecheck = false
				for j in attacker.moves
					movecheck = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
				end 
				if movecheck
					score*=1.1
				end
				if attacker.hasWorkingItem(:BINDINGBAND)
					score*=1.3
				end
				if attacker.hasWorkingItem(:GRIPCLAW)
					score*=1.1
				end  
				if PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function==0xCB
					score*=1.3
				end          
			end       
		when 0xD1 # Uproar
			if opponent.status==PBStatuses::SLEEP
				score*=0.7
			end
			if opponent.pbHasMove?(getID(PBMoves,:REST))
				score*=1.8
			end
			if opponent.pbNonActivePokemonCount==0 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
				score*=1.1
			end        
			typemod=move.pbTypeModifierAI(move.type,attacker,opponent)
			if typemod<4
				score*=0.7
			end
			if attacker.hp*(1.0/attacker.totalhp)<0.75
				score*=0.75
			end
			if attacker.stages[PBStats::SPATK]<0
				minimini = attacker.stages[PBStats::SPATK]
				minimini*=5
				minimini+=100
				minimini/=100.0
				score*=minimini
			end
			if opponent.pbNonActivePokemonCount>1
				miniscore = opponent.pbNonActivePokemonCount*0.05
				miniscore = 1-miniscore
				score*=miniscore
			end
		when 0xD2 # Outrage
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			livecount1=0
			thisinitial = score
			for i in pbParty(opponent.index)
				next if i.nil?
				livecount1+=1 if i.hp!=0
			end
			livecount2=0
			for i in pbParty(attacker.index)
				next if i.nil?
				livecount2+=1 if i.hp!=0
			end
			if !attacker.hasWorkingAbility(:OWNTEMPO) || !theresone || @field.effects[PBEffects::MistyTerrain]==0
				if thisinitial<100
					score*=0.7
				end
				if attacker.hasWorkingItem(:LUMBERRY) || attacker.hasWorkingItem(:PERSIMBERRY)
					score*=1.3
				end
				if attacker.stages[PBStats::ATTACK]>0
					miniscore = (-5)*attacker.stages[PBStats::ATTACK]
					miniscore+=100
					miniscore/=100.0
					score*=miniscore
				end
				if livecount1>2
					miniscore=100
					miniscore*=(livecount1-1)
					miniscore*=0.01
					miniscore*=0.05
					miniscore=1-miniscore
					score*=miniscore
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:PROTECT)
						end  
						score*=0.5 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:PROTECT)
						end  
						score*=0.5 if movecheck           
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:PROTECT)
						end  
						score*=0.5 if movecheck        
					end            
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.7 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.7 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.7 if movecheck     
					end            
				end
			end        
		when 0xD3 # Ice Ball
			maxdam = 0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end               
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end              
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						movecheck = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end               
					end  
				end          
			end
			if opponent.pbNonActivePokemonCount==0 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
				score*=1.1
			end        
			if attacker.hp*(1.0/attacker.totalhp)<0.75
				score*=0.75
			end
			if attacker.stages[PBStats::ACCURACY]<0
				miniscore = (5)*attacker.stages[PBStats::ATTACK]
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
			end
			if attacker.stages[PBStats::ATTACK]<0
				miniscore = (5)*attacker.stages[PBStats::ATTACK]
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
			end
			if opponent.stages[PBStats::EVASION]>0
				miniscore = (-5)*attacker.stages[PBStats::ATTACK]
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
			end
			if opponent.hasWorkingItem(:LAXINCENSE) || opponent.hasWorkingItem(:BRIGHTPOWDER)
				score*=0.8
			end
			#~ if (opponent.hasWorkingAbility(:SANDVEIL) && pbWeather==PBWeather::SANDSTORM) || (opponent.hasWorkingAbility(:SNOWCLOAK) && pbWeather==PBWeather::HAIL)
			#~ score*=0.8
			#~ end
			if attacker.status==PBStatuses::PARALYSIS 
				score*=0.5
			end
			if attacker.effects[PBEffects::Confusion]>0
				score*=0.5
			end
			if attacker.effects[PBEffects::Attract]>=0
				score*=0.5
			end
			if opponent.pbNonActivePokemonCount>1
				miniscore = 1 - (opponent.pbNonActivePokemonCount*0.05)
				score*=miniscore
			end
			if attacker.effects[PBEffects::DefenseCurl]
				score*=1.2
			end
			if maxdam*3<attacker.hp
				score*=1.5
			end
			if movecheck
				score*=0.8
			end         
		when 0xD4 # Bide 
			maxdam = 0
			movecheck = false
			statmove = false
			movelength = -1
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movelength = @aiMoveMemory[2][opponent.pokemonIndex].length
						if j.basedamage==0
							statmove=true
						end
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end              
					end  
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]             
						movelength = @aiMoveMemory[1].length
						if j.basedamage==0
							statmove=true
						end
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end              
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						if j.basedamage==0
							statmove=true
						end
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam 
							maxdam=tempdam 
						end               
					end  
				end          
			end
			if (attacker.hasWorkingItem(:FOCUSSASH) || attacker.hasWorkingAbility(:STURDY))
				score*=1.2
			end 
			miniscore = attacker.hp*(1.0/attacker.totalhp)
			score*=miniscore
			if maxdam*2 > attacker.hp
				score*=0.2
			end
			if attacker.hp*3<attacker.totalhp
				score*=0.7
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				score*=1.1
			end
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				score=1.3
			end
			if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.3
			end
			if movecheck
				score*=0.5
			end
			if statmove
				score*=0.8
			else
				if movelength==4
					score*=1.3
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=5
						#experimental -- cancels out drop if killing moves
						if initialscores.length>0
							greatmoves=false
							for i in 0...initialscores.length
								next if i==scoreindex
								if initialscores[i]>=100
									greatmoves=true
								end
							end        
							score*=6 if greatmoves
						end 
						#end experimental
					else
						if maxdam*1.5>attacker.hp
							score*=2
						end
						if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
							if maxdam*2>attacker.hp
								score*=5
								#       else                  
								#         score*=0.2
								#experimental -- cancels out drop if killing moves
								if initialscores.length>0
									greatmoves=false
									for i in 0...initialscores.length
										next if i==scoreindex
										if initialscores[i]>=100
											greatmoves=true
										end
									end        
									score*=6 if greatmoves
								end 
								#end experimental
							end                
						end              
					end
				else #no highest expected damage yet		         
					if ((attacker.hp.to_f)/attacker.totalhp)<0.5		
						score*=3		
						if ((attacker.hp.to_f)/attacker.totalhp)<0.25		
							score*=3		
						end		
						#experimental -- cancels out drop if killing moves		
						if initialscores.length>0		
							greatmoves=false		
							for i in 0...initialscores.length		
								next if i==scoreindex		
								if initialscores[i]>=100		
									greatmoves=true		
								end		
							end        		
							score*=6 if greatmoves		
						end 		
						#end experimental		
					end		
				end         
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=3
					end        
				end          
			end 
			if opponent.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || opponent.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || opponent.pbHasMove?(getID(PBMoves,:CALMMIND)) || opponent.pbHasMove?(getID(PBMoves,:WORKUP)) || opponent.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || opponent.pbHasMove?(getID(PBMoves,:TAILGLOW)) || opponent.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || opponent.pbHasMove?(getID(PBMoves,:BULKUP)) || opponent.pbHasMove?(getID(PBMoves,:COIL)) || opponent.pbHasMove?(getID(PBMoves,:CURSE)) || opponent.pbHasMove?(getID(PBMoves,:GROWTH)) || opponent.pbHasMove?(getID(PBMoves,:HONECLAWS)) || opponent.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || opponent.pbHasMove?(getID(PBMoves,:SHELLSMASH))
				score*=0.7
			end 
			if (attacker.hp.to_f)/attacker.totalhp<0.5
				score*=1.5
				if attacker.effects[PBEffects::Curse]
					score*=2
				end
				if attacker.hp*4<attacker.totalhp
					if attacker.status==PBStatuses::POISON
						score*=1.5
					end
					if attacker.effects[PBEffects::LeechSeed]>=0
						score*=2
					end
					if attacker.hp<attacker.totalhp*0.13
						if attacker.status==PBStatuses::BURN
							score*=2
						end
						if (pbWeather==PBWeather::HAIL && !attacker.pbHasType?(:ICE)) || (pbWeather==PBWeather::SANDSTORM && !attacker.pbHasType?(:ROCK) && !attacker.pbHasType?(:GROUND) && !attacker.pbHasType?(:STEEL))
							score*=2
						end  
					end            
				end          
			else
				score*=0.9
			end  
			if attacker.effects[PBEffects::Toxic]>0
				score*=0.5
				if attacker.effects[PBEffects::Toxic]>4
					score*=0.5
				end          
			end
			if attacker.status==PBStatuses::PARALYSIS || attacker.effects[PBEffects::Attract]>=0 || attacker.effects[PBEffects::Confusion]>0
				score*=1.1
			end        
			#if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
			#  score*=0.8
			#end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Curse]
				score*=1.3
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM) || j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck      
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck    
				end            
			end
			if opponent.vanished || opponent.effects[PBEffects::HyperBeam]>0
				score*=1.2
			end
			if ((attacker.hp.to_f)/attacker.totalhp)>0.8
				score=0
			else
				if ((attacker.hp.to_f)/attacker.totalhp)<0.25
					score*=2
				end
			end
			if attacker.effects[PBEffects::Wish]>0
				score=0
			end
		when 0xD5 # Recover
			if skill>=PBTrainerAI.bestSkill
				#~ if @aiMoveMemory[2][opponent.pokemonIndex].length>0
				#~ maxdam=0
				#~ for j in @aiMoveMemory[2][opponent.pokemonIndex]
				#~ tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
				#~ maxdam=tempdam if tempdam>maxdam
				#~ end  
				#~ if maxdam>attacker.hp# && maxdam<attacker.totalhp/2
				#~ score*=5
				#~ #experimental -- cancels out drop if killing moves
				#~ if initialscores.length>0
				#~ greatmoves=false
				#~ for i in 0...initialscores.length
				#~ next if i==scoreindex
				#~ if initialscores[i]>=100
				#~ greatmoves=true
				#~ end
				#~ end        
				#~ score*=6 if greatmoves
				#~ end
				#~ #end experimental
				#~ else
				#~ if maxdam*1.5>attacker.hp
				#~ score*=2
				#~ end
				#~ if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				#~ if maxdam*2>attacker.hp
				#~ score*=5
				#~ #       else                  
				#~ #         score*=0.2
				#~ #experimental -- cancels out drop if killing moves
				#~ if initialscores.length>0
				#~ greatmoves=false
				#~ for i in 0...initialscores.length
				#~ next if i==scoreindex
				#~ if initialscores[i]>=100
				#~ greatmoves=true
				#~ end
				#~ end        
				#~ score*=6 if greatmoves
				#~ end
				#~ #end experimental
				#~ end                
				#~ end              
				#~ end
				#~ else #no highest expected damage yet               
				#~ if ((attacker.hp.to_f)/attacker.totalhp)<0.5       
				#~ score*=3     
				#~ if ((attacker.hp.to_f)/attacker.totalhp)<0.25    
				#~ score*=3       
				#~ end      
				#~ #experimental -- cancels out drop if killing moves       
				#~ if initialscores.length>0    
				#~ greatmoves=false       
				#~ for i in 0...initialscores.length      
				#~ next if i==scoreindex    
				#~ if initialscores[i]>=100     
				#~ greatmoves=true    
				#~ end      
				#~ end            
				#~ score*=6 if greatmoves     
				#~ end      
				#~ #end experimental    
				#~ end    
				#~ end   
				#if @aiMoveMemory[2][opponent.pokemonIndex].length>0
				maxdam=0
				for j in opponent.moves#@aiMoveMemory[2][opponent.pokemonIndex]
					tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
					maxdam=tempdam if tempdam>maxdam
				end  
				if maxdam>attacker.hp
					score*=3
				else
					if maxdam*1.5>attacker.hp
						score*=1.5
					end
					if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && !attacker.hasWorkingAbility(:PRANKSTER)
						if maxdam*2>attacker.hp
							score*=2
							#          else                  
							#           score*=0.2
						end 
					end              
				end
				hplost=(attacker.totalhp-attacker.hp)
				thisdam=maxdam*1.1
				if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && !attacker.hasWorkingAbility(:PRANKSTER)
					hplost+=maxdam
				end
				tickdamage=0
				if attacker.status==PBStatuses::POISON
					tickdamage+=attacker.totalhp/8
				end	
				if attacker.status==PBStatuses::BURN 
					tickdamage+=attacker.totalhp/16
				end
				if attacker.effects[PBEffects::LeechSeed]>=0 
					tickdamage+=attacker.totalhp/8
				end	
				if attacker.effects[PBEffects::Curse]
					tickdamage+=attacker.totalhp/4	
				end
				if attacker.effects[PBEffects::MultiTurn]>0
					tickdamage+=attacker.totalhp/8	
				end
				tickdamage*=1.1
				thisdam+=tickdamage
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if thisdam>hplost
					score*=0.1
				else
					if livecount2==1
						if hplost<(attacker.totalhp*0.55)
							score*=0.01
						end
						#~ else
						#~ if thisdam<(attacker.totalhp*0.55)
						#~ score*=3
						#~ end
					end
					if thisdam<(attacker.totalhp*0.55)
						score*=3
					end
				end
				#end      
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=3
					end        
				end          
			end
			if opponent.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || opponent.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || opponent.pbHasMove?(getID(PBMoves,:CALMMIND)) || opponent.pbHasMove?(getID(PBMoves,:WORKUP)) || opponent.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || opponent.pbHasMove?(getID(PBMoves,:TAILGLOW)) || opponent.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || opponent.pbHasMove?(getID(PBMoves,:BULKUP)) || opponent.pbHasMove?(getID(PBMoves,:COIL)) || opponent.pbHasMove?(getID(PBMoves,:CURSE)) || opponent.pbHasMove?(getID(PBMoves,:GROWTH)) || opponent.pbHasMove?(getID(PBMoves,:HONECLAWS)) || opponent.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || opponent.pbHasMove?(getID(PBMoves,:SHELLSMASH))
				score*=0.7
			end
			if (attacker.hp.to_f)/attacker.totalhp<0.5
				score*=1.5
				if attacker.effects[PBEffects::Curse]
					score*=2
				end
				if attacker.hp*4<attacker.totalhp
					if attacker.status==PBStatuses::POISON
						score*=1.5
					end
					if attacker.effects[PBEffects::LeechSeed]>=0
						score*=2
					end
					if attacker.hp<attacker.totalhp*0.13
						if attacker.status==PBStatuses::BURN
							score*=2
						end
						if (pbWeather==PBWeather::HAIL && !attacker.pbHasType?(:ICE)) || (pbWeather==PBWeather::SANDSTORM && !attacker.pbHasType?(:ROCK) && !attacker.pbHasType?(:GROUND) && !attacker.pbHasType?(:STEEL))
							score*=2
						end  
					end            
				end          
			else
				score*=0.9
			end  
			if attacker.effects[PBEffects::Toxic]>0
				score*=0.5
				if attacker.effects[PBEffects::Toxic]>4
					score*=0.5
				end          
			end
			if attacker.status==PBStatuses::PARALYSIS || attacker.effects[PBEffects::Attract]>=0 || attacker.effects[PBEffects::Confusion]>0
				score*=1.1
			end        
			#if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
			#  score*=0.8
			#end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Curse]
				score*=1.3
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck    
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck      
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck    
				end            
			end
			if opponent.vanished || opponent.effects[PBEffects::HyperBeam]>0
				score*=1.2
			end
			if ((attacker.hp.to_f)/attacker.totalhp)>0.8
				score=0
			else
				if ((attacker.hp.to_f)/attacker.totalhp)<0.25
					score*=2
				end
			end
			if attacker.effects[PBEffects::Wish]>0
				score=0
			end				
		when 0xD6 # Roost
			besttype=-1
			if skill>=PBTrainerAI.bestSkill
				#~ if @aiMoveMemory[2][opponent.pokemonIndex].length>0
				#~ maxdam=0
				#~ for j in @aiMoveMemory[2][opponent.pokemonIndex]
				#~ tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
				#~ if tempdam>maxdam
				#~ maxdam=tempdam 
				#~ besttype=j.type
				#~ end              
				#~ end  
				#~ if maxdam>attacker.hp
				#~ score*=5
				#~ #experimental -- cancels out drop if killing moves		
				#~ if initialscores.length>0		
				#~ greatmoves=false		
				#~ for i in 0...initialscores.length		
				#~ next if i==scoreindex		
				#~ if initialscores[i]>=100		
				#~ greatmoves=true		
				#~ end		
				#~ end        		
				#~ score*=6 if greatmoves		
				#~ end 		
				#~ #end experimental	
				#~ else
				#~ if maxdam*1.5>attacker.hp
				#~ score*=2
				#~ end
				#~ if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				#~ if maxdam*2>attacker.hp
				#~ score*=5
				#~ #      else                  
				#~ #      score*=0.2
				#~ #experimental -- cancels out drop if killing moves		
				#~ if initialscores.length>0		
				#~ greatmoves=false		
				#~ for i in 0...initialscores.length		
				#~ next if i==scoreindex		
				#~ if initialscores[i]>=100		
				#~ greatmoves=true		
				#~ end		
				#~ end        		
				#~ score*=6 if greatmoves		
				#~ end 		
				#~ #end experimental
				#~ end 
				#~ end              
				#~ end
				#~ else #no highest expected damage yet		 
				#~ if ((attacker.hp.to_f)/attacker.totalhp)<0.5		
				#~ score*=3		
				#~ if ((attacker.hp.to_f)/attacker.totalhp)<0.25		
				#~ score*=3		
				#~ end		
				#~ #experimental -- cancels out drop if killing moves		
				#~ if initialscores.length>0		
				#~ greatmoves=false		
				#~ for i in 0...initialscores.length		
				#~ next if i==scoreindex		
				#~ if initialscores[i]>=100		
				#~ greatmoves=true		
				#~ end		
				#~ end        		
				#~ score*=6 if greatmoves		
				#~ end 		
				#~ #end experimental		
				#~ end		
				#~ end  
				#if @aiMoveMemory[2][opponent.pokemonIndex].length>0
				maxdam=0
				for j in opponent.moves#@aiMoveMemory[2][opponent.pokemonIndex]
					tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
					maxdam=tempdam if tempdam>maxdam
				end  
				if maxdam>attacker.hp
					score*=3
				else
					if maxdam*1.5>attacker.hp
						score*=1.5
					end
					if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && !attacker.hasWorkingAbility(:PRANKSTER)
						if maxdam*2>attacker.hp
							score*=2
							#          else                  
							#           score*=0.2
						end 
					end              
				end
				hplost=(attacker.totalhp-attacker.hp)
				thisdam=maxdam*1.1
				if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && !attacker.hasWorkingAbility(:PRANKSTER)
					hplost+=maxdam
				end
				tickdamage=0
				if attacker.status==PBStatuses::POISON
					tickdamage+=attacker.totalhp/8
				end	
				if attacker.status==PBStatuses::BURN 
					tickdamage+=attacker.totalhp/16
				end
				if attacker.effects[PBEffects::LeechSeed]>=0 
					tickdamage+=attacker.totalhp/8
				end	
				if attacker.effects[PBEffects::Curse]
					tickdamage+=attacker.totalhp/4	
				end
				if attacker.effects[PBEffects::MultiTurn]>0
					tickdamage+=attacker.totalhp/8	
				end
				tickdamage*=1.1
				thisdam+=tickdamage
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if thisdam>hplost
					score*=0.1
				else
					if livecount2==1
						if hplost<(attacker.totalhp*0.55)
							score*=0.01
						end
						#~ else
						#~ if thisdam<(attacker.totalhp*0.55)
						#~ score*=3
						#~ end
					end
					if thisdam<(attacker.totalhp*0.55)
						score*=3
					end
				end
				#end       
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							besttype=j.type
						end 
					end  
					if maxdam>attacker.hp
						score*=3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							besttype=j.type
						end 
					end  
					if maxdam>attacker.hp
						score*=3
					end        
				end          
			end 
			if opponent.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || opponent.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || opponent.pbHasMove?(getID(PBMoves,:CALMMIND)) || opponent.pbHasMove?(getID(PBMoves,:WORKUP)) || opponent.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || opponent.pbHasMove?(getID(PBMoves,:TAILGLOW)) || opponent.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || opponent.pbHasMove?(getID(PBMoves,:BULKUP)) || opponent.pbHasMove?(getID(PBMoves,:COIL)) || opponent.pbHasMove?(getID(PBMoves,:CURSE)) || opponent.pbHasMove?(getID(PBMoves,:GROWTH)) || opponent.pbHasMove?(getID(PBMoves,:HONECLAWS)) || opponent.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || opponent.pbHasMove?(getID(PBMoves,:SHELLSMASH))
				score*=0.7
			end 
			if (attacker.hp.to_f)/attacker.totalhp<0.5
				score*=1.5
				if attacker.effects[PBEffects::Curse]
					score*=2
				end
				if attacker.hp*4<attacker.totalhp
					if attacker.status==PBStatuses::POISON
						score*=1.5
					end
					if attacker.effects[PBEffects::LeechSeed]>=0
						score*=2
					end
					if attacker.hp<attacker.totalhp*0.13
						if attacker.status==PBStatuses::BURN
							score*=2
						end
						if (pbWeather==PBWeather::HAIL && !attacker.pbHasType?(:ICE)) || (pbWeather==PBWeather::SANDSTORM && !attacker.pbHasType?(:ROCK) && !attacker.pbHasType?(:GROUND) && !attacker.pbHasType?(:STEEL))
							score*=2
						end  
					end            
				end          
			else
				score*=0.9
			end  
			if attacker.effects[PBEffects::Toxic]>0
				score*=0.5
				if attacker.effects[PBEffects::Toxic]>4
					score*=0.1
				end          
			end
			if attacker.status==PBStatuses::PARALYSIS || attacker.effects[PBEffects::Attract]>=0 || attacker.effects[PBEffects::Confusion]>0
				score*=1.1
			end
			#if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
			#  score*=0.8
			#end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Curse]
				score*=1.3
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck      
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck    
				end            
			end
			if opponent.vanished || opponent.effects[PBEffects::HyperBeam]>0
				score*=1.2
			end       
			if besttype!=-1
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					if isConst?(besttype,PBTypes,:ROCK) || isConst?(besttype,PBTypes,:ICE) || isConst?(besttype,PBTypes,:ELECTRIC)
						score*=1.5
					else
						if isConst?(besttype,PBTypes,:BUG) || isConst?(besttype,PBTypes,:FIGHTING) || isConst?(besttype,PBTypes,:GRASS) || isConst?(besttype,PBTypes,:GROUND)
							score*=0.5
						end
					end
				end          
			end
			if ((attacker.hp.to_f)/attacker.totalhp)>0.8
				score=0
			else
				if ((attacker.hp.to_f)/attacker.totalhp)<0.25
					score*=2
				end
			end
			if attacker.effects[PBEffects::Wish]>0
				score=0
			end
		when 0xD7 # Wish
			protectmove=false
			for j in attacker.moves
				protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
			end 
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=0
					else
						if maxdam*2>attacker.hp
							if protectmove
								score*=3
							else
								score*=0
							end
						else
							if maxdam*3>attacker.hp
								score*=3
							end
						end  
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=0
					else
						if maxdam*2>attacker.hp
							if protectmove
								score*=3
							else
								score*=0
							end
						else
							if maxdam*3>attacker.hp
								score*=3
							end
						end  
					end
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=0
					else
						if maxdam*2>attacker.hp
							if protectmove
								score*=3
							else
								score*=0
							end
						else
							if maxdam*3>attacker.hp
								score*=3
							end
						end  
					end
				end          
			end 
			if opponent.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || opponent.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || opponent.pbHasMove?(getID(PBMoves,:CALMMIND)) || opponent.pbHasMove?(getID(PBMoves,:WORKUP)) || opponent.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || opponent.pbHasMove?(getID(PBMoves,:TAILGLOW)) || opponent.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || opponent.pbHasMove?(getID(PBMoves,:BULKUP)) || opponent.pbHasMove?(getID(PBMoves,:COIL)) || opponent.pbHasMove?(getID(PBMoves,:CURSE)) || opponent.pbHasMove?(getID(PBMoves,:GROWTH)) || opponent.pbHasMove?(getID(PBMoves,:HONECLAWS)) || opponent.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || opponent.pbHasMove?(getID(PBMoves,:SHELLSMASH))
				score*=0.7
			end 
			if (attacker.hp.to_f)/attacker.totalhp<0.5
				if attacker.effects[PBEffects::Curse]
					score*=2
				end
				if attacker.hp*4<attacker.totalhp
					if attacker.status==PBStatuses::POISON
						score*=1.5
					end
					if attacker.effects[PBEffects::LeechSeed]>=0
						score*=2
					end
					if attacker.hp<attacker.totalhp*0.13
						if attacker.status==PBStatuses::BURN
							score*=2
						end
						if (pbWeather==PBWeather::HAIL && !attacker.pbHasType?(:ICE)) || (pbWeather==PBWeather::SANDSTORM && !attacker.pbHasType?(:ROCK) && !attacker.pbHasType?(:GROUND) && !attacker.pbHasType?(:STEEL))
							score*=2
						end  
					end            
				end          
			else
				score*=0.7
			end  
			if attacker.effects[PBEffects::Toxic]>0
				score*=0.5
				if attacker.effects[PBEffects::Toxic]>4
					score*=0.5
				end          
			end
			if attacker.status==PBStatuses::PARALYSIS || attacker.effects[PBEffects::Attract]>=0 || attacker.effects[PBEffects::Confusion]>0
				score*=1.1
			end
			if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
				score*=0.8
			end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Curse]
				score*=1.3
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck      
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck    
				end            
			end
			if opponent.vanished || opponent.effects[PBEffects::HyperBeam]>0
				score*=1.2
			end
			if roles.include?("Cleric")
				wishpass=false
				for i in pbParty(attacker.index)
					next if i.nil?
					if i.hp/i.totalhp<0.6 && i.hp/i.totalhp>0.3
						wishpass=true
					end
				end
				score*=1.3 if wishpass
			end        
			if attacker.effects[PBEffects::Wish]>0
				score=0
			end
		when 0xD8 # Synthesis
			if skill>=PBTrainerAI.bestSkill
				#~ if @aiMoveMemory[2][opponent.pokemonIndex].length>0
				#~ maxdam=0
				#~ for j in @aiMoveMemory[2][opponent.pokemonIndex]
				#~ tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
				#~ maxdam=tempdam if tempdam>maxdam
				#~ end  
				#~ if maxdam>attacker.hp
				#~ score*=3
				#~ else
				#~ if maxdam*1.5>attacker.hp
				#~ score*=1.5
				#~ end
				#~ if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				#~ if maxdam*2>attacker.hp
				#~ score*=2
				#~ #          else                  
				#~ #           score*=0.2
				#~ end 
				#~ end              
				#~ end
				#~ end
				#if @aiMoveMemory[2][opponent.pokemonIndex].length>0
				maxdam=0
				for j in opponent.moves#@aiMoveMemory[2][opponent.pokemonIndex]
					tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
					maxdam=tempdam if tempdam>maxdam
				end  
				if maxdam>attacker.hp
					score*=3
				else
					if maxdam*1.5>attacker.hp
						score*=1.5
					end
					if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && !attacker.hasWorkingAbility(:PRANKSTER)
						if maxdam*2>attacker.hp
							score*=2
							#else                  
							#score*=0.2
						end 
					end              
				end
				hplost=(attacker.totalhp-attacker.hp)
				thisdam=maxdam*1.1
				if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && !attacker.hasWorkingAbility(:PRANKSTER)
					hplost+=maxdam
				end
				tickdamage=0
				if attacker.status==PBStatuses::POISON
					tickdamage+=attacker.totalhp/8
				end	
				if attacker.status==PBStatuses::BURN 
					tickdamage+=attacker.totalhp/16
				end
				if attacker.effects[PBEffects::LeechSeed]>=0 
					tickdamage+=attacker.totalhp/8
				end	
				if attacker.effects[PBEffects::Curse]
					tickdamage+=attacker.totalhp/4	
				end
				if attacker.effects[PBEffects::MultiTurn]>0
					tickdamage+=attacker.totalhp/8	
				end
				tickdamage*=1.1
				thisdam+=tickdamage
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if thisdam>hplost
					score*=0.1
				else
					if livecount2==1
						if hplost<(attacker.totalhp*0.55)
							score*=0.01
						end
						#~ else
						#~ if thisdam<(attacker.totalhp*0.55)
						#~ score*=3
						#~ end
					end
					if thisdam<(attacker.totalhp*0.55)
						score*=3
					end
				end
				#end				
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=3
					end        
				end          
			end 
			if opponent.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || opponent.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || opponent.pbHasMove?(getID(PBMoves,:CALMMIND)) || opponent.pbHasMove?(getID(PBMoves,:WORKUP)) || opponent.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || opponent.pbHasMove?(getID(PBMoves,:TAILGLOW)) || opponent.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || opponent.pbHasMove?(getID(PBMoves,:BULKUP)) || opponent.pbHasMove?(getID(PBMoves,:COIL)) || opponent.pbHasMove?(getID(PBMoves,:CURSE)) || opponent.pbHasMove?(getID(PBMoves,:GROWTH)) || opponent.pbHasMove?(getID(PBMoves,:HONECLAWS)) || opponent.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || opponent.pbHasMove?(getID(PBMoves,:SHELLSMASH))
				score*=0.7
			end 
			if (attacker.hp.to_f)/attacker.totalhp<0.5
				score*=1.5
				if attacker.effects[PBEffects::Curse]
					score*=2
				end
				if attacker.hp*4<attacker.totalhp
					if attacker.status==PBStatuses::POISON
						score*=1.5
					end
					if attacker.effects[PBEffects::LeechSeed]>=0
						score*=2
					end
					if attacker.hp<attacker.totalhp*0.13
						if attacker.status==PBStatuses::BURN
							score*=2
						end
						#~ if (pbWeather==PBWeather::HAIL && !attacker.pbHasType?(:ICE)) || (pbWeather==PBWeather::SANDSTORM && !attacker.pbHasType?(:ROCK) && !attacker.pbHasType?(:GROUND) && !attacker.pbHasType?(:STEEL))
						#~ score*=2
						#~ end  
					end            
				end          
			else
				score*=0.7
			end  
			if attacker.effects[PBEffects::Toxic]>0
				score*=0.5
				if attacker.effects[PBEffects::Toxic]>4
					score*=0.5
				end          
			end
			if attacker.status==PBStatuses::PARALYSIS || attacker.effects[PBEffects::Attract]>=0 || attacker.effects[PBEffects::Confusion]>0
				score*=1.1
			end
			if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
				score*=0.8
			end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Curse]
				score*=1.3
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck      
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck    
				end            
			end
			if opponent.vanished || opponent.effects[PBEffects::HyperBeam]>0
				score*=1.2
			end
			if pbWeather==PBWeather::SUNNYDAY
				score*=1.3
			elsif pbWeather==PBWeather::SANDSTORM || pbWeather==PBWeather::RAINDANCE || pbWeather==PBWeather::HAIL
				score*=0.5
			end                  
			if ((attacker.hp.to_f)/attacker.totalhp)>0.8
				score=0
			else
				if ((attacker.hp.to_f)/attacker.totalhp)<0.25
					score*=2
				end
			end      
			if attacker.effects[PBEffects::Wish]>0
				score=0
			end 
		when 0xD9 # Rest
			movecheck = false
			sleepcheck = false
			maxdam=0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
						sleepcheck=true if j.id==getID(PBMoves,:WAKEUPSLAP) || j.id==getID(PBMoves,:NIGHTMARE) || j.id==getID(PBMoves,:DREAMEATER)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
						sleepcheck=true if j.id==getID(PBMoves,:WAKEUPSLAP) || j.id==getID(PBMoves,:NIGHTMARE) || j.id==getID(PBMoves,:DREAMEATER)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
						sleepcheck=true if j.id==getID(PBMoves,:WAKEUPSLAP) || j.id==getID(PBMoves,:NIGHTMARE) || j.id==getID(PBMoves,:DREAMEATER)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end                    
				end          
			end 
			if maxdam>attacker.hp
				score*=3
			else
				if skill>=PBTrainerAI.bestSkill
					if maxdam*1.5>attacker.hp
						score*=1.5
					end
					if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						if maxdam*2>attacker.hp
							score*=2      
						end 
					end
				end
			end      
			if (attacker.hp.to_f)/attacker.totalhp<0.5
				score*=1.5
			else
				score*=0.5
			end
			if (roles.include?("Physical Wall") || roles.include?("Special Wall"))
				score*=1.2
			end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Curse]
				score*=1.3
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if movecheck
				score*=1.2
			end
			if attacker.hp*(1.0/attacker.totalhp)>=0.8
				score*=0
			end
			if !(attacker.hasWorkingItem(:LUMBERRY) || attacker.hasWorkingItem(:CHESTOBERRY) || (attacker.hasWorkingAbility(:HYDRATION) && (pbWeather==PBWeather::RAINDANCE)))
				score*=0.8
				if maxdam*2 > attacker.totalhp
					score*=0.4
				else
					if maxdam*3 < attacker.totalhp
						score*=1.3
					end
				end
				if sleepcheck || opponent.hasWorkingAbility(:BADDREAMS) #|| (isConst?(opponent.species,PBSpecies,:DRAMSAMA) && opponent.item == PBItems::DRAMSAMAITE && opponent.willmega)
					score*=0.7
				end
				if attacker.pbHasMove?(getID(PBMoves,:SLEEPTALK))
					score*=1.3
				end 
				if attacker.pbHasMove?(getID(PBMoves,:SNORE))
					score*=1.2
				end 
				if attacker.hasWorkingAbility(:SHEDSKIN)
					score*=1.1
				end
				if attacker.hasWorkingAbility(:EARLYBIRD)
					score*=1.1
				end
				if @doublebattle
					score*=0.8
				end
			else
				if attacker.hasWorkingItem(:LUMBERRY) || attacker.hasWorkingItem(:CHESTOBERRY)
					if attacker.hasWorkingAbility(:HARVEST)
						score*=1.2
					else
						score*=0.8
					end
				end
			end
			if attacker.status!=0
				score*=1.4
				if attacker.effects[PBEffects::Toxic]>0
					score*=1.2
				end
			end
			if !attacker.pbCanSleep?(false,true,true,move,attacker)
				score*=0
			end
		when 0xDA # Aqua Ring
			maxdam=0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:PERISHSONG)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:PERISHSONG)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecheck=true if j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:PERISHSONG)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end                    
				end          
			end 
			if !attacker.effects[PBEffects::AquaRing]
				if attacker.hp*(1.0/attacker.totalhp)>0.75
					score*=1.2
				end
				if attacker.hp*(1.0/attacker.totalhp)<0.50
					score*=0.7
					if attacker.hp*(1.0/attacker.totalhp)<0.33
						score*=0.5
					end            
				end
				if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingAbility(:RAINDISH) && pbWeather==PBWeather::RAINDANCE) || (attacker.hasWorkingAbility(:ICEBODY) && pbWeather==PBWeather::HAIL) || attacker.effects[PBEffects::Ingrain] || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
					score*=1.2
				end
				protectmove=false
				for j in attacker.moves
					protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
				end 
				if protectmove
					score*=1.2
				end
				if maxdam*5 < attacker.totalhp
					score*=1.2
				end
				if maxdam > attacker.totalhp*0.4
					score*=0.3
				end
				if (roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Tank"))
					score*=1.2
				end
				if attacker.pbHasMove?(getID(PBMoves,:VOLTSWITCH)) || attacker.pbHasMove?(getID(PBMoves,:UTURN)) || attacker.pbHasMove?(getID(PBMoves,:ALLYSWITCH))
					score*=0.8
				end
				if movecheck
					score*=0.3
				end
				if @doublebattle
					score*=0.5
				end
				if attacker.species==PBSpecies::SYRENTIDE && (attacker.item == PBItems::SYRENTIDEITE || attacker.PULSE3)
					score*=10
				end
			else
				score*=0
			end  
		when 0xDB # Ingrain
			maxdam=0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:PERISHSONG)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:PERISHSONG)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecheck=true if j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:PERISHSONG)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end                    
				end          
			end 
			if !attacker.effects[PBEffects::Ingrain]
				if attacker.hp*(1.0/attacker.totalhp)>0.75
					score*=1.2
				end
				if attacker.hp*(1.0/attacker.totalhp)<0.50
					score*=0.7
					if attacker.hp*(1.0/attacker.totalhp)<0.33
						score*=0.5
					end            
				end
				if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingAbility(:RAINDISH) && pbWeather==PBWeather::RAINDANCE) || (attacker.hasWorkingAbility(:ICEBODY) && pbWeather==PBWeather::HAIL) || attacker.effects[PBEffects::AquaRing] || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
					score*=1.2
				end
				protectmove=false
				for j in attacker.moves
					protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
				end 
				if protectmove
					score*=1.2
				end
				if maxdam*5 < attacker.totalhp
					score*=1.2
				end
				if maxdam > attacker.totalhp*0.4
					score*=0.3
				end
				if (roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Tank"))
					score*=1.2
				end
				if attacker.pbHasMove?(getID(PBMoves,:VOLTSWITCH)) || attacker.pbHasMove?(getID(PBMoves,:UTURN)) || attacker.pbHasMove?(getID(PBMoves,:ALLYSWITCH))
					score*=0.8
				end
				if movecheck
					score*=0.3
				end
				if @doublebattle
					score*=0.5
				end
			else
				score*=0
			end                         
		when 0xDC # Leech Seed 
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:RAPIDSPIN) || j.id==getID(PBMoves,:UTURN) || j.id==getID(PBMoves,:VOLTSWITCH)
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:RAPIDSPIN) || j.id==getID(PBMoves,:UTURN) || j.id==getID(PBMoves,:VOLTSWITCH)
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecheck=true if j.id==getID(PBMoves,:RAPIDSPIN) || j.id==getID(PBMoves,:UTURN) || j.id==getID(PBMoves,:VOLTSWITCH)
					end                    
				end          
			end 
			if opponent.effects[PBEffects::LeechSeed]<0 && ! opponent.pbHasType?(:GRASS)
				if (roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Tank"))
					score*=1.2
				end
				if attacker.effects[PBEffects::Substitute]>0
					score*=1.3
				end
				if opponent.hp==opponent.totalhp
					score*=1.1
				else
					score*=(opponent.hp*(1.0/opponent.totalhp))
				end
				if opponent.hasWorkingItem(:LEFTOVERS) || opponent.hasWorkingItem(:BIGROOT) || (opponent.hasWorkingItem(:BLACKSLUDGE) && opponent.pbHasType?(:POISON))
					score*=1.2
				end
				if opponent.status==PBStatuses::PARALYSIS || opponent.status==PBStatuses::SLEEP 
					score*=1.2
				end
				if opponent.effects[PBEffects::Confusion]>0
					score*=1.2
				end
				if opponent.effects[PBEffects::Attract]>=0
					score*=1.2
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN
					score*=1.1
				end
				if movecheck
					score*=0.2
				end
				if opponent.hp*2<opponent.totalhp
					score*=0.8
					if opponent.hp*4<opponent.totalhp
						score*=0.2
					end
				end
				protectmove=false
				for j in attacker.moves
					protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
				end 
				if protectmove
					score*=1.2
				end
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]>0
				ministat+=opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]>0
				ministat+=opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]>0
				ministat+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]>0
				ministat+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]>0
				ministat+=opponent.stages[PBStats::ACCURACY] if opponent.stages[PBStats::ACCURACY]>0
				ministat+=opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]>0
				ministat*=(5)
				ministat+=100
				ministat/=100.0
				score*=ministat
				if opponent.hasWorkingAbility(:LIQUIDOOZE)
					score*=0
				end
			else
				score*=0
			end        
		when 0xDD # Drain Punch
			minimini = score*0.01
			miniscore = (opponent.hp*minimini)/2.0
			if miniscore > (attacker.totalhp-attacker.hp)
				miniscore = (attacker.totalhp-attacker.hp)
			end
			if attacker.totalhp>0
				miniscore/=(attacker.totalhp).to_f
			end
			if attacker.hasWorkingItem(:BIGROOT)
				miniscore*=1.3
			end
			miniscore+=1
			if opponent.hasWorkingAbility(:LIQUIDOOZE)
				miniscore = (2-miniscore)
			end
			if (attacker.hp!=attacker.totalhp || ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))) && opponent.effects[PBEffects::Substitute]==0
				score*=miniscore
			end
			ghostvar=false
			for mon in pbParty(attacker.index)
				next if mon.nil?
				if mon.hasType?(:GHOST)
					ghostvar=true
				end
			end
		when 0xDE # Dream Eater
			if opponent.status==PBStatuses::SLEEP
				minimini = score*0.01
				miniscore = (opponent.hp*minimini)/2.0
				if miniscore > (attacker.totalhp-attacker.hp)
					miniscore = (attacker.totalhp-attacker.hp)
				end
				if attacker.totalhp>0
					miniscore/=(attacker.totalhp).to_f
				end
				if attacker.hasWorkingItem(:BIGROOT)
					miniscore*=1.3
				end
				miniscore+=1
				if opponent.hasWorkingAbility(:LIQUIDOOZE)
					miniscore = (2-miniscore)
				end
				if (attacker.hp!=attacker.totalhp || ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))) && opponent.effects[PBEffects::Substitute]==0
					score*=miniscore
				end
			else
				score*=0
			end        
		when 0xDF # Heal Pulse
			if !@doublebattle || attacker.pbIsOpposing?(opponent.index) 
				score*=0
			else
				if !attacker.pbIsOpposing?(opponent.index) 
					if opponent.hp*(1.0/opponent.totalhp)<0.7 && opponent.hp*(1.0/opponent.totalhp)>0.3
						score*=1.5
					end
					if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Curse]
						score*=0.8
						if opponent.effects[PBEffects::Toxic]>0
							score*=0.7
						end
					end
					if opponent.hp*(1.0/opponent.totalhp)>0.8
						if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && ((attacker.pbSpeed<pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0))
							score*=0.5
						else
							score*=0
						end
					end
				else
					score*=0
				end
			end        
		when 0xE0 # Explosion 
			protectmove = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
					end                    
				end          
			end 
			score*=0.7
			if attacker.hp==attacker.totalhp
				score*=0.2
			else
				miniscore = attacker.hp*(1.0/attacker.totalhp)
				miniscore = 1-miniscore
				score*=miniscore
				if attacker.hp*4<attacker.totalhp            
					score*=1.3
					if attacker.hasWorkingItem(:CUSTAPBERRY)
						score*=1.4
					end            
				end          
			end
			if roles.include?("Lead")
				score*=1.2
			end
			if opponent.effects[PBEffects::Substitute]>0
				score*=0.3
			end
			if protectmove
				score*=0.3
			end
			firevar=false
			poisonvar=false
			ghostvar=false
			for mon in pbParty(attacker.index) 
				next if mon.nil?
				if mon.hasType?(:FIRE)
					firevar=true
				end
				if mon.hasType?(:POISON)
					poisonvar=true
				end  
				if mon.hasType?(:GHOST)
					ghostvar=true
				end          
			end
			if pbCheckGlobalAbility(:DAMP)
				score*=0
			end
		when 0xE1 # Final Gambit 
			score*=0.7
			if attacker.hp > opponent.hp
				score*=1.1
			else
				score*=0.5
			end
			if (attacker.pbSpeed>pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.1
			else
				score*=0.5
			end  
			if opponent.hasWorkingItem(:FOCUSSASH) || opponent.hasWorkingAbility(:STURDY)
				score*=0.2
			end        
		when 0xE2 # Memento
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>10
						badmoves=false
					end
				end
				score = 15 if badmoves
			end          
			if attacker.hp==attacker.totalhp
				score*=0.2
			else
				miniscore = attacker.hp*(1.0/attacker.totalhp)
				miniscore = 1-miniscore
				score*=miniscore
				if attacker.hp*4<attacker.totalhp            
					score*=1.3
				end
			end
			if opponent.attack > opponent.spatk
				if opponent.stages[PBStats::ATTACK]<-1
					score*=0.1
				end
			else
				if opponent.stages[PBStats::SPATK]<-1
					score*=0.1
				end
			end
			if opponent.hasWorkingAbility(:CLEARBODY) || opponent.hasWorkingAbility(:WHITESMOKE) || theresone || @field.effects[PBEffects::MistyTerrain]>0
				score*=0
			end        
		when 0xE3 # Healing Wish
			count=0
			for mon in pbParty(opponent.index)
				next if mon.nil?
				count+=1 if mon.hp!=mon.totalhp
			end
			count-=1 if attacker.hp!=attacker.totalhp
			if count==0
				score*=0
			else
				maxscore = 0
				for mon in pbParty(opponent.index)
					next if mon.nil?
					if mon.hp!=mon.totalhp
						miniscore = 1 - mon.hp*(1.0/mon.totalhp)
						miniscore*=2 if mon.status!=0
						maxscore=miniscore if miniscore>maxscore
					end            
				end
				score*=maxscore
			end
			if attacker.hp==attacker.totalhp
				score*=0.2
			else
				miniscore = attacker.hp*(1.0/attacker.totalhp)
				miniscore = 1-miniscore
				score*=miniscore
				if attacker.hp*4<attacker.totalhp            
					score*=1.3
					if attacker.hasWorkingItem(:CUSTAPBERRY)
						score*=1.4
					end            
				end
			end
			if (attacker.pbSpeed>pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.1
			else
				score*0.5
			end                 
		when 0xE4 # Lunar Dance
			count=0
			for mon in pbParty(opponent.index)
				next if mon.nil?
				count+=1 if mon.hp!=mon.totalhp
			end
			count-=1 if attacker.hp!=attacker.totalhp
			if count==0
				score*=0
			else
				maxscore = 0
				score*=1.2
				for mon in pbParty(opponent.index)
					next if mon.nil?
					if mon.hp!=mon.totalhp
						miniscore = 1 - mon.hp*(1.0/mon.totalhp)
						miniscore*=2 if mon.status!=0
						maxscore=miniscore if miniscore>maxscore
					end            
				end
				score*=maxscore
			end
			if attacker.hp==attacker.totalhp
				score*=0.2
			else
				miniscore = attacker.hp*(1.0/attacker.totalhp)
				miniscore = 1-miniscore
				score*=miniscore
				if attacker.hp*4<attacker.totalhp            
					score*=1.3
					if attacker.hasWorkingItem(:CUSTAPBERRY)
						score*=1.4
					end            
				end
			end
			if (attacker.pbSpeed>pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.1
			else
				score*0.5
			end
		when 0xE5 # Perish Song
			livecount1=0
			for i in pbParty(opponent.index)
				next if i.nil?
				livecount1+=1 if i.hp!=0
			end
			livecount2=0
			for i in pbParty(attacker.index)
				next if i.nil?
				livecount2+=1 if i.hp!=0
			end
			if livecount1==1 || (livecount1==2 && @doublebattle)
				score*=4
			else
				if attacker.pbHasMove?(getID(PBMoves,:UTURN)) || attacker.pbHasMove?(getID(PBMoves,:VOLTSWITCH))
					score*=1.5
				end
				if attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					score*=3
				end
				if attacker.pbHasMove?(getID(PBMoves,:PROTECT))
					score*=1.2
				end
				count = -1
				sweepvar = false
				for i in pbParty(attacker.index)
					count+=1
					next if i.nil?
					temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
					if temprole.include?("Sweeper")
						sweepvar = true
					end
				end  
				score*=1.2 if sweepvar
				for j in attacker.moves
					if j.isHealingMove?
						score*=1.2
						break
					end
				end
				raisedstats=0
				raisedstats+=opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]>0
				raisedstats+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]>0
				raisedstats+=opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]>0
				raisedstats+=opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]>0
				raisedstats+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]>0
				raisedstats+=opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]>0
				miniscore= 5*raisedstats
				miniscore+=100
				miniscore/=100.0
				score*=miniscore          
				loweredstats=0
				loweredstats+=attacker.stages[PBStats::ATTACK] if attacker.stages[PBStats::ATTACK]<0
				loweredstats+=attacker.stages[PBStats::DEFENSE] if attacker.stages[PBStats::DEFENSE]<0
				loweredstats+=attacker.stages[PBStats::SPEED] if attacker.stages[PBStats::SPEED]<0
				loweredstats+=attacker.stages[PBStats::SPATK] if attacker.stages[PBStats::SPATK]<0
				loweredstats+=attacker.stages[PBStats::SPDEF] if attacker.stages[PBStats::SPDEF]<0
				loweredstats+=attacker.stages[PBStats::EVASION] if attacker.stages[PBStats::EVASION]<0
				miniscore= (-5)*loweredstats
				miniscore+=100
				miniscore/=100.0
				score*=miniscore          
				raisedstats=0
				raisedstats+=attacker.stages[PBStats::ATTACK] if attacker.stages[PBStats::ATTACK]>0
				raisedstats+=attacker.stages[PBStats::DEFENSE] if attacker.stages[PBStats::DEFENSE]>0
				raisedstats+=attacker.stages[PBStats::SPEED] if attacker.stages[PBStats::SPEED]>0
				raisedstats+=attacker.stages[PBStats::SPATK] if attacker.stages[PBStats::SPATK]>0
				raisedstats+=attacker.stages[PBStats::SPDEF] if attacker.stages[PBStats::SPDEF]>0
				raisedstats+=attacker.stages[PBStats::EVASION] if attacker.stages[PBStats::EVASION]>0
				miniscore= (-5)*raisedstats
				miniscore+=100
				miniscore/=100.0
				score*=miniscore          
				loweredstats=0
				loweredstats+=opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]<0
				loweredstats+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]<0
				loweredstats+=opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]<0
				loweredstats+=opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]<0
				loweredstats+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]<0
				loweredstats+=opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]<0
				miniscore= 5*loweredstats
				miniscore+=100
				miniscore/=100.0
				score*=miniscore
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:UTURN) || j.id==getID(PBMoves,:VOLTSWITCH)
						end  
						score*=0.5 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:UTURN) || j.id==getID(PBMoves,:VOLTSWITCH)
						end  
						score*=0.5 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:UTURN) || j.id==getID(PBMoves,:VOLTSWITCH)
						end  
						score*=0.5 if movecheck   
					end            
				end
				if opponent.hasWorkingAbility(:SHADOWTAG) || attacker.effects[PBEffects::MeanLook]>0
					score*=0.1
				end
				count = -1
				pivotvar = false
				for i in pbParty(attacker.index)
					count+=1
					next if i.nil?
					temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
					if temprole.include?("Pivot")
						pivotvar = true
					end
				end  
				score*=1.5 if pivotvar
				if livecount2==1 || (livecount2==2 && @doublebattle)
					score*=0
				end
			end                
			score*=0 if opponent.effects[PBEffects::PerishSong]>0        
		when 0xE6 # Grudge
			movenum = 0
			damcount =0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movenum+=1
						if j.basedamage>0
							damcount+=1
						end              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movenum+=1
						if j.basedamage>0
							damcount+=1
						end
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movenum+=1
						if j.basedamage>0
							damcount+=1
						end
					end                    
				end          
			end 
			if movenum==4 && damcount==1
				score*=3
			end        
			if attacker.hp==attacker.totalhp
				score*=0.2
			else
				miniscore = attacker.hp*(1.0/attacker.totalhp)
				miniscore = 1-miniscore
				score*=miniscore
				if attacker.hp*4<attacker.totalhp            
					score*=1.3
					if attacker.hasWorkingItem(:CUSTAPBERRY)
						score*=1.3
					end            
				end          
			end        
			if (attacker.pbSpeed>pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.3
			else
				score*0.5
			end
		when 0xE7 # Destiny Bond
			movenum = 0
			damcount =0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movenum+=1
						if j.basedamage>0
							damcount+=1
						end              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movenum+=1
						if j.basedamage>0
							damcount+=1
						end
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movenum+=1
						if j.basedamage>0
							damcount+=1
						end
					end                    
				end          
			end 
			if movenum==4 && damcount==4
				score*=3
			end      
			if initialscores.length>0
				greatmoves=false
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>110
						greatmoves=true
					end
				end
				score *= 0.1 if greatmoves
			end          
			if attacker.hp==attacker.totalhp
				score*=0.2
			else
				miniscore = attacker.hp*(1.0/attacker.totalhp)
				miniscore = 1-miniscore
				score*=miniscore
				if attacker.hp*3<attacker.totalhp            
					score*=1.3
					if attacker.hasWorkingItem(:CUSTAPBERRY)
						score*=1.5
					end            
				end          
			end        
			if (attacker.pbSpeed>pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.5
			else
				score*0.5
			end
			if attacker.effects[PBEffects::DestinyRate]>1   
				score*=0
			end        
		when 0xE8 # Endure
			maxdam=0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]                
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end                    
				end          
			end 
			if attacker.hp>1
				if attacker.hp==attacker.totalhp && (attacker.hasWorkingItem(:FOCUSSASH) || attacker.hasWorkingAbility(:STURDY))
					score*=0
				end
				if maxdam>attacker.hp
					score*=2
				end
				if (attacker.pbSpeed>pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.3
				else
					score*0.5
				end
				if (pbWeather==PBWeather::HAIL && !attacker.pbHasType?(:ICE)) || (pbWeather==PBWeather::SANDSTORM && !(attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
					score*=0
				end
				if attacker.status==PBStatuses::POISON || attacker.status==PBStatuses::BURN || attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Curse]
					score*=0
				end
				if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT)) || attacker.pbHasMove?(getID(PBMoves,:FLAIL)) || attacker.pbHasMove?(getID(PBMoves,:REVERSAL))
					score*=2
				end
				if attacker.pbHasMove?(getID(PBMoves,:ENDEAVOR))
					score*=3
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Curse]
					score*=1.5
				end
				if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
					score*=4
					#experimental -- cancels out drop if killing moves       
					if initialscores.length>0    
						greatmoves=false       
						for i in 0...initialscores.length      
							next if i==scoreindex    
							if initialscores[i]>=100     
								greatmoves=true    
							end      
						end            
						score*=6 if greatmoves     
					end      
					#end experimental
				else
					score*=0.8
				end
				if opponent.effects[PBEffects::TwoTurnAttack]!=0
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=15
					end
				end
			else
				score*=0
			end        
		when 0xE9 # False Swipe
			if score>=100
				score*=0.1
			end        
		when 0xEA # Teleport
			score*=0
		when 0xEB # Roar
			if opponent.pbOwnSide.effects[PBEffects::StealthRock]
				score*=1.3
			else
				score*=0.8
			end
			if opponent.pbOwnSide.effects[PBEffects::Spikes]>0
				score*=(1.2**opponent.pbOwnSide.effects[PBEffects::Spikes])
			else
				score*=0.8
			end
			if opponent.pbOwnSide.effects[PBEffects::ToxicSpikes]
				score*=1.1
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK] 
			ministat+=opponent.stages[PBStats::DEFENSE]
			ministat+=opponent.stages[PBStats::SPEED] 
			ministat+=opponent.stages[PBStats::SPATK] 
			ministat+=opponent.stages[PBStats::SPDEF] 
			ministat+=opponent.stages[PBStats::EVASION]
			ministat*=10
			ministat+=100
			ministat/=100.0
			score*=ministat
			if opponent.effects[PBEffects::PerishSong]>0 || opponent.effects[PBEffects::Yawn]>0
				score*=0
			end
			if opponent.status==PBStatuses::SLEEP
				score*=1.3
			end
			if opponent.hasWorkingAbility(:SLOWSTART)
				score*=1.3
			end
			if opponent.item==0 && opponent.hasWorkingAbility(:UNBURDEN)
				score*=1.5
			end
			if opponent.hasWorkingAbility(:INTIMIDATE)
				score*=0.7
			end
			if opponent.hasWorkingAbility(:REGENERATOR) || opponent.hasWorkingAbility(:NATURALCURE)
				score*=0.5
			end
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=0.8
			end
			if attacker.effects[PBEffects::Substitute]>0
				score*=1.4
			end
			firevar=false
			poisonvar=false
			fairytvar=false
			for mon in pbParty(attacker.index) 
				next if mon.nil?
				if mon.hasType?(:FIRE)
					firevar=true
				end
				if mon.hasType?(:POISON)
					poisonvar=true
				end  
				if mon.hasType?(:FAIRY)
					fairyvar=true
				end          
			end
			if opponent.effects[PBEffects::Ingrain] || opponent.hasWorkingAbility(:SUCTIONCUPS) || opponent.pbNonActivePokemonCount==0
				score*=0
			end                        
		when 0xEC # Dragon Tail
			miniscore=1
			if opponent.pbOwnSide.effects[PBEffects::StealthRock]
				miniscore*=1.5
			else
				miniscore*=0.8
			end
			if opponent.pbOwnSide.effects[PBEffects::Spikes]>0
				miniscore*=(1.2**opponent.pbOwnSide.effects[PBEffects::Spikes])
			else
				miniscore*=0.8
			end
			if opponent.pbOwnSide.effects[PBEffects::ToxicSpikes]>0
				miniscore*=1.1
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK] 
			ministat+=opponent.stages[PBStats::DEFENSE]
			ministat+=opponent.stages[PBStats::SPEED] 
			ministat+=opponent.stages[PBStats::SPATK] 
			ministat+=opponent.stages[PBStats::SPDEF] 
			ministat+=opponent.stages[PBStats::EVASION]
			ministat*=10
			ministat+=100
			ministat/=100.0
			miniscore*=ministat        
			if opponent.status==PBStatuses::SLEEP
				miniscore*=1.3
			end
			if opponent.hasWorkingAbility(:SLOWSTART)
				miniscore*=1.3
			end
			if opponent.item==0 && opponent.hasWorkingAbility(:UNBURDEN)
				miniscore*=1.5
			end
			if opponent.hasWorkingAbility(:INTIMIDATE)
				miniscore*=0.7
			end
			if opponent.hasWorkingAbility(:REGENERATOR) || opponent.hasWorkingAbility(:NATURALCURE)
				miniscore*=0.5
			end
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=0.8
			end                
			if opponent.effects[PBEffects::PerishSong]>0 || opponent.effects[PBEffects::Yawn]>0
				miniscore=1
			end
			if attacker.effects[PBEffects::Substitute]>0
				miniscore=1
			end
			if opponent.effects[PBEffects::Ingrain] || opponent.hasWorkingAbility(:SUCTIONCUPS) || opponent.pbNonActivePokemonCount==0
				miniscore=1
			end 
			score*=miniscore
		when 0xED # Baton Pass
			if pbCanChooseNonActive?(attacker.index)
				ministat=0
				ministat+=attacker.stages[PBStats::ATTACK] 
				ministat+=attacker.stages[PBStats::DEFENSE]
				ministat+=attacker.stages[PBStats::SPEED] 
				ministat+=attacker.stages[PBStats::SPATK] 
				ministat+=attacker.stages[PBStats::SPDEF] 
				ministat+=attacker.stages[PBStats::EVASION]
				ministat*=10
				ministat+=180
				ministat/=100.0
				score*=ministat
				if attacker.effects[PBEffects::Substitute]>0
					score*=1.3
				end
				if attacker.effects[PBEffects::Confusion]>0
					score*=0.5
				end
				if attacker.effects[PBEffects::LeechSeed]>=0
					score*=0.9
				end
				if attacker.effects[PBEffects::Curse]
					score*=0.5
				end          
				if attacker.turncount<1
					score*=0
				end
				damvar = false
				for i in attacker.moves
					if i.basedamage>0
						damvar=true
					end
				end
				if !damvar
					score*1.3
				end
				if attacker.effects[PBEffects::Ingrain] || attacker.effects[PBEffects::AquaRing]
					score*=1.2
				end
				if attacker.effects[PBEffects::PerishSong]>0
					score*=0
				else
					if initialscores.length>0
						if damvar
							if initialscores.max>30
								score*=0.7
								if initialscores.max>50
									score*=0.3
								end
							end
						end
					end
				end
			else
				score*=0
			end
		when 0xEE # U-Turn
			livecount=0
			for i in pbParty(attacker.index)
				next if i.nil?
				livecount+=1 if i.hp!=0
			end
			if livecount>1         
				if initialscores.length>0
					greatmoves=false
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>=110
							greatmoves=true
						end
						if initialscores[i]>=15
							badmoves=false
						end
					end
					score*=0.5 if greatmoves
					score*=0.3 if badmoves
				end          
				if attacker.pbOwnSide.effects[PBEffects::StealthRock]
					score*=0.7
				end
				if attacker.pbOwnSide.effects[PBEffects::StickyWeb]
					score*=0.6
				end
				if attacker.pbOwnSide.effects[PBEffects::Spikes]>0
					score*=0.9**attacker.pbOwnSide.effects[PBEffects::Spikes]
				end
				if attacker.pbOwnSide.effects[PBEffects::ToxicSpikes]>0
					score*=0.9**attacker.pbOwnSide.effects[PBEffects::ToxicSpikes]
				end
				count = -1
				sweepvar = false
				for i in pbParty(attacker.index)
					count+=1
					next if i.nil?
					temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
					if temprole.include?("Sweeper")
						sweepvar = true
					end
				end  
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.1
				else
					if sweepvar
						score*=1.1
					end
				end
				if roles.include?("Lead")
					score*=1.1
				end
				if roles.include?("Pivot")
					score*=1.1
				end
				if (attacker.hasWorkingAbility(:REGENERATOR)) && 
					((attacker.hp.to_f)/attacker.totalhp)<0.75
					score*=1.2
					if (attacker.hasWorkingAbility(:REGENERATOR)) && 
						((attacker.hp.to_f)/attacker.totalhp)<0.5
						score*=1.2
					end
				end
				loweredstats=0
				loweredstats+=attacker.stages[PBStats::ATTACK] if attacker.stages[PBStats::ATTACK]<0
				loweredstats+=attacker.stages[PBStats::DEFENSE] if attacker.stages[PBStats::DEFENSE]<0
				loweredstats+=attacker.stages[PBStats::SPEED] if attacker.stages[PBStats::SPEED]<0
				loweredstats+=attacker.stages[PBStats::SPATK] if attacker.stages[PBStats::SPATK]<0
				loweredstats+=attacker.stages[PBStats::SPDEF] if attacker.stages[PBStats::SPDEF]<0
				loweredstats+=attacker.stages[PBStats::EVASION] if attacker.stages[PBStats::EVASION]<0
				miniscore= (-15)*loweredstats    
				miniscore+=100
				miniscore/=100.0
				score*=miniscore      
				raisedstats=0
				raisedstats+=attacker.stages[PBStats::ATTACK] if attacker.stages[PBStats::ATTACK]>0
				raisedstats+=attacker.stages[PBStats::DEFENSE] if attacker.stages[PBStats::DEFENSE]>0
				raisedstats+=attacker.stages[PBStats::SPEED] if attacker.stages[PBStats::SPEED]>0
				raisedstats+=attacker.stages[PBStats::SPATK] if attacker.stages[PBStats::SPATK]>0
				raisedstats+=attacker.stages[PBStats::SPDEF] if attacker.stages[PBStats::SPDEF]>0
				raisedstats+=attacker.stages[PBStats::EVASION] if attacker.stages[PBStats::EVASION]>0
				miniscore= (-25)*raisedstats
				miniscore+=100
				miniscore/=100.0
				score*=miniscore    
				if attacker.effects[PBEffects::Toxic]>0 || attacker.effects[PBEffects::Attract]>-1 || attacker.effects[PBEffects::Confusion]>0
					score*=1.3
				end
				if attacker.effects[PBEffects::LeechSeed]>-1
					score*=1.5
				end        
			end  
			if @opponent
				if  @opponent.is_a?(Array) == false
					if @opponent.trainertype==PBTrainers::LEADER_Roxanne # DemICE
						score*=0.9
					end 
				end 
			end				      
		when 0xEF # Block/Mean Look
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:UTURN) || j.id==getID(PBMoves,:VOLTSWITCH) || j.id==getID(PBMoves,:PARTINGSHOT)
					end     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:UTURN) || j.id==getID(PBMoves,:VOLTSWITCH) || j.id==getID(PBMoves,:PARTINGSHOT)
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:UTURN) || j.id==getID(PBMoves,:VOLTSWITCH) || j.id==getID(PBMoves,:PARTINGSHOT)
					end  
				end            
			end
			if !(opponent.effects[PBEffects::MeanLook]>=0 || opponent.effects[PBEffects::Ingrain] || opponent.pbHasType?(:GHOST))
				if movecheck
					score*=0.1
				end
				if opponent.hasWorkingAbility(:RUNAWAY)
					score*=0.1
				end
				if attacker.pbHasMove?(getID(PBMoves,:PERISHSONG))
					score*=1.5
				end
				if opponent.effects[PBEffects::PerishSong]>0
					score*=4
				end
				if attacker.hasWorkingAbility(:ARENATRAP) || attacker.hasWorkingAbility(:SHADOWTAG)
					score*=0
				end
				if opponent.effects[PBEffects::Attract]>=0
					score*=1.3
				end
				if opponent.effects[PBEffects::LeechSeed]>=0
					score*=1.3
				end
				if opponent.effects[PBEffects::Curse]
					score*=1.5
				end 
				maxdam=0
				max2turn=0
				for j in attacker.moves
					tempdam = pbRoughDamage(j,attacker,opponent,skill,j.basedamage)
					if j.name=="Dig"
						max2turn=tempdam if tempdam>max2turn
					else
						maxdam=tempdam if tempdam>maxdam
					end
				end  
				maxdam*=1.2
				if max2turn>maxdam#attacker.pbHasMove?(getID(PBMoves,:DIG)) || attacker.pbHasMove?(getID(PBMoves,:BOUNCE)) || attacker.pbHasMove?(getID(PBMoves,:FLY)) || attacker.pbHasMove?(getID(PBMoves,:DIVE))
					score*=3
				end
				if attacker.pbHasMove?(getID(PBMoves,:WHIRLWIND)) || attacker.pbHasMove?(getID(PBMoves,:ROAR)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONTAIL)) || attacker.pbHasMove?(getID(PBMoves,:CIRCLETHROW))
					score*=0.7
				end
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK] 
				ministat+=opponent.stages[PBStats::DEFENSE]
				ministat+=opponent.stages[PBStats::SPEED] 
				ministat+=opponent.stages[PBStats::SPATK] 
				ministat+=opponent.stages[PBStats::SPDEF] 
				ministat+=opponent.stages[PBStats::EVASION]
				ministat*=(-5)
				ministat+=100
				ministat/=100.0
				score*=ministat    
				if opponent.effects[PBEffects::Confusion]>0
					score*=1.1
				end
			else
				score*=0
			end
		when 0xF0 # Knock Off
			#~ greatmoves=false
			#~ if initialscores.length>0
			#~ for i in 0...initialscores.length
			#~ next if i==scoreindex
			#~ if initialscores[i]>=110
			#~ greatmoves=true
			#~ end
			#~ end
			#~ end          
			#~ if !greatmoves
			#~ if (!opponent.hasWorkingAbility(:STICKYHOLD) || opponent.moldbroken) &&
			#~ opponent.item!=0 && !pbIsUnlosableItem(opponent,opponent.item)
			#~ score*=1.2
			#~ if opponent.hasWorkingItem(:LEFTOVERS) || (opponent.hasWorkingItem(:BLACKSLUDGE) && opponent.pbHasType?(:POISON))
			#~ score*=1.2
			#~ end          
			#~ end
			#~ end
		when 0xF1 # Covet
			if (!opponent.hasWorkingAbility(:STICKYHOLD) || opponent.moldbroken) && opponent.item!=0 && !pbIsUnlosableItem(opponent,opponent.item) && attacker.item==0
				miniscore = 1.2
				case opponent.item
				when getID(PBItems,:LEFTOVERS), getID(PBItems,:LIFEORB), getID(PBItems,:LUMBERRY), getID(PBItems,:SITRUSBERRY)
					miniscore*=1.5
				when getID(PBItems,:ASSAULTVEST)
					miniscore*=1.3
				when getID(PBItems,:FOCUSSASH), getID(PBItems,:MUSCLEBAND), getID(PBItems,:WISEGLASSES), getID(PBItems,:EXPERTBELT), getID(PBItems,:WIDELENS)
					miniscore*=1.2
				when getID(PBItems,:CHOICESCARF)
					if attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
						miniscore*=1.1
					end
				when getID(PBItems,:CHOICEBAND)
					if attacker.attack>attacker.spatk
						miniscore*=1.1
					end
				when getID(PBItems,:CHOICESPECS)
					if attacker.spatk>attacker.attack
						miniscore*=1.1
					end
				when getID(PBItems,:BLACKSLUDGE)
					if attacker.pbHasType?(:POISON)
						miniscore*=1.5
					else
						miniscore*=0.5
					end
				when getID(PBItems,:TOXICORB), getID(PBItems,:FLAMEORB), getID(PBItems,:LAGGINGTAIL), getID(PBItems,:IRONBALL), getID(PBItems,:STICKYBARB)
					miniscore*=0.5
				end
				score*=miniscore
			end        
		when 0xF2 # Trick
			statvar = false
			for m in opponent.moves
				if m.basedamage==0
					statvar=true
				end
			end        
			if (!opponent.hasWorkingAbility(:STICKYHOLD) || opponent.moldbroken)
				miniscore = 1
				minimini = 1
				if opponent.item!=0 && !pbIsUnlosableItem(opponent,opponent.item)
					miniscore*=1.2
					case opponent.item
					when getID(PBItems,:LEFTOVERS), getID(PBItems,:LIFEORB), getID(PBItems,:LUMBERRY), getID(PBItems,:SITRUSBERRY)
						miniscore*=1.5
					when getID(PBItems,:ASSAULTVEST), getID(PBItems,:ROCKYHELMET)
						miniscore*=1.3
					when getID(PBItems,:FOCUSSASH), getID(PBItems,:MUSCLEBAND), getID(PBItems,:WISEGLASSES), getID(PBItems,:EXPERTBELT), getID(PBItems,:WIDELENS)
						miniscore*=1.2
					when getID(PBItems,:CHOICESCARF)
						if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
							miniscore*=1.1
						end
					when getID(PBItems,:CHOICEBAND)
						if attacker.attack>attacker.spatk
							miniscore*=1.1
						end
					when getID(PBItems,:CHOICESPECS)
						if attacker.spatk>attacker.attack
							miniscore*=1.1
						end
					when getID(PBItems,:BLACKSLUDGE)
						if attacker.pbHasType?(:POISON)
							miniscore*=1.5
						else
							miniscore*=0.5
						end
					when getID(PBItems,:TOXICORB), getID(PBItems,:FLAMEORB), getID(PBItems,:LAGGINGTAIL), getID(PBItems,:IRONBALL), getID(PBItems,:STICKYBARB)
						miniscore*=0.5
					end          
				end 
				if attacker.item!=0 && !pbIsUnlosableItem(attacker,attacker.item)
					minimini*=0.8
					case attacker.item
					when getID(PBItems,:LEFTOVERS), getID(PBItems,:LIFEORB), getID(PBItems,:LUMBERRY), getID(PBItems,:SITRUSBERRY)
						minimini*=0.5
					when getID(PBItems,:ASSAULTVEST), getID(PBItems,:ROCKYHELMET)
						minimini*=0.7
					when getID(PBItems,:FOCUSSASH), getID(PBItems,:MUSCLEBAND), getID(PBItems,:WISEGLASSES), getID(PBItems,:EXPERTBELT), getID(PBItems,:WIDELENS)
						minimini*=0.8
					when getID(PBItems,:CHOICESCARF)
						if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
							minimini*=1.5
						else
							minimini*=0.9
						end
						if statvar
							minimini*=1.3
						end
					when getID(PBItems,:CHOICEBAND)
						if opponent.attack<opponent.spatk
							minimini*=1.7
						end
						if attacker.attack>attacker.spatk
							minimini*=0.8
						end
						if statvar
							minimini*=1.3
						end
					when getID(PBItems,:CHOICESPECS)
						if opponent.attack>opponent.spatk
							minimini*=1.7
						end
						if attacker.attack<attacker.spatk
							minimini*=0.8
						end  
						if statvar
							minimini*=1.3
						end
					when getID(PBItems,:BLACKSLUDGE)
						if !attacker.pbHasType?(:POISON)
							minimini*=1.5
						else
							minimini*=0.5
						end
						if !opponent.pbHasType?(:POISON)
							minimini*=1.3
						end                
					when getID(PBItems,:TOXICORB), getID(PBItems,:FLAMEORB), getID(PBItems,:LAGGINGTAIL), getID(PBItems,:IRONBALL), getID(PBItems,:STICKYBARB)
						minimini*=1.5
					end
				end
				score*=(miniscore*minimini)
			else
				score*=0  
			end        
			if attacker.item==opponent.item
				score*=0
			end        
		when 0xF3 # Bestow
			if (!opponent.hasWorkingAbility(:STICKYHOLD) || opponent.moldbroken) && attacker.item!=0 && opponent.item==0 && !pbIsUnlosableItem(attacker,attacker.item)
				case attacker.item
				when getID(PBItems,:CHOICESPECS)
					if opponent.attack>opponent.spatk
						score+=35
					end
				when getID(PBItems,:CHOICESCARF)
					if (opponent.pbSpeed>attacker.pbSpeed) ^ (@trickroom!=0)
						score+=25
					end
				when getID(PBItems,:CHOICEBAND)
					if opponent.attack<opponent.spatk
						score+=35
					end
				when getID(PBItems,:BLACKSLUDGE)
					if !attacker.pbHasType?(:POISON)
						score+=15
					end
					if !opponent.pbHasType?(:POISON)
						score+=15
					end
				when getID(PBItems,:TOXICORB), getID(PBItems,:FLAMEORB)
					score+=35
				when getID(PBItems,:LAGGINGTAIL), getID(PBItems,:IRONBALL)
					score+=20
				when getID(PBItems,:STICKYBARB)
					score+=25
				end
			else
				score*=0
			end                    
		when 0xF4 # Bug Bite
			if opponent.effects[PBEffects::Substitute]==0 && pbIsBerry?(opponent.item)
				case opponent.item
				when getID(PBItems,:LUMBERRY)
					score*=2 if attacker.stats!=0
				when getID(PBItems,:SITRUSBERRY)
					score*=1.6 if attacker.hp*(1.0/attacker.totalhp)<0.66
				when getID(PBItems,:LIECHIBERRY)
					score*=1.5 if attacker.attack>attacker.spatk
				when getID(PBItems,:PETAYABERRY)
					score*=1.5 if attacker.spatk>attacker.attack
				when getID(PBItems,:CUSTAPBERRY), getID(PBItems,:SALACBERRY)
					score*=1.1
					score*=1.4 if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
				end 
			end        
		when 0xF5 # Incinerate
			if (pbIsBerry?(opponent.item) || pbIsTypeGem?(opponent.item)) && !opponent.hasWorkingAbility(:STICKYHOLD)
				if pbIsBerry?(opponent.item) && opponent.item!=getID(PBItems,:OCCABERRY)
					score*=1.2
				end
				if opponent.item==getID(PBItems,:LUMBERRY) || opponent.item==getID(PBItems,:SITRUSBERRY) || opponent.item==getID(PBItems,:PETAYABERRY) || opponent.item==getID(PBItems,:LIECHIBERRY) || opponent.item==getID(PBItems,:SALACBERRY) || opponent.item==getID(PBItems,:CUSTAPBERRY)
					score*=1.3
				end
				if pbIsTypeGem?(opponent.item)
					score*=1.4
				end
			end
		when 0xF6 # Recycle
			movecheck = false
			stealvar = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:INCINERATE) || j.id==getID(PBMoves,:PLUCK) || j.id==getID(PBMoves,:BUGBITE)
						stealvar=true if j.id==getID(PBMoves,:KNOCKOFF) || j.id==getID(PBMoves,:THIEF) || j.id==getID(PBMoves,:COVET)
					end     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:INCINERATE) || j.id==getID(PBMoves,:PLUCK) || j.id==getID(PBMoves,:BUGBITE)
						stealvar=true if j.id==getID(PBMoves,:KNOCKOFF) || j.id==getID(PBMoves,:THIEF) || j.id==getID(PBMoves,:COVET)
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:INCINERATE) || j.id==getID(PBMoves,:PLUCK) || j.id==getID(PBMoves,:BUGBITE)
						stealvar=true if j.id==getID(PBMoves,:KNOCKOFF) || j.id==getID(PBMoves,:THIEF) || j.id==getID(PBMoves,:COVET)
					end  
				end            
			end
			if attacker.pokemon.itemRecycle!=0
				score*=2
				case attacker.pokemon.itemRecycle
				when getID(PBItems,:LUMBERRY)
					score*=2 if attacker.stats!=0
				when getID(PBItems,:SITRUSBERRY)
					score*=1.6 if attacker.hp*(1.0/attacker.totalhp)<0.66
					if roles.include?("Physical Wall") || roles.include?("Special Wall")
						score*=1.5
					end
				end
				if pbIsBerry?(attacker.pokemon.itemRecycle) 
					if opponent.hasWorkingAbility(:UNNERVE)
						score*=0
					end
					if movecheck
						score*=0
					end
				end
				if opponent.hasWorkingAbility(:MAGICIAN) || stealvar
					score*=0
				end
				if attacker.hasWorkingAbility(:UNBURDEN) || attacker.hasWorkingAbility(:HARVEST) || attacker.pbHasMove?(getID(PBMoves,:ACROBATICS))
					score*=0
				end
			else
				score*=0
			end                  
		when 0xF7 # Fling 
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end	
			if attacker.item==0 || pbIsUnlosableItem(attacker,attacker.item) || attacker.hasWorkingAbility(:KLUTZ) || (pbIsBerry?(attacker.item) && opponent.hasWorkingAbility(:UNNERVE)) || attacker.effects[PBEffects::Embargo]>0 || @field.effects[PBEffects::MagicRoom]>0
				score*=0
			else
				case attacker.item
				when getID(PBItems,:POISONBARB)
					if opponent.pbCanPoison?(false,move,attacker) && !opponent.hasWorkingAbility(:POISONHEAL) && !theresone
						score*=1.2
					end
				when getID(PBItems,:TOXICORB)
					if opponent.pbCanPoison?(false,nil,attacker) && !opponent.hasWorkingAbility(:POISONHEAL)
						score*=1.2
						if attacker.pbCanPoison?(false,nil,attacker) && !attacker.hasWorkingAbility(:POISONHEAL) && !theresone
							score*=2
						end                
					end
				when getID(PBItems,:FLAMEORB)
					if opponent.pbCanBurn?(false,nil,attacker) && !opponent.hasWorkingAbility(:GUTS) && !theresone
						score*=1.3
						if attacker.pbCanBurn?(false,nil,attacker) && !attacker.hasWorkingAbility(:GUTS)  && !theresone
							score*=2
						end                
					end
				when getID(PBItems,:LIGHTBALL)
					if opponent.pbCanParalyze?(false,nil,attacker) && !opponent.hasWorkingAbility(:QUICKFEET) && !theresone
						score*=1.3
					end
				when getID(PBItems,:KINGSROCK), getID(PBItems,:RAZORCLAW)
					if !opponent.hasWorkingAbility(:INNERFOCUS) && ((attacker.pbSpeed>opponent.pbSpeed) ^ (@trickroom!=0))
						score*=1.3
					end
					#~ when getID(PBItems,:POWERHERB)
					#~ score*=0
				when getID(PBItems,:MENTALHERB)
					score*=0
				when getID(PBItems,:LAXINCENSE), getID(PBItems,:CHOICESCARF), getID(PBItems,:CHOICEBAND), getID(PBItems,:CHOICESPECS), getID(PBItems,:EXPERTBELT), getID(PBItems,:FOCUSSASH), getID(PBItems,:LEFTOVERS), getID(PBItems,:MUSCLEBAND), getID(PBItems,:WISEGLASSES), getID(PBItems,:LIFEORB), getID(PBItems,:EVIOLITE), getID(PBItems,:ASSAULTVEST), getID(PBItems,:BLACKSLUDGE)
					score*=0
				when getID(PBItems,:STICKYBARB)
					score*=1.2
				when getID(PBItems,:LAGGINGTAIL)
					score*=3
				when getID(PBItems,:IRONBALL)
					score*=1.5
				end
				if pbIsBerry?(attacker.item)
					if attacker.item==getID(PBItems,:FIGYBERRY) || attacker.item==getID(PBItems,:WIKIBERRY) || attacker.item==getID(PBItems,:MAGOBERRY) || attacker.item==getID(PBItems,:AGUAVBERRY) || attacker.item==getID(PBItems,:IAPAPABERRY)
						if opponent.pbCanConfuse?(false,attacker)
							score*=1.3
						end
					else
						score*=0
					end
				end          
			end                                                  
		when 0xF8 # Embargo
			startscore = score
			if opponent.effects[PBEffects::Embargo]>0
				score*=0
			else
				if opponent.item!=0
					score*=1.1
					if pbIsBerry?(opponent.item)
						score*=1.1
					end
					case opponent.item
					when getID(PBItems,:LAXINCENSE), getID(PBItems,:EXPERTBELT), getID(PBItems,:MUSCLEBAND), getID(PBItems,:WISEGLASSES), getID(PBItems,:LIFEORB), getID(PBItems,:EVIOLITE), getID(PBItems,:ASSAULTVEST)
						score*=1.2
					when getID(PBItems,:LEFTOVERS), getID(PBItems,:BLACKSLUDGE)
						score*=1.3
					end
					if opponent.hp*2<opponent.totalhp
						score*=1.4
					end
				end
				if score==startscore
					score*=0
				end
			end        
		when 0xF9 # Magic Room            
			if @field.effects[PBEffects::MagicRoom]>0
				score*=0
			else
				if opponent.item!=0
					score*=1.1
					if pbIsBerry?(opponent.item)
						score*=1.1
					end
					case opponent.item
					when getID(PBItems,:LAXINCENSE), getID(PBItems,:EXPERTBELT), getID(PBItems,:MUSCLEBAND), getID(PBItems,:WISEGLASSES), getID(PBItems,:LIFEORB), getID(PBItems,:EVIOLITE), getID(PBItems,:ASSAULTVEST)
						score*=1.2
					when getID(PBItems,:LEFTOVERS), getID(PBItems,:BLACKSLUDGE)
						score*=1.3
					end
				end
				if attacker.item!=0
					score*=0.8
					if pbIsBerry?(opponent.item)
						score*=0.8
					end
					case opponent.item
					when getID(PBItems,:LAXINCENSE), getID(PBItems,:EXPERTBELT), getID(PBItems,:MUSCLEBAND), getID(PBItems,:WISEGLASSES), getID(PBItems,:LIFEORB), getID(PBItems,:EVIOLITE), getID(PBItems,:ASSAULTVEST)
						score*=0.6
					when getID(PBItems,:LEFTOVERS), getID(PBItems,:BLACKSLUDGE)
						score*=0.4
					end
				end
			end 
		when 0xFA # Take Down
			if !attacker.hasWorkingAbility(:ROCKHEAD)
				score*=0.9
				if attacker.hp==attacker.totalhp && (attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH))
					score*=0.7
				end
				if attacker.hp*(1.0/attacker.totalhp)>0.1 && attacker.hp*(1.0/attacker.totalhp)<0.4
					score*=0.8
				end
			end
			ghostvar=false          
			for mon in pbParty(attacker.index) 
				next if mon.nil?
				if mon.hasType?(:GHOST)
					ghostvar=true
				end            
			end     
		when 0xFB # Wood Hammer
			if !attacker.hasWorkingAbility(:ROCKHEAD)
				score*=0.9
				if attacker.hp==attacker.totalhp && (attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH))
					score*=0.7
				end
				if attacker.hp*(1.0/attacker.totalhp)>0.15 && attacker.hp*(1.0/attacker.totalhp)<0.4
					score*=0.8
				end          
			end 
		when 0xFC # Head Smash
			if !attacker.hasWorkingAbility(:ROCKHEAD)
				score*=0.9
				if attacker.hp==attacker.totalhp && (attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH))
					score*=0.7
				end
				if attacker.hp*(1.0/attacker.totalhp)>0.2 && attacker.hp*(1.0/attacker.totalhp)<0.4
					score*=0.8
				end          
			end 
		when 0xFD # Volt Tackle
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			if !attacker.hasWorkingAbility(:ROCKHEAD)
				score*=0.9
				if attacker.hp==attacker.totalhp && (attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH))
					score*=0.7
				end
				if attacker.hp*(1.0/attacker.totalhp)>0.15 && attacker.hp*(1.0/attacker.totalhp)<0.4
					score*=0.8
				end          
			end 
			if opponent.pbCanParalyze?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.1
				if attacker.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || attacker.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || attacker.pbHasMove?(getID(PBMoves,:CALMMIND)) || attacker.pbHasMove?(getID(PBMoves,:WORKUP)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW)) || attacker.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || attacker.pbHasMove?(getID(PBMoves,:BULKUP)) || attacker.pbHasMove?(getID(PBMoves,:COIL)) || attacker.pbHasMove?(getID(PBMoves,:CURSE)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:HONECLAWS)) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:SHELLSMASH))
					miniscore*=1.3
				end
				if opponent.hp==opponent.totalhp
					miniscore*=1.2
				end   
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.5
				end         
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.2
				end              
				if roles.include?("Physical Wall") || roles.include?("Special Wall") || roles.include?("Pivot")
					miniscore*=1.2
				end
				if roles.include?("Tank")
					miniscore*=1.5
				end          
				if pbRoughStat(opponent,PBStats::SPEED,skill)>attacker.pbSpeed && (pbRoughStat(opponent,PBStats::SPEED,skill)/2)<attacker.pbSpeed && @trickroom==0
					miniscore*=1.5
				end
				if pbRoughStat(opponent,PBStats::SPATK,skill)>pbRoughStat(opponent,PBStats::ATTACK,skill)
					miniscore*=1.3
				end
				count = -1
				sweepvar = false
				for i in pbParty(attacker.index)
					count+=1
					next if i.nil?
					temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
					if temprole.include?("Sweeper")
						sweepvar = true
					end
				end  
				miniscore*=1.3 if sweepvar
				if opponent.effects[PBEffects::Confusion]>0
					miniscore*=1.1
				end
				if opponent.effects[PBEffects::Attract]>=0
					miniscore*=1.1
				end  
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end 
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end 
				if opponent.hasWorkingAbility(:SYNCHRONIZE) && attacker.status==0 && !attacker.pbHasType?(:ELECTRIC) && !attacker.pbHasType?(:GROUND)
					miniscore*=0.5
				end                     
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0
				score*=miniscore        
			end  
		when 0xFE # Flare Blitz
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			if !attacker.hasWorkingAbility(:ROCKHEAD)
				score*=0.9
				if attacker.hp==attacker.totalhp && (attacker.hasWorkingAbility(:STURDY) || attacker.hasWorkingItem(:FOCUSSASH))
					score*=0.7
				end
				if attacker.hp*(1.0/attacker.totalhp)>0.2 && attacker.hp*(1.0/attacker.totalhp)<0.4
					score*=0.8
				end          
			end
			if opponent.pbCanBurn?(false,move,attacker) && !theresone
				miniscore=100
				miniscore*=1.2
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end   
				if opponent.hasWorkingAbility(:NATURALCURE)
					miniscore*=0.3
				end
				if opponent.hasWorkingAbility(:MARVELSCALE)
					miniscore*=0.7
				end         
				if opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:FLAREBOOST) || opponent.hasWorkingAbility(:MAGICGUARD)
					miniscore*=0.3
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FACADE)
						end  
						miniscore*=0.3 if movecheck     
					end            
				end            
				if opponent.hasWorkingAbility(:GUTS)
					miniscore*=0.1
				end    
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:REST)
						end  
						miniscore*=0.1 if movecheck     
					end            
				end           
				if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
					miniscore*=1.7
				end      
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=0.4
				end   
				if opponent.hasWorkingAbility(:SYNCHRONIZE) && attacker.status==0
					miniscore*=0.5
				end  
				if opponent.hasWorkingAbility(:SHEDSKIN)
					miniscore*=0.7
				end     
				if move.basedamage>0
					if opponent.hasWorkingAbility(:STURDY)
						miniscore*=1.1
					end
				end          
				miniscore-=100
				miniscore*=(move.addlEffect.to_f/100)
				if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
					miniscore*=2
				end
				miniscore+=100
				miniscore/=100.0
				score*=miniscore        
			end  
		when 0xFF # Sunny Day
			theresone=false
			therestwo=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ARCHILLES) && j.item == PBItems::ARCHILLESITE && j.willmega)
					theresone=true
				end
			end
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ELECTRUXO) && j.item == PBItems::ELECTRUXOLITE && j.willmega)
					therestwo=true
				end
			end		
			if pbCheckGlobalAbility(:AIRLOCK) ||
				pbCheckGlobalAbility(:CLOUDNINE) ||
				pbCheckGlobalAbility(:DELTASTREAM) ||
				pbCheckGlobalAbility(:DESOLATELAND) ||
				pbCheckGlobalAbility(:PRIMORDIALSEA) ||
				pbWeather==PBWeather::SUNNYDAY || 
				(theresone && !therestwo) ||
				(attacker.pbPartner.pbHasMove?(getID(PBMoves,:SUNNYDAY)) && attacker.pbPartner.hasWorkingAbility(:PRANKSTER))
				score*=0
			end
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				score*=1.3
			end
			if roles.include?("Lead")
				score*=1.2
			end
			if attacker.hasWorkingItem(:HEATROCK)
				score*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:WEATHERBALL)) || attacker.hasWorkingAbility(:FORECAST)
				score*=2
			end
			if pbWeather!=0 && pbWeather!=PBWeather::SUNNYDAY
				score*=1.5
			end
			if attacker.pbHasMove?(getID(PBMoves,:MOONLIGHT)) || attacker.pbHasMove?(getID(PBMoves,:SYNTHESIS)) || attacker.pbHasMove?(getID(PBMoves,:MORNINGSUN)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:SOLARBEAM))
				score*=1.5
			end
			if attacker.pbHasType?(:FIRE)
				score*=1.5
				if pbWeather==PBWeather::RAINDANCE
					score*=2
					score*=3 if @doublebattle
				end
			end
			if attacker.hasWorkingAbility(:CHLOROPHYLL) || attacker.pbPartner.hasWorkingAbility(:CHLOROPHYLL) || attacker.hasWorkingAbility(:FLOWERGIFT)
				score*=2
			end
			if attacker.hasWorkingAbility(:SOLARPOWER) || attacker.hasWorkingAbility(:LEAFGUARD)
				score*=1.3
			end
			watervar=false
			for mon in pbParty(attacker.index)
				next if mon.nil?
				if mon.hasType?(:WATER)
					watervar=true
				end  
			end        
			if watervar
				score*=0.5
			end 
			if attacker.pbHasMove?(getID(PBMoves,:THUNDER)) || attacker.pbHasMove?(getID(PBMoves,:HURRICANE))
				score*=0.7
			end
			if attacker.hasWorkingAbility(:DRYSKIN)
				score*=0.5
			end
			if attacker.hasWorkingAbility(:HARVEST)
				score*=1.5
			end
			#~ if pbWeather==PBWeather::RAINDANCE
			#~ score*=1.5
			#~ score*=3 if attacker.pbHasType?(:FIRE) && @doublebattle
			#~ end        
		when 0x100 # Rain Dance
			theresone=false
			therestwo=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ARCHILLES) && j.item == PBItems::ARCHILLESITE && j.willmega)
					theresone=true
				end
			end
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ELECTRUXO) && j.item == PBItems::ELECTRUXOLITE && j.willmega)
					therestwo=true
				end
			end
			if pbCheckGlobalAbility(:AIRLOCK) ||
				pbCheckGlobalAbility(:CLOUDNINE) ||
				pbCheckGlobalAbility(:DELTASTREAM) ||
				pbCheckGlobalAbility(:DESOLATELAND) ||
				pbCheckGlobalAbility(:PRIMORDIALSEA) ||
				pbWeather==PBWeather::RAINDANCE || therestwo
				score*=0
			end                
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				score*=1.3
			end
			if roles.include?("Lead")
				score*=1.2
			end
			if attacker.hasWorkingItem(:DAMPROCK)
				score*=2
			end
			if attacker.pbHasMove?(getID(PBMoves,:WEATHERBALL)) || attacker.hasWorkingAbility(:FORECAST)
				score*=2
			end
			if pbWeather!=0 && pbWeather!=PBWeather::RAINDANCE
				score*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:THUNDER)) || attacker.pbHasMove?(getID(PBMoves,:HURRICANE))
				score*=1.5
			end
			if attacker.pbHasType?(:WATER)
				score*=1.5
			end
			if attacker.hasWorkingAbility(:SWIFTSWIM)
				score*=2
			end
			if attacker.hasWorkingAbility(:DRYSKIN) || attacker.hasWorkingAbility(:RAINDANCE)
				score*=1.5
			end
			theresone=false
			therestwo=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ARCHILLES) && j.item == PBItems::ARCHILLESITE && j.willmega)
					theresone=true
				end
			end
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ELECTRUXO) && j.item == PBItems::ELECTRUXOLITE && j.willmega)
					therestwo=true
				end
			end	
			if (pbWeather==PBWeather::SUNNYDAY && !therestwo) || (theresone && !therestwo)
				score*=2
			end 
			firevar=false
			for mon in pbParty(attacker.index) 
				next if mon.nil?
				if mon.hasType?(:FIRE)
					firevar=true
				end  
			end        
			if firevar
				score*=0.5
			end 
			if attacker.pbHasMove?(getID(PBMoves,:MOONLIGHT)) || attacker.pbHasMove?(getID(PBMoves,:SYNTHESIS)) || attacker.pbHasMove?(getID(PBMoves,:MORNINGSUN)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:SOLARBEAM))
				score*=0.5
			end
			if attacker.hasWorkingAbility(:HYDRATION)
				score*=1.5
			end                    
		when 0x101 # Sandstorm
			if pbCheckGlobalAbility(:AIRLOCK) ||
				pbCheckGlobalAbility(:CLOUDNINE) ||
				pbCheckGlobalAbility(:DELTASTREAM) ||
				pbCheckGlobalAbility(:DESOLATELAND) ||
				pbCheckGlobalAbility(:PRIMORDIALSEA) ||
				pbWeather==PBWeather::SANDSTORM
				score*=0
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				score*=1.3
			end
			if roles.include?("Lead")
				score*=1.2
			end
			if attacker.hasWorkingItem(:SMOOTHROCK)
				score*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:WEATHERBALL)) || attacker.hasWorkingAbility(:FORECAST)
				score*=2
			end
			if pbWeather!=0 && pbWeather!=PBWeather::SANDSTORM
				score*=1.5
			end
			if attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)
				score*=1.3
			else
				score*=0.7
			end
			if attacker.pbHasType?(:ROCK)
				score*=1.5
			end
			if attacker.hasWorkingAbility(:SANDRUSH)
				score*=2
			end
			if attacker.hasWorkingAbility(:SANDVEIL)
				score*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:MOONLIGHT)) || attacker.pbHasMove?(getID(PBMoves,:SYNTHESIS)) || attacker.pbHasMove?(getID(PBMoves,:MORNINGSUN)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:SOLARBEAM))
				score*=0.5
			end       
			if attacker.hasWorkingAbility(:SANDFORCE) || (isConst?(attacker.species,PBSpecies,:DRILGANN) && attacker.item == PBItems::DRILGANNITE && attacker.willmega)
				score*=1.5
			end
		when 0x102 # Hail
			if pbCheckGlobalAbility(:AIRLOCK) ||
				pbCheckGlobalAbility(:CLOUDNINE) ||
				pbCheckGlobalAbility(:DELTASTREAM) ||
				pbCheckGlobalAbility(:DESOLATELAND) ||
				pbCheckGlobalAbility(:PRIMORDIALSEA) ||
				pbWeather==PBWeather::HAIL
				score*=0
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				score*=1.3
			end
			if roles.include?("Lead")
				score*=1.2
			end
			if attacker.hasWorkingItem(:ICYROCK)
				score*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:WEATHERBALL)) || attacker.hasWorkingAbility(:FORECAST)
				score*=2
			end
			if pbWeather!=0 && pbWeather!=PBWeather::HAIL
				score*=1.3
			end
			if attacker.pbHasType?(:ICE)
				score*=5
			else
				score*=0.7
			end
			if attacker.hasWorkingAbility(:SLUSHRUSH)
				score*=2
			end			
			if attacker.hasWorkingAbility(:SNOWCLOAK) || attacker.hasWorkingAbility(:ICEBODY)
				score*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:MOONLIGHT)) || attacker.pbHasMove?(getID(PBMoves,:SYNTHESIS)) || attacker.pbHasMove?(getID(PBMoves,:MORNINGSUN)) || attacker.pbHasMove?(getID(PBMoves,:GROWTH)) || attacker.pbHasMove?(getID(PBMoves,:SOLARBEAM))
				score*=0.5
			end      
			if attacker.pbHasMove?(getID(PBMoves,:BLIZZARD))
				score*=1.3
			end  
		when 0x103 # Spikes 
			if attacker.pbOpposingSide.effects[PBEffects::Spikes]!=3
				if roles.include?("Lead")
					score*=1.1
				end
				if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
					score*=1.1
				end
				if attacker.turncount<2
					score*=1.2
				end
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount1>3
					miniscore=(livecount1-1)
					miniscore*=0.2
					score*=miniscore
				else
					score*=0.1
				end
				if attacker.pbOpposingSide.effects[PBEffects::Spikes]>0
					score*=0.9
				end
				if skill>=PBTrainerAI.bestSkill
					for k in 0...pbParty(opponent.index).length
						next if pbParty(opponent.index)[k].nil?
						if @aiMoveMemory[2][k].length>0
							movecheck=false
							for j in @aiMoveMemory[2][k]
								movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
							end  
							score*=0.3 if movecheck     
						end
					end    
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
						end  
						score*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
						end  
						score*=0.3 if movecheck   
					end            
				end
			else
				score*=0
			end                           
		when 0x104 # Toxic Spikes
			if attacker.pbOpposingSide.effects[PBEffects::ToxicSpikes]!=2
				if roles.include?("Lead")
					score*=1.5
				end
				if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
					score*=1.1
				end
				if attacker.turncount<5
					score*=1.4
				end
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount1>3
					miniscore=(livecount1-1)
					miniscore*=0.2
					score*=miniscore
				else
					score*=0.1
				end
				if attacker.pbOpposingSide.effects[PBEffects::ToxicSpikes]>0
					score*=0.3
				end
				if skill>=PBTrainerAI.bestSkill
					for k in 0...pbParty(opponent.index).length
						next if pbParty(opponent.index)[k].nil?
						if @aiMoveMemory[2][k].length>0
							movecheck=false
							for j in @aiMoveMemory[2][k]
								movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
							end  
							score*=0.3 if movecheck     
						end
					end          
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
						end  
						score*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
						end  
						score*=0.3 if movecheck   
					end            
				end
			else
				score*=0
			end
		when 0x105 # Stealth Rock
			if !attacker.pbOpposingSide.effects[PBEffects::StealthRock]
				if roles.include?("Lead")
					score*=1.2
				end      
				if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
					score*=1.3
				end
				if attacker.turncount<4
					score*=1.3
				end
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount1>3
					miniscore=(livecount1-1)
					miniscore*=0.2
					score*=miniscore
				else
					score*=0.1
				end
				if opponent.effects[PBEffects::KingsShield]==true
					score*=2
				end
				if skill>=PBTrainerAI.bestSkill
					for k in 0...pbParty(opponent.index).length
						next if pbParty(opponent.index)[k].nil?
						if @aiMoveMemory[2][k].length>0
							movecheck=false
							for j in @aiMoveMemory[2][k]
								movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
							end  
							score*=0.3 if movecheck     
						end
					end          
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
						end  
						score*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
						end  
						score*=0.3 if movecheck   
					end            
				end
			else
				score*=0
			end
		when 0x160 # Grass Pledge
			#~ if $fepledgefield != 3
			#~ miniscore = getFieldDisruptScore(attacker,opponent,skill)
			#~ if $fepledgefield!=1 && $fepledgefield!=2
			#~ miniscore*=0.7
			#~ else
			#~ firevar=false
			#~ for mon in pbParty(attacker.index) 
			#~ next if mon.nil?
			#~ if mon.hasType?(:FIRE)
			#~ firevar=true
			#~ end  
			#~ end        
			#~ if $fepledgefield==1
			#~ if attacker.pbHasType?(:FIRE)
			#~ miniscore*=1.4
			#~ else
			#~ miniscore*=0.3
			#~ end
			#~ if opponent.pbHasType?(:FIRE)
			#~ miniscore*=0.3
			#~ else
			#~ miniscore*=1.4
			#~ end
			#~ if firevar
			#~ miniscore*=1.4
			#~ else
			#~ miniscore*=1.3
			#~ end
			#~ end
			#~ end  
			#~ score*=miniscore
			#~ end        
			#~ when 0x160 # Fire Pledge
			#~ firevar=false
			#~ poisonvar=false
			#~ bugvar=false
			#~ grassvar=false
			#~ icevar=false
			#~ poisonvar=false
			#~ for mon in pbParty(attacker.index) 
			#~ next if mon.nil?
			#~ if mon.hasType?(:FIRE)
			#~ firevar=true
			#~ end
			#~ if mon.hasType?(:POISON)
			#~ poisonvar=true
			#~ end  
			#~ if mon.hasType?(:BUG)
			#~ bugvar=true
			#~ end
			#~ if mon.hasType?(:GRASS)
			#~ grassvar=true
			#~ end
			#~ if mon.hasType?(:ICE)
			#~ icevar=true
			#~ end
			#~ if mon.hasType?(:POISON)
			#~ poisonvar=true
			#~ end
			#~ end
			#~ if $fepledgefield != 1
			#~ miniscore = getFieldDisruptScore(attacker,opponent,skill)
			#~ if $fepledgefield!=3 && $fepledgefield!=2
			#~ miniscore*=0.7
			#~ else       
			#~ if $fepledgefield==3
			#~ if attacker.pbHasType?(:FIRE)
			#~ miniscore*=1.4
			#~ else
			#~ miniscore*=0.3
			#~ end
			#~ if opponent.pbHasType?(:FIRE)
			#~ miniscore*=0.3
			#~ else
			#~ miniscore*=1.4
			#~ end
			#~ if firevar
			#~ miniscore*=1.4
			#~ else
			#~ miniscore*=1.3
			#~ end
			#~ end
			#~ if $fepledgefield==2
			#~ miniscore*=1.2
			#~ if attacker.pbHasType?(:NORMAL)
			#~ miniscore*=1.2
			#~ end
			#~ end            
			#~ end  
			#~ score*=miniscore
			#~ end  
			#~ if $fefieldeffect==2 || $fefieldeffect==15 || ($fefieldeffect==33 && $fecounter>1)
			#~ if firevar && !(bugvar || grassvar)
			#~ score*=2
			#~ end
			#~ elsif $fefieldeffect==16
			#~ if firevar
			#~ score*=2
			#~ end
			#~ elsif $fefieldeffect==11
			#~ if !poisonvar
			#~ score*=1.1
			#~ end
			#~ if attacker.hp*5<attacker.totalhp
			#~ score*=2
			#~ end
			#~ if opponent.pbNonActivePokemonCount==0
			#~ score*=5
			#~ end            
			#~ elsif $fefieldeffect==13 || $fefieldeffect==28
			#~ if !icevar
			#~ score*=1.5
			#~ end
			#~ end          
			#~ when 0x160 # Water Pledge
			#~ if $fepledgefield != 2
			#~ miniscore = getFieldDisruptScore(attacker,opponent,skill)
			#~ if $fepledgefield!=1 && $fepledgefield!=3
			#~ miniscore*=0.7
			#~ else
			#~ firevar=false
			#~ for mon in pbParty(attacker.index) 
			#~ next if mon.nil?
			#~ if mon.hasType?(:FIRE)
			#~ firevar=true
			#~ end  
			#~ end        
			#~ if $fepledgefield==1
			#~ miniscore*=1.2
			#~ if attacker.pbHasType?(:NORMAL)
			#~ miniscore*=1.2              
			#~ end              
			#~ end
			#~ end  
			#~ score*=miniscore
			#~ end 
			#~ if $fefieldeffect==7
			#~ if firevar
			#~ score*=0
			#~ else
			#~ score*=2
			#~ end
			#~ end
			#~ when 0x109 # Pay Day - to do
			#~ when 0x10A # Psychic Fangs
			#~ if attacker.pbOpposingSide.effects[PBEffects::Reflect]>0
			#~ score*=1.8
			#~ end
			#~ if attacker.pbOpposingSide.effects[PBEffects::LightScreen]>0
			#~ score*=1.3
			#~ end
			#~ if attacker.pbOpposingSide.effects[PBEffects::AuroraVeil]>0
			#~ score*=2.0
			#~ end
			#~ when 0x10B # High Jump Kick
			#~ protectmove = false
			#~ if skill>=PBTrainerAI.bestSkill
			#~ if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
			#~ for j in @aiMoveMemory[2][opponent.pokemonIndex]
			#~ protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
			#~ end              
			#~ end
			#~ elsif skill>=PBTrainerAI.highSkill
			#~ if @aiMoveMemory[1].length>0
			#~ for j in @aiMoveMemory[1]
			#~ protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
			#~ end              
			#~ end
			#~ elsif skill>=PBTrainerAI.mediumSkill
			#~ if @aiMoveMemory[0].length>0
			#~ for j in @aiMoveMemory[0]  
			#~ protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
			#~ end                    
			#~ end          
			#~ end 
			#~ score*=0.8
			#~ if protectmove
			#~ score*=0.5
			#~ end
			#~ ministat=opponent.stages[PBStats::EVASION]
			#~ ministat*=(-10)
			#~ ministat+=100
			#~ ministat/=100.0
			#~ score*=ministat
			#~ ministat=attacker.stages[PBStats::ACCURACY]
			#~ ministat*=(10)
			#~ ministat+=100
			#~ ministat/=70.0
			#~ score*=ministat
			#~ if (opponent.hasWorkingAbility(:SANDVEIL) && pbWeather==PBWeather::SANDSTORM) || (opponent.hasWorkingAbility(:SNOWCLOAK) && pbWeather==PBWeather::HAIL)
			#~ score*=0.7
			#~ end
			#~ if opponent.hasWorkingItem(:LAXINCENSE) || opponent.hasWorkingItem(:BRIGHTPOWDER)
			#~ score*=0.7
			#~ end
			#~ ghostvar = false
			#~ for mon in pbParty(opponent.index)
			#~ next if mon.nil?
			#~ ghostvar=true if mon.hasType?(:GHOST)
			#~ end
			#~ if ghostvar
			#~ score*=0.9
			#~ end
			#~ if @field.effects[PBEffects::Gravity]>0
			#~ score*=0
			#~ end
		when 0x10C # Substitute  
			maxdam=0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]                
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end                    
				end          
			end 
			if attacker.hp*4>attacker.totalhp
				if attacker.effects[PBEffects::Substitute]>0
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=0
					else
						if opponent.effects[PBEffects::LeechSeed]<0
							score*=0
						end
					end
				else
					if attacker.hp==attacker.totalhp
						score*=1.1
					else
						score*= (attacker.hp*(1.0/attacker.totalhp))
					end
					if opponent.effects[PBEffects::LeechSeed]>=0
						score*=1.2
					end
					if attacker.hasWorkingItem(:LEFTOVERS)
						score*=1.2
					end 
					for j in attacker.moves
						if j.isHealingMove?
							score*=1.2
							break
						end
					end
					if opponent.pbHasMove?(getID(PBMoves,:SPORE)) || opponent.pbHasMove?(getID(PBMoves,:SLEEPPOWDER))
						score*=1.2
					end
					if opponent.hasWorkingAbility(:INFILTRATOR)
						score*=0.3
					end
					if opponent.pbHasMove?(getID(PBMoves,:UPROAR)) || opponent.pbHasMove?(getID(PBMoves,:HYPERVOICE)) || opponent.pbHasMove?(getID(PBMoves,:ECHOEDVOICE)) || opponent.pbHasMove?(getID(PBMoves,:SNARL)) || opponent.pbHasMove?(getID(PBMoves,:BOOMBURST))
						score*=0.3
					end
					if maxdam*4<attacker.totalhp
						score*=2
					end
					if opponent.effects[PBEffects::Confusion]>0
						score*=1.3
					end
					if opponent.status==PBStatuses::PARALYSIS
						score*=1.3
					end            
					if opponent.effects[PBEffects::Attract]>=0
						score*=1.3
					end 
					if attacker.pbHasMove?(getID(PBMoves,:BATONPASS))
						score*=1.2
					end
					if attacker.hasWorkingAbility(:SPEEDBOOST)
						score*=1.1
					end
					if @doublebattle
						score*=0.5
					end
				end
			else
				score*=0
			end
		when 0x10D # Curse
			maxdam=0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]                
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end                    
				end          
			end 
			if attacker.pbHasType?(:GHOST)
				if opponent.effects[PBEffects::Curse] || attacker.hp*2<attacker.totalhp
					score*=0
				else
					score*=0.7
					if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=0.5
					end
					if maxdam*5 < attacker.hp
						score*=1.3
					end
					for j in attacker.moves
						if j.isHealingMove?
							score*=1.2
							break
						end
					end
					ministat=0
					ministat+=opponent.stages[PBStats::ATTACK] 
					ministat+=opponent.stages[PBStats::DEFENSE]
					ministat+=opponent.stages[PBStats::SPEED] 
					ministat+=opponent.stages[PBStats::SPATK] 
					ministat+=opponent.stages[PBStats::SPDEF] 
					ministat+=opponent.stages[PBStats::EVASION]
					ministat*=(5)
					ministat+=100
					ministat/=100.0
					score*=ministat  
					if attacker.hasWorkingAbility(:SHADOWTAG) || attacker.hasWorkingAbility(:ARENATRAP) || opponent.effects[PBEffects::MeanLook]>=0 ||  opponent.pbNonActivePokemonCount==0
						score*=1.3
					else
						score*=0.8
					end
					if @doublebattle
						score*=0.5
					end
					if initialscores.length>0
						badmoves=true
						for i in 0...initialscores.length
							next if i==scoreindex
							if initialscores[i]>25
								badmoves=false
							end
						end
						score*=1.3 if badmoves
					end    
				end
			else
				miniscore=100
				if attacker.effects[PBEffects::Substitute]>0
					miniscore*=1.3
				end
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>20
							badmoves=false
						end
					end
					miniscore*=1.3 if badmoves
				end   
				if (attacker.hp.to_f)/attacker.totalhp>0.75
					miniscore*=1.2
				end
				if (attacker.hp.to_f)/attacker.totalhp<0.33
					miniscore*=0.3
				end
				if (attacker.hp.to_f)/attacker.totalhp<0.75 && attacker.hasWorkingItem(:EJECTBUTTON)
					miniscore*=0.3
				end
				if attacker.pbOpposingSide.effects[PBEffects::Retaliate]
					miniscore*=0.3
				end     
				if opponent.effects[PBEffects::HyperBeam]>0
					miniscore*=1.3
				end
				if opponent.effects[PBEffects::Yawn]>0
					miniscore*=1.7
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						maxdam=0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam<(attacker.hp/4)
							miniscore*=1.2
						end
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						maxdam=0
						for j in @aiMoveMemory[1]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam<(attacker.hp/4)
							miniscore*=1.2
						end  
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						maxdam=0
						for j in @aiMoveMemory[0]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam<(attacker.hp/4)
							miniscore*=1.2
						end        
					end          
				end  
				if attacker.turncount<2
					miniscore*=1.2
				end
				if opponent.status!=0
					miniscore*=1.2
				end
				if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
					miniscore*=1.3
				end
				if opponent.effects[PBEffects::Encore]>0
					if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
						miniscore*=1.5
					end          
				end  
				if attacker.effects[PBEffects::Confusion]>0
					miniscore*=0.3
				end
				if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
					miniscore*=0.3
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						end  
						miniscore*=0.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						end  
						miniscore*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						end  
						miniscore*=0.3 if movecheck     
					end            
				end  
				if attacker.hasWorkingAbility(:SIMPLE)
					miniscore*=2
				end
				if opponent.hasWorkingAbility(:UNAWARE)
					miniscore*=0.5
				end        
				if @doublebattle
					miniscore*=0.5
				end
				if attacker.stages[PBStats::SPEED]<0
					ministat=attacker.stages[PBStats::SPEED]
					minimini=5*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				ministat=0
				ministat+=opponent.stages[PBStats::ATTACK]
				ministat+=opponent.stages[PBStats::SPATK]
				ministat+=opponent.stages[PBStats::SPEED]
				if ministat>0
					minimini=(-5)*ministat
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end
				miniscore/=100.0
				score*=miniscore
				miniscore=100
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						miniscore*=1.3 if movecheck     
					end            
				end 
				if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
					miniscore*=1.5
				end    
				if roles.include?("Sweeper")
					miniscore*=1.3
				end
				if attacker.status==PBStatuses::BURN
					miniscore*=0.5
				end
				if attacker.status==PBStatuses::PARALYSIS
					miniscore*=0.5
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
						end  
						miniscore*=0.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
						end  
						miniscore*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:FOULPLAY)
						end  
						miniscore*=0.3 if movecheck     
					end            
				end
				if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
					miniscore*=1.4
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.priority>0
						end  
						miniscore*=0.6 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.priority>0
						end  
						miniscore*=0.6 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.priority>0
						end  
						miniscore*=0.6 if movecheck     
					end            
				end        
				physmove=false
				for j in attacker.moves
					if j.pbIsPhysical?(j.type)
						physmove=true
					end
				end  
				if physmove && !attacker.pbTooHigh?(PBStats::ATTACK) 
					miniscore/=100.0
					score*=miniscore
				end
				miniscore=100
				if attacker.effects[PBEffects::Toxic]>0
					miniscore*=0.2
				end
				if pbRoughStat(opponent,PBStats::SPATK,skill)<pbRoughStat(opponent,PBStats::ATTACK,skill)
					if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
						if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && (attacker.hp.to_f)/attacker.totalhp>0.75
							miniscore*=1.3
						elsif (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
							miniscore*=0.7
						end
					end
					miniscore*=1.3
				end
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.2
				end
				if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
					miniscore*=1.2
				end
				healmove=false
				for j in attacker.moves
					if j.isHealingMove?
						healmove=true
					end
				end
				if healmove
					miniscore*=1.3
				end
				if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
					miniscore*=1.3
				end
				if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
					miniscore*=1.2
				end 
				if !attacker.pbTooHigh?(PBStats::DEFENSE) 
					miniscore/=100.0
					score*=miniscore
				end
				if (opponent.level-5)>attacker.level
					score*=0.6
					if (opponent.level-10)>attacker.level
						score*=0.2
					end
				end
				if attacker.hasWorkingAbility(:CONTRARY)
					score=0
				end  
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)           
					score*=0.7
				end                      
			end        
		when 0x10E # Spite
			#~ count=0
			#~ for i in opponent.moves
			#~ if i.basedamage>0
			#~ count+=1
			#~ end
			#~ end
			#~ lastmove = PBMove.new(opponent.lastMoveUsed)
			#~ if lastmove.basedamage>0 && count==1
			#~ score+=10
			#~ end
			#~ if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
			#~ score*=0.5
			#~ end
			#~ if lastmove.totalpp==5
			#~ score*=1.5
			#~ else
			#~ if lastmove.totalpp==10
			#~ score*=1.2
			#~ else
			#~ score*=0.7
			#~ end
			#~ end
		when 0x10F # Nightmare
			if !opponent.effects[PBEffects::Nightmare] && opponent.status==PBStatuses::SLEEP
				if opponent.statusCount>2
					score*=4
				end
				if opponent.hasWorkingAbility(:EARLYBIRD)
					score*=0.5
				end
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>25
							badmoves=false
						end
					end
					score*=6 if badmoves
				end
				if opponent.hasWorkingAbility(:SHEDSKIN)
					score*=0.5
				end
				if attacker.hasWorkingAbility(:SHADOWTAG) || attacker.hasWorkingAbility(:ARENATRAP) || opponent.effects[PBEffects::MeanLook]>=0 ||  opponent.pbNonActivePokemonCount==0
					score*=1.3
				else
					score*=0.8
				end
				if @doublebattle
					score*=0.5
				end
			else
				score*=0
			end                  
		when 0x110 # Rapid Spin
			if attacker.effects[PBEffects::LeechSeed]>=0
				score+=20
			end
			if attacker.effects[PBEffects::MultiTurn]>0        
				score+=10
			end
			if attacker.pbNonActivePokemonCount>0
				score+=25 if attacker.pbOwnSide.effects[PBEffects::StealthRock]
				score+=25 if attacker.pbOwnSide.effects[PBEffects::StickyWeb]
				score += (10*attacker.pbOwnSide.effects[PBEffects::Spikes])
				score += (15*attacker.pbOwnSide.effects[PBEffects::ToxicSpikes])
			end        
		when 0x111 # Future Sight
			if opponent.effects[PBEffects::FutureSight]>0
				score*=0
			else
				score*=0.6
				if @doublebattle
					score*=0.7
				end          
				if attacker.pbNonActivePokemonCount==0
					score*=0.7
				end
				if attacker.effects[PBEffects::Substitute]>0
					score*=1.2
				end
				protectmove=false
				for j in attacker.moves
					protectmove = true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT)|| j.id==getID(PBMoves,:SPIKYSHIELD)
				end 
				if protectmove
					score*=1.2
				end
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					score*=1.1
				end
				if attacker.hasWorkingAbility(:MOODY) || attacker.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || attacker.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || attacker.pbHasMove?(getID(PBMoves,:TAILGLOW))
					score*=1.2
				end
			end
		when 0x112 # Stockpile
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.1
			end
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam<(attacker.hp/4)
						miniscore*=1.1
					else
						if move.basedamage==0 
							miniscore*=0.8
							if maxdam>attacker.hp
								miniscore*=0.1
							end
						end
					end        
				end          
			end  
			if attacker.turncount<2
				miniscore*=1.1
			end
			if opponent.status!=0
				miniscore*=1.1
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end        
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.2 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.3
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if (maxdam.to_f/attacker.hp)<0.12
						miniscore*=0.3
					end        
				end          
			end       
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.5
			end   
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end        
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.7
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end 
			if attacker.pbHasMove?(getID(PBMoves,:SPITUP)) || attacker.pbHasMove?(getID(PBMoves,:SWALLOW))
				miniscore*=1.6
			end
			if attacker.effects[PBEffects::Stockpile]<3
				miniscore/=100.0
				score*=miniscore
			else
				score=0
			end        
			if attacker.hasWorkingAbility(:CONTRARY)
				score=0
			end  
			if attacker.pbTooHigh?(PBStats::SPDEF) && attacker.pbTooHigh?(PBStats::DEFENSE)
				score*=0
			end
		when 0x113 # Spit Up
			startscore = score
			if attacker.effects[PBEffects::Stockpile]==0
				score*=0
			else
				score*=0.8
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					score*=0.7
				end
				if roles.include?("Tank")
					score*=0.9
				end
				count=0
				for m in attacker.moves
					count+=1 if m.basedamage>0
				end
				if count>1
					score*=0.5
				end
				if opponent.pbNonActivePokemonCount==0
					score*=0.7
				else
					score*=1.2
				end
				if startscore < 110
					score*=0.5
				else
					score*=1.3
				end
				if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.1
				else
					score*=0.8
				end
				if attacker.pbHasMove?(getID(PBMoves,:SWALLOW))
					if attacker.hp/(attacker.totalhp).to_f < 0.66
						score*=0.8
						if attacker.hp/(attacker.totalhp).to_f < 0.4
							score*=0.5
						end
					end
				end
			end
		when 0x114 # Swallow
			maxdam=0
			movecheck=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end                    
				end          
			end 
			startscore = score
			if attacker.effects[PBEffects::Stockpile]==0
				score*=0
			else
				score+= 10*attacker.effects[PBEffects::Stockpile]
				score*=0.8
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					score*=0.9
				end
				if roles.include?("Tank")
					score*=0.9
				end
				count=0
				for m in attacker.moves
					count+=1 if m.isHealingMove?
				end
				if count>1
					score*=0.5
				end          
				if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.1
				else
					score*=0.8
				end
				if maxdam>attacker.hp
					score*=2
				else
					if maxdam*1.5 > attacker.hp
						score*=1.5
					end
					if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						if maxdam*2 > attacker.hp
							score*=2
						else
							score*=0.2
						end
					end
				end
				if movecheck
					score*=0.7
				end
				if attacker.hp*2 < attacker.totalhp
					score*=1.5
				end
				if attacker.status==PBStatuses::BURN || attacker.status==PBStatuses::POISON || attacker.effects[PBEffects::Curse] || attacker.effects[PBEffects::LeechSeed]>=0
					score*=1.3
					if attacker.effects[PBEffects::Toxic]>0
						score*=1.3
					end            
				end
				if opponent.effects[PBEffects::HyperBeam]>0
					score*=1.2
				end
				if attacker.hp/(attacker.totalhp).to_f > 0.8
					score*=0
				end
			end  
		when 0x115 # Focus Punch
			startscore=score
			soundcheck=false
			multicheck=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						soundcheck=true if (j.isSoundBased? && j.basedamage>0)
						multicheck=true if j.pbNumHits(opponent)>1
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						soundcheck=true if (j.isSoundBased? && j.basedamage>0)
						multicheck=true if j.pbNumHits>1
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						soundcheck=true if (j.isSoundBased? && j.basedamage>0)
						multicheck=true if j.pbNumHits>1
					end                    
				end          
			end 
			if attacker.effects[PBEffects::Substitute]>0
				if multicheck || soundcheck || opponent.hasWorkingAbility(:INFILTRATOR)
					score*=0.9
				else
					score*=1.3
				end
				if attacker.status==PBStatuses::SLEEP && !attacker.hasWorkingAbility(:EARLYBIRD) && !attacker.hasWorkingAbility(:SHEDSKIN)
					score*=1.2
				end
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=0.9
				end
				if opponent.effects[PBEffects::HyperBeam]>0
					score*=1.5
				end
				if score<=startscore
					score*=0.3
				end
			end
		when 0x116 # Sucker Punch
			knowncount = 0
			healcheck=false
			setupcheck=false
			pricheck=false
			alldam = true
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						knowncount+=1
						if j.basedamage<=0
							alldam = false
						end              
						pricheck = true if j.priority>0
						healcheck=true if j.isHealingMove?
						setupcheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						knowncount+=1
						if j.basedamage<=0
							alldam = false
						end
						pricheck = true if j.priority>0
						healcheck=true if j.isHealingMove?
						setupcheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))              
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						knowncount+=1
						if j.basedamage<=0
							alldam = false
						end
						pricheck = true if j.priority>0
						healcheck=true if j.isHealingMove?
						setupcheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))              
					end                    
				end          
			end 
			if knowncount==4 && alldam
				score*=1.3
			else
				if healcheck
					score*=0.6
				end
				if setupcheck
					score*=0.8
				end
				if attacker.lastMoveUsed==26 # Sucker Punch last turn
					check = rand(3)
					if check != 1
						score*=0.3
					end
					if setupvar
						score*=0.3
					end
				end
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=0.8
					if initialscores.length>0
						test = initialscores[scoreindex]
						if initialscores.max!=test
							score*=0.6
						end              
					end   
				else
					if pricheck
						score*=0.5
					else
						score*=1.3
					end
				end
			end        
		when 0x117 # Follow Me
			if @doublebattle && attacker.pbPartner.hp!=0
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					score*=1.2
				end
				if attacker.pbPartner.hasWorkingAbility(:MOODY)
					score*=1.3
				end
				if attacker.pbPartner.turncount<1
					score*=2
				else
					score*=1.2
				end
				if attacker.hp==attacker.totalhp
					score*=1.2
				else
					score*=0.8
					if attacker.hp*2 < attacker.totalhp
						score*=0.5
					end
				end
				if attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill) || attacker.pbSpeed<pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)
					score*=1.2
				end
			else
				score*=0
			end  
		when 0x118 # Gravity
			maxdam=0
			maxid = -1
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							maxid = j.id
						end              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							maxid = j.id
						end
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							maxid = j.id
						end
					end                    
				end          
			end 
			if @field.effects[PBEffects::Gravity]>0
				score*=0
			else
				for i in attacker.moves 
					if i.accuracy<=70
						score*=2
						break
					end
				end
				if attacker.pbHasMove?(getID(PBMoves,:ZAPCANNON)) || attacker.pbHasMove?(getID(PBMoves,:INFERNO))
					score*=3
				end
				if maxid==getID(PBMoves,:SKYDROP) || maxid==getID(PBMoves,:BOUNCE) || maxid==getID(PBMoves,:FLY) || maxid==getID(PBMoves,:JUMPKICK) || maxid==getID(PBMoves,:FLYINGPRESS) || maxid==getID(PBMoves,:HIJUMPKICK) || maxid==getID(PBMoves,:SPLASH)
					score*=2
				end
				for m in attacker.moves
					if m.id==getID(PBMoves,:SKYDROP) || m.id==getID(PBMoves,:BOUNCE) || m.id==getID(PBMoves,:FLY) || m.id==getID(PBMoves,:JUMPKICK) || m.id==getID(PBMoves,:FLYINGPRESS) || m.id==getID(PBMoves,:HIJUMPKICK) || m.id==getID(PBMoves,:SPLASH)
						score*=0
						break
					end
				end
				if attacker.pbHasType?(:GROUND) && (opponent.pbHasType?(:FLYING) || opponent.hasWorkingAbility(:LEVITATE) || opponent.hasWorkingItem(:AIRBALLOON))
					score*=2
				end
			end                                
		when 0x119 # Magnet Rise
			maxdam=0
			maxtype = -1
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							maxype = j.type
						end              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							maxype = j.type
						end
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							maxype = j.type
						end
					end                    
				end          
			end 
			if !(attacker.effects[PBEffects::MagnetRise]>0 || attacker.effects[PBEffects::Ingrain] || attacker.effects[PBEffects::SmackDown])
				if maxtype==4 # Highest expected dam from a ground move
					score*=3
				end
				if opponent.pbHasType?(:GROUND)
					score*=3
				end
			else
				score*=0
			end    
		when 0x11A # Telekinesis
			healvar = false 
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						healvar=true if j.isHealingMove?             
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						healvar=true if j.isHealingMove?
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						healvar=true if j.isHealingMove?
					end                    
				end          
			end         
			if !(opponent.effects[PBEffects::Telekinesis]>0 || opponent.effects[PBEffects::Ingrain] || opponent.effects[PBEffects::SmackDown] || @field.effects[PBEffects::Gravity]>0 || opponent.hasWorkingItem(:IRONBALL))
				for i in attacker.moves 
					if i.accuracy<=70
						score+=10
						break
					end
				end
				if attacker.pbHasMove?(getID(PBMoves,:ZAPCANNON)) || attacker.pbHasMove?(getID(PBMoves,:INFERNO))
					score*=2
				end
			else
				score*=0
			end
		when 0x11B # Sky Uppercut - to do
		when 0x11C # Smack Down
			if !(opponent.effects[PBEffects::Ingrain] || opponent.effects[PBEffects::SmackDown] || @field.effects[PBEffects::Gravity]>0 || opponent.hasWorkingItem(:IRONBALL))
				miniscore=60
				if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					if opponent.pbHasMove?(getID(PBMoves,:BOUNCE)) || opponent.pbHasMove?(getID(PBMoves,:FLY)) || opponent.pbHasMove?(getID(PBMoves,:SKYDROP))
						miniscore*=1.3
					else
						opponent.effects[PBEffects::TwoTurnAttack]!=0
						miniscore*=2
					end
				end
				groundmove = false
				for i in attacker.moves
					if i.type == 4
						groundmove = true
					end
				end
				if opponent.pbHasType?(:FLYING) || opponent.hasWorkingAbility(:LEVITATE) || opponent.hasWorkingItem(:AIRBALLOON)
					miniscore*=2
				end
				miniscore/=100.0
				score*=miniscore
			end
		when 0x11D # After You - to do
		when 0x11E # Quash - to do
		when 0x11F # Trick Room
			count = -1
			sweepvar = false
			for i in pbParty(attacker.index)
				count+=1
				next if i.nil?
				temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
				if temprole.include?("Sweeper")
					sweepvar = true
				end
			end  
			if !sweepvar
				score*=1.3
			end
			if roles.include?("Tank") || roles.include?("Physical Wall") || roles.include?("Special Wall")
				score*=1.3
			end
			if roles.include?("Lead")
				score*=1.3
			end
			if @doublebattle
				score*=1.3
			end
			if attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill) || attacker.hasWorkingItem(:IRONBALL)
				if @trickroom > 0         
					score*=0
				else
					score*=2
				end
			else
				if @trickroom > 0 && attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && 
					attacker.pbSpeed>pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill) && attacker.pbPartner.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && 
					attacker.pbPartner.pbSpeed>pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)
					score*=0.9
				else
					score*=0
				end
			end
		when 0x120 # Ally Switch
			score*=0
		when 0x121 # Foul Play - to do
		when 0x122 # Secret Sword - to do
		when 0x123 # Synchronoise
			if !opponent.pbHasType?(attacker.type1) && !opponent.pbHasType?(attacker.type2) && !opponent.pbHasType?(attacker.type3)
				score*=0
			end
		when 0x124 # Wonder Room
			if @field.effects[PBEffects::WonderRoom]!=0
				score*=0
			else
				if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
					if attacker.defense>attacker.spdef
						score*=0.5
					else
						score*=2
					end
				else
					if attacker.defense<attacker.spdef
						score*=0.5
					else
						score*=2
					end
				end
				if attacker.attack>attacker.spatk
					if pbRoughStat(opponent,PBStats::DEFENSE,skill)>pbRoughStat(opponent,PBStats::SPDEF,skill)
						score*=2
					else
						score*=0.5
					end
				else
					if pbRoughStat(opponent,PBStats::DEFENSE,skill)<pbRoughStat(opponent,PBStats::SPDEF,skill)
						score*=2
					else
						score*=0.5
					end
				end
			end     
		when 0x125 # Last Resort
			totalMoves = []
			for i in attacker.moves
				totalMoves[i.id] = false
				if i.function == 0x125
					totalMoves[i.id] = true
				end      
				if i.id == 0
					totalMoves[i.id] = true
				end   
			end
			for i in attacker.movesUsed
				for j in attacker.moves
					if i == j.id
						totalMoves[j.id] = true
					end
				end 
			end
			for i in attacker.moves      
				if !totalMoves[i.id]
					score=0
				end
			end
		when 0x126 # Shadow Stuff
			score*=1.2 # Shadow moves are more preferable
		when 0x127 # Shadow moves + paralyze
			score*=1.2 # Shadow moves are more preferable
			if opponent.pbCanParalyze?(false,move,attacker)
				score*=1.3
				if skill>=PBTrainerAI.mediumSkill
					aspeed=pbRoughStat(attacker,PBStats::SPEED,skill)
					ospeed=pbRoughStat(opponent,PBStats::SPEED,skill)
					if aspeed<ospeed
						score*=1.3
					elsif aspeed>ospeed
						score*=0.6
					end
				end
				if skill>=PBTrainerAI.highSkill
					score*=0.6 if opponent.hasWorkingAbility(:GUTS)
					score*=0.6 if opponent.hasWorkingAbility(:MARVELSCALE)
					score*=0.6 if opponent.hasWorkingAbility(:QUICKFEET)
				end
			end
		when 0x128 # Shadow moves + burn
			score*=1.2 # Shadow moves are more preferable
			if opponent.pbCanBurn?(false,move,attacker)
				score*=1.3
				if skill>=PBTrainerAI.highSkill
					score*=0.6 if opponent.hasWorkingAbility(:GUTS)
					score*=0.6 if opponent.hasWorkingAbility(:MARVELSCALE)
					score*=0.6 if opponent.hasWorkingAbility(:QUICKFEET)
					score*=0.6 if opponent.hasWorkingAbility(:FLAREBOOST)
				end
			end
		when 0x129 # Shadow moves + freeze
			score*=1.2 # Shadow moves are more preferable
			if opponent.pbCanFreeze?(false,move,attacker)
				score*=1.3
				if skill>=PBTrainerAI.highSkill
					score*=0.8 if opponent.hasWorkingAbility(:MARVELSCALE)
				end
			end
		when 0x12A # Shadow moves + confuse
			score*=1.2 # Shadow moves are more preferable
			if opponent.pbCanConfuse?(false,attacker)
				score*=1.3
			else
				if skill>=PBTrainerAI.mediumSkill
					score*=0.1
				end
			end
		when 0x12B # Shadow moves + lower def
			score*=1.2 # Shadow moves are more preferable
			if !opponent.pbCanReduceStatStageAI?(PBStats::DEFENSE)
				score*=0.1
			else
				score*=1.4 if attacker.turncount==0
				score+=opponent.stages[PBStats::DEFENSE]*20
			end
		when 0x12C # Shadow moves + lower evasion
			score*=1.2 # Shadow moves are more preferable
			if !opponent.pbCanReduceStatStageAI?(PBStats::EVASION)
				score*=0.1
			else
				score+=opponent.stages[PBStats::EVASION]*15
			end
		when 0x12D # Shadow moves
			score*=1.2 # Shadow moves are more preferable
		when 0x12E # Shadow moves + everyone half
			score*=1.2 # Shadow moves are more preferable
			score*=1.2 if opponent.hp>=(opponent.totalhp/2)
			score*=0.8 if attacker.hp<(attacker.hp/2)
		when 0x12F # Shadow moves + cannot escape
			score*=1.2 # Shadow moves are more preferable
			score*=0 if opponent.effects[PBEffects::MeanLook]>=0
		when 0x130 # Shadow moves + recoil
			score*=1.2 # Shadow moves are more preferable
			score*=0.6
		when 0x131 # Shadow moves
			score*=1.2 # Shadow moves are more preferable
			if pbCheckGlobalAbility(:AIRLOCK) ||
				pbCheckGlobalAbility(:CLOUDNINE)
				score*=0.1
			elsif pbWeather==PBWeather::SHADOWSKY
				score*=0.1
			end
		when 0x132 # Shadow moves + removes Reflect etc
			score*=1.2 # Shadow moves are more preferable
			if opponent.pbOwnSide.effects[PBEffects::Reflect]>0 ||
				opponent.pbOwnSide.effects[PBEffects::LightScreen]>0 ||
				opponent.pbOwnSide.effects[PBEffects::ShadowVeil]>0 ||
				opponent.pbOwnSide.effects[PBEffects::Safeguard]>0
				score*=1.3
				score*=0.1 if attacker.pbOwnSide.effects[PBEffects::Reflect]>0 ||
				attacker.pbOwnSide.effects[PBEffects::LightScreen]>0 ||
				attacker.pbOwnSide.effects[PBEffects::ShadowVeil]>0 ||
				attacker.pbOwnSide.effects[PBEffects::Safeguard]>0
			else
				score*=0
			end
		when 0x133 # Kings Shield     
			if opponent.turncount==0
				score*=1.5
			end        
			if opponent.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || opponent.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || opponent.pbHasMove?(getID(PBMoves,:CALMMIND)) || opponent.pbHasMove?(getID(PBMoves,:WORKUP)) || opponent.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || opponent.pbHasMove?(getID(PBMoves,:TAILGLOW)) || opponent.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || opponent.pbHasMove?(getID(PBMoves,:BULKUP)) || opponent.pbHasMove?(getID(PBMoves,:COIL)) || opponent.pbHasMove?(getID(PBMoves,:CURSE)) || opponent.pbHasMove?(getID(PBMoves,:GROWTH)) || opponent.pbHasMove?(getID(PBMoves,:HONECLAWS)) || opponent.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || opponent.pbHasMove?(getID(PBMoves,:SHELLSMASH))
				score*=0.6
			end 
			if attacker.hasWorkingAbility(:SPEEDBOOST) && attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				score*=4
				#experimental -- cancels out drop if killing moves
				if initialscores.length>0
					greatmoves=false
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>=100
							greatmoves=true
						end
					end        
					score*=6 if greatmoves
				end 
				#end experimental
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON)) || attacker.effects[PBEffects::Ingrain] || attacker.effects[PBEffects::AquaRing]
				score*=1.2
			end  
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN        
				score*=1.2
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if attacker.status==PBStatuses::POISON || attacker.status==PBStatuses::BURN        
				score*=0.8
				if attacker.effects[PBEffects::Toxic]>0
					score*=0.3
				end
			end   
			if opponent.effects[PBEffects::LeechSeed]>=0
				score*=1.3
			end
			if opponent.effects[PBEffects::PerishSong]!=0
				score*=2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				score*=0.3
			end
			if opponent.vanished
				score*=2
				if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.5
				end
			end
			score*=0.8
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
					end  
					score*=0.1 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
					end  
					score*=0.1 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
					end  
					score*=0.1 if movecheck     
				end            
			end    
			if attacker.effects[PBEffects::Wish]>0
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						maxdam=0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>attacker.hp
							score*=3
						else
							score*=1.4
						end                
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						maxdam=0
						for j in @aiMoveMemory[1]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>attacker.hp
							score*=3
						else
							score*=1.4
						end                             
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						maxdam=0
						for j in @aiMoveMemory[0]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>attacker.hp
							score*=3
						else
							score*=1.4
						end        
					end          
				end  
			end  
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					contactcheck=false
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]                 
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							contactcheck=j.isContactMove?
						end              
					end  
					if contactcheck
						score*=1.3
					end                
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					contactcheck=false
					maxdam=0
					for j in @aiMoveMemory[1]                 
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							contactcheck=j.isContactMove?
						end              
					end  
					if contactcheck
						score*=1.3
					end                            
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					contactcheck=false
					maxdam=0
					for j in @aiMoveMemory[0]                 
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							contactcheck=j.isContactMove?
						end              
					end  
					if contactcheck
						score*=1.3
					end        
				end          
			end    
			if pbRoughStat(opponent,PBStats::ATTACK,skill)>pbRoughStat(opponent,PBStats::SPATK,skill)
				score*=1.5
			end
			if attacker.status==0
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:WILLOWISP) || j.id==getID(PBMoves,:THUNDERWAVE) || j.id==getID(PBMoves,:TOXIC)
						end  
						score*=0.7 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:WILLOWISP) || j.id==getID(PBMoves,:THUNDERWAVE) || j.id==getID(PBMoves,:TOXIC)
						end  
						score*=0.7 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:WILLOWISP) || j.id==getID(PBMoves,:THUNDERWAVE) || j.id==getID(PBMoves,:TOXIC)
						end  
						score*=0.7 if movecheck     
					end            
				end  
			end 
			ratesharers=[
				391,   # Protect
				121,   # Detect
				122,   # Quick Guard
				515,   # Wide Guard
				361,   # Endure
				584,   # King's Shield
				603		# Spiky Shield
			]
			if ratesharers.include?(attacker.lastMoveUsed)
				score/=(attacker.effects[PBEffects::ProtectRate]*2.0)
			end
		when 0x140 # Electric Terrain
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:AMPHAROS) && j.item == PBItems::AMPHAROSITE && j.willmega)
					theresone=true
				end
			end
			sleepvar=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]               
						sleepvar = true if j.function==0x03
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						sleepvar = true if j.function==0x03
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						sleepvar = true if j.function==0x03
					end                    
				end          
			end 
			if @field.effects[PBEffects::ElectricTerrain]==0 && !theresone
				miniscore = getFieldDisruptScore(attacker,opponent,skill)
				if attacker.pbHasType?(:ELECTRIC)
					miniscore*=1.5
				end
				elecvar=false
				for mon in pbParty(attacker.index) 
					next if mon.nil?
					if mon.hasType?(:ELECTRIC)
						elecvar=true
					end  
				end
				if elecvar
					miniscore*=2
				end
				if opponent.pbHasType?(:ELECTRIC)
					miniscore*=0.5
				end
				for m in attacker.moves
					if m.function==0x03
						miniscore*=0.5
						break
					end
				end
				if sleepvar
					miniscore*=2
				end
				score*=miniscore
			else
				score*=0
			end   
		when 0x149 # Grassy Terrain
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:WHIMSICOTT) && j.item == PBItems::WHIMSICOTTITE && j.willmega)
					theresone=true
				end
			end
			sludgevar=false
			healvar=false
			#~ if skill>=PBTrainerAI.bestSkill
			#~ if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
			#~ for j in @aiMoveMemory[2][opponent.pokemonIndex]               
			#~ sludgevar=true if j.id==getID(PBMoves,:SLUDGEWAVE)
			#~ healvar=true if j.isHealingMove? 
			#~ end              
			#~ end
			#~ elsif skill>=PBTrainerAI.highSkill
			#~ if @aiMoveMemory[1].length>0
			#~ for j in @aiMoveMemory[1]
			#~ sludgevar=true if j.id==getID(PBMoves,:SLUDGEWAVE)
			#~ healvar=true if j.isHealingMove? 
			#~ end              
			#~ end
			#~ elsif skill>=PBTrainerAI.mediumSkill
			#~ if @aiMoveMemory[0].length>0
			#~ for j in @aiMoveMemory[0]  
			#~ sludgevar=true if j.id==getID(PBMoves,:SLUDGEWAVE)
			#~ healvar=true if j.isHealingMove? 
			#~ end                    
			#~ end          
			#~ end 
			firevar=false
			grassvar=false
			for mon in pbParty(attacker.index) 
				next if mon.nil?
				#~ if mon.hasType?(:FIRE)
				#~ firevar=true
				#~ end  
				if mon.hasType?(:GRASS)
					grassvar=true
				end  
			end
			if @field.effects[PBEffects::GrassyTerrain]==0 && !theresone
				miniscore = getFieldDisruptScore(attacker,opponent,skill)
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.5
				end
				if healvar
					miniscore*=0.5
				end          
				if attacker.pbHasType?(:FIRE)
					miniscore*=2
				end
				if firevar
					miniscore*=2
				end
				if opponent.pbHasType?(:FIRE)
					miniscore*=0.5
					if pbWeather!=PBWeather::RAINDANCE
						miniscore*=0.5
					end
					if attacker.pbHasType?(:GRASS)
						miniscore*=0.5
					end  
				else
					if attacker.pbHasType?(:GRASS)
						miniscore*=2
					end  
				end
				if grassvar
					miniscore*=2
				end
				if sludgevar
					miniscore*=0.5
				end
				if attacker.hasWorkingAbility(:GRASSPELT)
					miniscore*=1.5
				end                                        
				score*=miniscore
			else
				score*=0
			end  
		when 0x150 # Misty Terrain
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			sludgevar=false
			healvar=false
			#~ if skill>=PBTrainerAI.bestSkill
			#~ if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
			#~ for j in @aiMoveMemory[2][opponent.pokemonIndex]               
			#~ sludgevar=true if j.id==getID(PBMoves,:SLUDGEWAVE)
			#~ healvar=true if j.isHealingMove? 
			#~ end              
			#~ end
			#~ elsif skill>=PBTrainerAI.highSkill
			#~ if @aiMoveMemory[1].length>0
			#~ for j in @aiMoveMemory[1]
			#~ sludgevar=true if j.id==getID(PBMoves,:SLUDGEWAVE)
			#~ healvar=true if j.isHealingMove? 
			#~ end              
			#~ end
			#~ elsif skill>=PBTrainerAI.mediumSkill
			#~ if @aiMoveMemory[0].length>0
			#~ for j in @aiMoveMemory[0]  
			#~ sludgevar=true if j.id==getID(PBMoves,:SLUDGEWAVE)
			#~ healvar=true if j.isHealingMove? 
			#~ end                    
			#~ end          
			#~ end 
			fairyvar=false
			dragonvar=false
			for mon in pbParty(attacker.index) 
				next if mon.nil?
				if mon.hasType?(:FAIRY)
					fairyvar=true
				end  
				if mon.hasType?(:DRAGON)
					dragonvar=true
				end  
			end
			if @field.effects[PBEffects::MistyTerrain]==0 && !theresone
				miniscore = getFieldDisruptScore(attacker,opponent,skill)
				if fairyvar
					miniscore*=2
				end
				if opponent.pbHasType?(:DRAGON)
					miniscore*=2
				end
				if attacker.pbHasType?(:DRAGON)
					miniscore*=0.5
				end                                               
				score*=miniscore
			else
				score*=0
			end  
			#~ when 0x137 # Flying Press
			#~ if opponent.effects[PBEffects::Minimize]
			#~ score*=2
			#~ end        
			#~ if @field.effects[PBEffects::Gravity]>0
			#~ score*=0
			#~ end        
		when 0x151 # Noble Roar
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			if (!opponent.pbCanReduceStatStageAI?(PBStats::ATTACK) && !opponent.pbCanReduceStatStageAI?(PBStats::SPATK)) || (opponent.stages[PBStats::ATTACK]==-6 && opponent.stages[PBStats::SPATK]==-6) || (opponent.stages[PBStats::ATTACK]>0 && opponent.stages[PBStats::SPATK]>0) || theresone
				score*=0
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore=1.3
				end
				sweepvar = false
				for i in pbParty(attacker.index)
					next if i.nil?
					temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
					if temprole.include?("Sweeper")
						sweepvar = true
					end
				end  
				if sweepvar 
					miniscore*=1.1
				end
				if attacker.hasWorkingAbility(:SHADOWTAG) || attacker.hasWorkingAbility(:ARENATRAP) || opponent.effects[PBEffects::MeanLook]>=0 ||  opponent.pbNonActivePokemonCount==0
					miniscore*=1.4
				end
				ministat=0          
				ministat+=opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]<0
				ministat+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]<0
				ministat+=opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]<0
				ministat+=opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]<0
				ministat+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]<0
				ministat+=opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]<0
				ministat*=(5)
				ministat+=100
				ministat/=100.0
				miniscore*=ministat  
				if attacker.pbHasMove?(getID(PBMoves,:FOULPLAY))
					miniscore*=0.5
				end
				if attacker.pbNonActivePokemonCount==0
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				miniscore/=100.0
				score*=miniscore
			end  
		when 0x138 # Draining Kiss
			minimini = score*0.01
			miniscore = (opponent.hp*minimini)*(3.0/4.0)
			if miniscore > (attacker.totalhp-attacker.hp)
				miniscore = (attacker.totalhp-attacker.hp)
			end
			if attacker.totalhp>0
				miniscore/=(attacker.totalhp).to_f
			end
			if attacker.hasWorkingItem(:BIGROOT)
				miniscore*=1.3
			end
			miniscore+=1
			if opponent.hasWorkingAbility(:LIQUIDOOZE)
				miniscore = (2-miniscore)
			end
			if (attacker.hp!=attacker.totalhp || ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))) && opponent.effects[PBEffects::Substitute]==0
				score*=miniscore
			end      
		when 0x135 # Aromatic Mist
			newopp = attacker.pbOppositeOpposing
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][newopp.pokemonIndex].length>0
					for j in @aiMoveMemory[2][newopp.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end       
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
				end
			end         
			if @doublebattle && opponent==attacker.pbPartner && opponent.stages[PBStats::SPDEF]!=6
				if newopp.spatk > newopp.attack
					score*=2
				else
					score*=0.5
				end
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>20
							badmoves=false
						end
					end
					score*=1.3 if badmoves
				end   
				if opponent.hp*(1.0/opponent.totalhp)>0.75
					score*=1.1
				end
				if opponent.effects[PBEffects::Yawn]>0 || opponent.effects[PBEffects::LeechSeed]>=0 || opponent..effects[PBEffects::Attract]>=0 || opponent.status!=0
					score*=0.3
				end
				if movecheck
					score*=0.2
				end
				if opponent.hasWorkingAbility(:SIMPLE)
					score*=2
				end
				if newopp.hasWorkingAbility(:UNAWARE)
					score*=0.5
				end        
				if opponent.hasWorkingItem(:LEFTOVERS) || (opponent.hasWorkingItem(:BLACKSLUDGE) && opponent.pbHasType?(:POISON))
					score*=1.2
				end
				if opponent.hasWorkingAbility(:CONTRARY)
					score*=0
				end
			else
				score*=0
			end
		when 0x139 # Eerie Impulse
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			if (pbRoughStat(opponent,PBStats::SPATK,skill)<pbRoughStat(opponent,PBStats::ATTACK,skill)) || opponent.stages[PBStats::SPATK]>1 || !opponent.pbCanReduceStatStageAI?(PBStats::SPATK) || theresone
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.3
				end
				count=-1
				party=pbParty(attacker.index)
				sweepvar=false
				for i in 0...party.length
					count+=1
					next if count==attacker.pokemonIndex
					temproles = pbGetMonRole(party[i],opponent,skill,count,party)
					if temproles.include?("Sweeper")
						sweepvar=true
					end
				end
				if sweepvar
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN
					miniscore*=1.2
				end
				if opponent.stages[PBStats::SPATK]<0
					minimini = 5*opponent.stages[PBStats::SPATK]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end       
				if livecount1==1
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end         
				miniscore/=100.0    
				score*=miniscore
			end
		when 0x162 # Belch
			if attacker.effects[PBEffects::CanBelch]==false
				score*=0
			end        
		when 0x146 # Parting Shot
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			if (!opponent.pbCanReduceStatStageAI?(PBStats::ATTACK) && !opponent.pbCanReduceStatStageAI?(PBStats::SPATK)) || (opponent.stages[PBStats::ATTACK]==-6 && opponent.stages[PBStats::SPATK]==-6) || (opponent.stages[PBStats::ATTACK]>0 && opponent.stages[PBStats::SPATK]>0) || theresone
				score*=0
			else
				if attacker.pbNonActivePokemonCount==0
					if attacker.pbOwnSide.effects[PBEffects::StealthRock]
						score*=0.7
					end
					if attacker.pbOwnSide.effects[PBEffects::StickyWeb]
						score*=0.6
					end
					if attacker.pbOwnSide.effects[PBEffects::Spikes]>0
						score*=0.9**attacker.pbOwnSide.effects[PBEffects::Spikes]
					end
					if attacker.pbOwnSide.effects[PBEffects::ToxicSpikes]>0
						score*=0.9**attacker.pbOwnSide.effects[PBEffects::ToxicSpikes]
					end 
					if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=1.1
					end
					sweepvar = false
					for i in pbParty(attacker.index)
						next if i.nil?
						temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
						if temprole.include?("Sweeper")
							sweepvar = true
						end
					end  
					if sweepvar 
						score*=1.5
					end
					if roles.include?("Lead")
						score*=1.1
					end
					if roles.include?("Pivot")
						score*=1.2
					end
					loweredstats=0
					loweredstats+=attacker.stages[PBStats::ATTACK] if attacker.stages[PBStats::ATTACK]<0
					loweredstats+=attacker.stages[PBStats::DEFENSE] if attacker.stages[PBStats::DEFENSE]<0
					loweredstats+=attacker.stages[PBStats::SPEED] if attacker.stages[PBStats::SPEED]<0
					loweredstats+=attacker.stages[PBStats::SPATK] if attacker.stages[PBStats::SPATK]<0
					loweredstats+=attacker.stages[PBStats::SPDEF] if attacker.stages[PBStats::SPDEF]<0
					loweredstats+=attacker.stages[PBStats::EVASION] if attacker.stages[PBStats::EVASION]<0
					miniscore= (5)*loweredstats    
					miniscore+=100
					miniscore/=100.0
					score*=miniscore      
					raisedstats=0
					raisedstats+=attacker.stages[PBStats::ATTACK] if attacker.stages[PBStats::ATTACK]>0
					raisedstats+=attacker.stages[PBStats::DEFENSE] if attacker.stages[PBStats::DEFENSE]>0
					raisedstats+=attacker.stages[PBStats::SPEED] if attacker.stages[PBStats::SPEED]>0
					raisedstats+=attacker.stages[PBStats::SPATK] if attacker.stages[PBStats::SPATK]>0
					raisedstats+=attacker.stages[PBStats::SPDEF] if attacker.stages[PBStats::SPDEF]>0
					raisedstats+=attacker.stages[PBStats::EVASION] if attacker.stages[PBStats::EVASION]>0
					miniscore= (-5)*raisedstats
					miniscore+=100
					miniscore/=100.0
					score*=miniscore    
					if attacker.effects[PBEffects::Toxic]>0 || attacker.effects[PBEffects::Attract]>-1 || attacker.effects[PBEffects::Confusion]>0
						score*=1.3
					end
					if attacker.effects[PBEffects::LeechSeed]>-1
						score*=1.5
					end   
					miniscore=130
					if attacker.hasWorkingAbility(:SHADOWTAG) || attacker.hasWorkingAbility(:ARENATRAP) || opponent.effects[PBEffects::MeanLook]>=0 ||  opponent.pbNonActivePokemonCount==0
						miniscore*=1.4
					end
					ministat=0          
					ministat+=opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]<0
					ministat+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]<0
					ministat+=opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]<0
					ministat+=opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]<0
					ministat+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]<0
					ministat+=opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]<0
					ministat*=(5)
					ministat+=100
					ministat/=100.0
					miniscore*=ministat  
					if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:CONTRARY)
						miniscore*=0.1
					end
					miniscore/=100.0
					score*=miniscore
				end          
			end  
		when 0x147 # Geomancy
			maxdam=0
			movecheck=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end                    
				end          
			end 
			if !attacker.hasWorkingItem(:POWERHERB)          
				if maxdam>attacker.hp
					score*=0.4
				else
					if attacker.hp*(1.0/attacker.totalhp)<0.5
						score*=0.6
					end
				end
				if attacker.turncount<2
					score*=1.5
				else
					score*=0.7
				end
				if opponent.effects[PBEffects::TwoTurnAttack]!=0 || opponent.effects[PBEffects::HyperBeam]>0
					score*=2
				end          
				if @doublebattle
					score*=0.5
				end
			else
				#score*=2
				if attacker.hasWorkingAbility(:UNBURDEN)
					score*=1.5
				end
			end 
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>40
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end      
			if maxdam*4<attacker.hp
				miniscore*=1.2
			else
				if move.basedamage==0 
					miniscore*=0.8
					if maxdam>attacker.hp
						miniscore*=0.1
					end
				end
			end                  
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.3
			end
			if movecheck
				miniscore*=0.5
			end          
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end
			miniscore/=100.0
			score*=miniscore
			miniscore=100
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end    
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end        
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.priority>0
					end  
					miniscore*=0.6 if movecheck     
				end            
			end    
			miniscore/=100.0
			if !attacker.pbTooHigh?(PBStats::SPATK)
				score*=miniscore
			end
			miniscore=100 
			if attacker.effects[PBEffects::Toxic]>0
				miniscore*=0.2
			end        
			if pbRoughStat(opponent,PBStats::ATTACK,skill)<pbRoughStat(opponent,PBStats::SPATK,skill)
				miniscore*=1.3
			end        
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				miniscore*=1.3
			end
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
				miniscore*=1.2
			end
			healmove=false
			for j in attacker.moves
				if j.isHealingMove?
					healmove=true
				end
			end
			if healmove
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				miniscore*=1.3
			end
			if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
				miniscore*=1.2
			end        
			miniscore/=100.0
			if !attacker.pbTooHigh?(PBStats::SPDEF)
				score*=miniscore
			end
			miniscore=100 
			if attacker.stages[PBStats::SPATK]<0            
				ministat=attacker.stages[PBStats::SPATK]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end        
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				miniscore*=0.8          
			end
			if @trickroom!=0
				miniscore*=0.2
			else
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
						end  
						miniscore*=0.2 if movecheck     
					end            
				end  
			end        
			miniscore/=100.0
			if !attacker.pbTooHigh?(PBStats::SPEED)
				score*=miniscore=0
			end
			if attacker.hasWorkingAbility(:CONTRARY)
				score*=0
			end
			if attacker.pbTooHigh?(PBStats::SPATK) && attacker.pbTooHigh?(PBStats::SPDEF) && attacker.pbTooHigh?(PBStats::SPEED)
				score*=0
			end
		when 0x148 # Venom Drench
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			if opponent.status==PBStatuses::POISON
				if (!opponent.pbCanReduceStatStageAI?(PBStats::ATTACK) && !opponent.pbCanReduceStatStageAI?(PBStats::SPATK)) || (opponent.stages[PBStats::ATTACK]==-6 && opponent.stages[PBStats::SPATK]==-6) || (opponent.stages[PBStats::ATTACK]>0 && opponent.stages[PBStats::SPATK]>0) || theresone
					score*=0.5
				else
					miniscore=100
					if roles.include?("Physical Wall") || roles.include?("Special Wall")
						miniscore=1.4
					end
					sweepvar = false
					for i in pbParty(attacker.index)
						next if i.nil?
						temprole = pbGetMonRole(i,opponent,skill,count,pbParty(attacker.index))
						if temprole.include?("Sweeper")
							sweepvar = true
						end
					end  
					if sweepvar 
						miniscore*=1.1
					end
					if attacker.hasWorkingAbility(:SHADOWTAG) || attacker.hasWorkingAbility(:ARENATRAP) || opponent.effects[PBEffects::MeanLook]>=0 ||  opponent.pbNonActivePokemonCount==0
						miniscore*=1.5
					end
					ministat=0          
					ministat+=opponent.stages[PBStats::ATTACK] if opponent.stages[PBStats::ATTACK]<0
					ministat+=opponent.stages[PBStats::DEFENSE] if opponent.stages[PBStats::DEFENSE]<0
					ministat+=opponent.stages[PBStats::SPEED] if opponent.stages[PBStats::SPEED]<0
					ministat+=opponent.stages[PBStats::SPATK] if opponent.stages[PBStats::SPATK]<0
					ministat+=opponent.stages[PBStats::SPDEF] if opponent.stages[PBStats::SPDEF]<0
					ministat+=opponent.stages[PBStats::EVASION] if opponent.stages[PBStats::EVASION]<0
					ministat*=(5)
					ministat+=100
					ministat/=100.0
					miniscore*=ministat  
					if attacker.pbHasMove?(getID(PBMoves,:FOULPLAY))
						miniscore*=0.5
					end
					miniscore/=100.0
					score*=miniscore
				end  
				if (pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) || opponent.stages[PBStats::SPEED]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::SPEED) || theresone
					score*=0.5
				else
					miniscore=100            
					if opponent.hasWorkingAbility(:SPEEDBOOST)
						miniscore*=0.9
					end
					if attacker.pbHasMove?(getID(PBMoves,:ELECTROBALL))
						miniscore*=1.5
					end  
					if opponent.pbHasMove?(getID(PBMoves,:GYROBALL))
						miniscore*=1.5
					end   
					if @trickroom!=0
						miniscore*=0.1
					else
						if skill>=PBTrainerAI.bestSkill
							if @aiMoveMemory[2][opponent.pokemonIndex].length>0
								movecheck=false
								for j in @aiMoveMemory[2][opponent.pokemonIndex]
									movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
								end  
								miniscore*=0.1 if movecheck            
							end
						elsif skill>=PBTrainerAI.highSkill
							if @aiMoveMemory[1].length>0
								movecheck=false
								for j in @aiMoveMemory[1]
									movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
								end  
								miniscore*=0.1 if movecheck     
							end
						elsif skill>=PBTrainerAI.mediumSkill
							if @aiMoveMemory[0].length>0
								movecheck=false
								for j in @aiMoveMemory[0]
									movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
								end  
								miniscore*=0.1 if movecheck     
							end            
						end  
					end   
					if opponent.hasWorkingItem(:LAGGINGTAIL) || opponent.hasWorkingItem(:IRONBALL)
						miniscore*=0.8
					end
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
							end  
							miniscore*=1.3 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
							end  
							miniscore*=1.3 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
							end  
							miniscore*=1.3 if movecheck     
						end            
					end  
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:GYROBALL)
							end  
							miniscore*=0.5 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:GYROBALL)
							end  
							miniscore*=0.5 if movecheck 
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:GYROBALL)
							end  
							miniscore*=0.5 if movecheck 
						end            
					end                          
					miniscore/=100.0    
					score*=miniscore
					if attacker.pbNonActivePokemonCount==0
						score*=0.5
					end
					if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:CONTRARY) || opponent.hasWorkingAbility(:DEFIANT)
						score*=0
					end
				end
			else
				score*=0
			end
		when 0x156 # Spiky Shield
			if opponent.turncount==0
				score*=1.5
			end        
			if opponent.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || opponent.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || opponent.pbHasMove?(getID(PBMoves,:CALMMIND)) || opponent.pbHasMove?(getID(PBMoves,:WORKUP)) || opponent.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || opponent.pbHasMove?(getID(PBMoves,:TAILGLOW)) || opponent.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || opponent.pbHasMove?(getID(PBMoves,:BULKUP)) || opponent.pbHasMove?(getID(PBMoves,:COIL)) || opponent.pbHasMove?(getID(PBMoves,:CURSE)) || opponent.pbHasMove?(getID(PBMoves,:GROWTH)) || opponent.pbHasMove?(getID(PBMoves,:HONECLAWS)) || opponent.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || opponent.pbHasMove?(getID(PBMoves,:SHELLSMASH))
				score*=0.3
			end 
			if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON)) || attacker.effects[PBEffects::Ingrain] || attacker.effects[PBEffects::AquaRing]
				score*=1.2
			end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN        
				score*=1.2
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if attacker.status==PBStatuses::POISON || attacker.status==PBStatuses::BURN        
				score*=0.7
				if attacker.effects[PBEffects::Toxic]>0
					score*=0.3
				end
			end
			if opponent.effects[PBEffects::LeechSeed]>=0
				score*=1.3
			end
			if opponent.effects[PBEffects::PerishSong]!=0
				score*=2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				score*=0.3
			end
			if opponent.vanished
				score*=2
				if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.5
				end
			end
			if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
				score*=4
				#experimental -- cancels out drop if killing moves       
				if initialscores.length>0    
					greatmoves=false       
					for i in 0...initialscores.length      
						next if i==scoreindex    
						if initialscores[i]>=100     
							greatmoves=true    
						end      
					end            
					score*=6 if greatmoves     
				end      
				#end experimental
			else
				score*=0.8
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
					end  
					score*=0.1 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
					end  
					score*=0.1 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:FEINT) || j.id==getID(PBMoves,:SHADOWFORCE) || j.id==getID(PBMoves,:PHANTOMFORCE)
					end  
					score*=0.1 if movecheck     
				end            
			end  
			if attacker.effects[PBEffects::Wish]>0
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						maxdam=0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>attacker.hp
							score*=3
						else
							score*=1.4
						end                
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						maxdam=0
						for j in @aiMoveMemory[1]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>attacker.hp
							score*=3
						else
							score*=1.4
						end                             
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						maxdam=0
						for j in @aiMoveMemory[0]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end  
						if maxdam>attacker.hp
							score*=3
						else
							score*=1.4
						end        
					end          
				end  
			end  
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					contactcheck=false
					maxdam=0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]                 
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							contactcheck=j.isContactMove?
						end              
					end  
					if contactcheck
						score*=1.3
					end                
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					contactcheck=false
					maxdam=0
					for j in @aiMoveMemory[1]                 
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							contactcheck=j.isContactMove?
						end              
					end  
					if contactcheck
						score*=1.3
					end                            
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					contactcheck=false
					maxdam=0
					for j in @aiMoveMemory[0]                 
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam
							maxdam=tempdam 
							contactcheck=j.isContactMove?
						end              
					end  
					if contactcheck
						score*=1.3
					end        
				end          
			end          
			if attacker.status==0
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:WILLOWISP) || j.id==getID(PBMoves,:THUNDERWAVE) || j.id==getID(PBMoves,:TOXIC)
						end  
						score*=0.7 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:WILLOWISP) || j.id==getID(PBMoves,:THUNDERWAVE) || j.id==getID(PBMoves,:TOXIC)
						end  
						score*=0.7 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:WILLOWISP) || j.id==getID(PBMoves,:THUNDERWAVE) || j.id==getID(PBMoves,:TOXIC)
						end  
						score*=0.7 if movecheck     
					end            
				end  
			end
			if (attacker.hasWorkingItem(:TOXICORB) || attacker.hasWorkingItem(:FLAMEORB)) && 
				attacker.turncount<1
				score*=2
			end
			if attacker.effects[PBEffects::ProtectRate]>1
				score/=(attacker.effects[PBEffects::ProtectRate]*4.0).to_f
			end
		when 0x155 # Sticky Web
			if !attacker.pbOpposingSide.effects[PBEffects::StickyWeb]
				if roles.include?("Lead")
					score*=1.3
				end
				if attacker.hasWorkingItem(:FOCUSSASH) && attacker.hp==attacker.totalhp
					score*=1.3
				end
				if attacker.turncount<2
					score*=1.3
				end
				if opponent.pbNonActivePokemonCount>1
					miniscore = opponent.pbNonActivePokemonCount
					miniscore/=100.0
					miniscore*=0.3
					miniscore+=1
					score*=miniscore
				else
					score*0.2
				end
				if skill>=PBTrainerAI.bestSkill
					for k in 0...pbParty(opponent.index).length
						next if pbParty(opponent.index)[k].nil?
						if @aiMoveMemory[2][k].length>0
							movecheck=false
							for j in @aiMoveMemory[2][k]
								movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
							end  
							score*=0.3 if movecheck     
						end
					end          
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
						end  
						score*=0.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:DEFOG) || j.id==getID(PBMoves,:RAPIDSPIN)
						end  
						score*=0.3 if movecheck   
					end            
				end
			else
				score*=0
			end
		when 0x154 # Topsy-Turvy
			ministat=0          
			ministat+=opponent.stages[PBStats::ATTACK] 
			ministat+=opponent.stages[PBStats::DEFENSE]
			ministat+=opponent.stages[PBStats::SPEED] 
			ministat+=opponent.stages[PBStats::SPATK] 
			ministat+=opponent.stages[PBStats::SPDEF] 
			ministat+=opponent.stages[PBStats::EVASION]
			ministat*=10
			ministat+=100
			if ministat<0
				ministat=0
			end
			ministat/=100.0
			score*=ministat
			#~ effcheck = PBTypes.getCombinedEffectiveness(opponent.type1,attacker.type1,attacker.type2)
			#~ if effcheck>4
			#~ score*=2
			#~ else
			#~ if effcheck!=0 && effcheck<4
			#~ score*=0.5
			#~ end
			#~ if effcheck==0
			#~ score*=0.1
			#~ end
			#~ end
			#~ effcheck = PBTypes.getCombinedEffectiveness(opponent.type2,attacker.type1,attacker.type2)
			#~ if effcheck>4
			#~ score*=2
			#~ else
			#~ if effcheck!=0 && effcheck<4
			#~ score*=0.5
			#~ end
			#~ if effcheck==0
			#~ score*=0.1
			#~ end
			#~ end
			#~ effcheck = PBTypes.getCombinedEffectiveness(attacker.type1,opponent.type1,opponent.type2)
			#~ if effcheck>4
			#~ score*=0.5
			#~ else
			#~ if effcheck!=0 && effcheck<4
			#~ score*=2
			#~ end
			#~ if effcheck==0
			#~ score*=3
			#~ end
			#~ end
			#~ effcheck = PBTypes.getCombinedEffectiveness(attacker.type2,opponent.type1,opponent.type2)
			#~ if effcheck>4
			#~ score*=0.5
			#~ else
			#~ if effcheck!=0 && effcheck<4
			#~ score*=2
			#~ end
			#~ if effcheck==0
			#~ score*=3
			#~ end
			#~ end       
		when 0x144 # Forest's Curse
			grassvar = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						grassvar = true if isConst?(m.type,PBTypes,:GRASS)
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						grassvar = true if isConst?(m.type,PBTypes,:GRASS)
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						grassvar = true if isConst?(m.type,PBTypes,:GRASS)
					end                    
				end          
			end 
			effmove = false
			for m in attacker.moves
				if isConst?(m.type,PBTypes,:FIRE) || isConst?(m.type,PBTypes,:ICE) || isConst?(m.type,PBTypes,:BUG) || isConst?(m.type,PBTypes,:FLYING) || isConst?(m.type,PBTypes,:POISON)
					effmove = true
					break
				end
			end        
			if effmove
				score*=1.5
			else
				score*=0.7
			end        
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				if attacker.pbHasMove?(getID(PBMoves,:TOXIC)) && (opponent.pbHasType?(:STEEL) || opponent.pbHasType?(:POISON))
					score*=1.5
				end
			end
			if grassvar
				score*=0.5
			else
				score*=1.1
			end
			if isConst?(opponent.ability,PBAbilities,:MULTITYPE) || (opponent.type1==getConst(PBTypes,:GRASS) && opponent.type2==getConst(PBTypes,:GRASS)) || opponent.hasWorkingAbility(:PROTEAN) || opponent.hasWorkingAbility(:COLORCHANGE)
				score*=0
			end       
		when 0x145 # Trick or Treat
			ghostvar = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						ghostvar = true if isConst?(m.type,PBTypes,:GHOST)
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						ghostvar = true if isConst?(m.type,PBTypes,:GHOST)
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						ghostvar = true if isConst?(m.type,PBTypes,:GHOST)
					end                    
				end          
			end 
			effmove = false
			for m in attacker.moves
				if isConst?(m.type,PBTypes,:DARK) || isConst?(m.type,PBTypes,:GHOST)
					effmove = true
					break
				end
			end        
			if effmove
				score*=1.5
			else
				score*=0.7
			end        
			if roles.include?("Physical Wall") || roles.include?("Special Wall")
				if attacker.pbHasMove?(getID(PBMoves,:TOXIC)) && (opponent.pbHasType?(:STEEL) || opponent.pbHasType?(:POISON))
					score*=1.5
				end
			end
			if ghostvar
				score*=0.5
			else
				score*=1.1
			end
			if isConst?(opponent.ability,PBAbilities,:MULTITYPE) || (opponent.type1==getConst(PBTypes,:GHOST) && opponent.type2==getConst(PBTypes,:GHOST)) || opponent.hasWorkingAbility(:PROTEAN) || opponent.hasWorkingAbility(:COLORCHANGE)
				score*=0
			end
			#~ when 0x145 # Fairy Lock
			#~ if attacker.effects[PBEffects::PerishSong]==1 || attacker.effects[PBEffects::PerishSong]==2
			#~ score*=0
			#~ else
			#~ if opponent.effects[PBEffects::PerishSong]==2
			#~ score*=10
			#~ end
			#~ if opponent.effects[PBEffects::PerishSong]==1
			#~ score*=20
			#~ end
			#~ if attacker.effects[PBEffects::LeechSeed]>=0
			#~ score*=0.8
			#~ end
			#~ if opponent.effects[PBEffects::LeechSeed]>=0
			#~ score*=1.2
			#~ end
			#~ if opponent.effects[PBEffects::Curse]
			#~ score*=1.3
			#~ end
			#~ if attacker.effects[PBEffects::Curse]
			#~ score*=0.7
			#~ end
			#~ if opponent.effects[PBEffects::Confusion]>0
			#~ score*=1.1
			#~ end
			#~ if attacker.effects[PBEffects::Confusion]>0
			#~ score*=1.1
			#~ end
			#~ end
		when 0x159 # Magnetic Flux
			maxdam=0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]              
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]                
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end                    
				end          
			end 
			if !(attacker.hasWorkingAbility(:PLUS) || attacker.hasWorkingAbility(:MINUS) || attacker.pbPartner.hasWorkingAbility(:PLUS) || attacker.pbPartner.hasWorkingAbility(:MINUS))
				score*=0
			else
				if attacker.hasWorkingAbility(:PLUS) || attacker.hasWorkingAbility(:MINUS)
					miniscore=100
					if attacker.effects[PBEffects::Substitute]>0
						miniscore*=1.3
					end
					if initialscores.length>0
						badmoves=true
						for i in 0...initialscores.length
							next if i==scoreindex
							if initialscores[i]>20
								badmoves=false
							end
						end
						miniscore*=1.3 if badmoves
					end   
					if (attacker.hp.to_f)/attacker.totalhp>0.75
						miniscore*=1.1
					end 
					if opponent.effects[PBEffects::HyperBeam]>0
						miniscore*=1.2
					end
					if opponent.effects[PBEffects::Yawn]>0
						miniscore*=1.3
					end
					if maxdam < 0.3*attacker.hp
						miniscore*=1.1
					end            
					if attacker.turncount<2
						miniscore*=1.1
					end
					if opponent.status!=0
						miniscore*=1.1
					end
					if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
						miniscore*=1.3
					end
					if opponent.effects[PBEffects::Encore]>0
						if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
							miniscore*=1.3
						end          
					end  
					if attacker.effects[PBEffects::Confusion]>0
						miniscore*=0.5
					end
					if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
						miniscore*=0.3
					end
					if attacker.effects[PBEffects::Toxic]>0
						miniscore*=0.2
					end
					if movecheck
						miniscore*=0.2
					end            
					if opponent.hasWorkingAbility(:UNAWARE)
						miniscore*=0.5
					end        
					if @doublebattle
						miniscore*=0.3
					end
					if maxdam<0.12*attacker.hp
						miniscore*=0.2
					end
					score*=miniscore
					miniscore=100
					if roles.include?("Physical Wall") || roles.include?("Special Wall")
						miniscore*=1.5
					end
					if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON))
						miniscore*=1.2
					end
					healmove=false
					for j in attacker.moves
						if j.isHealingMove?
							healmove=true
						end
					end
					if healmove
						miniscore*=1.7
					end
					if attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
						miniscore*=1.3
					end
					if attacker.pbHasMove?(getID(PBMoves,:PAINSPLIT))
						miniscore*=1.2
					end        
					if attacker.stages[PBStats::SPDEF]!=6 && attacker.stages[PBStats::DEFENSE]!=6
						score*=miniscore   
					end
				elsif @doublebattle && attacker.pbPartner.stages[PBStats::SPDEF]!=6 && attacker.pbPartner.stages[PBStats::DEFENSE]!=6 
					score*=0.7
					if initialscores.length>0
						badmoves=true
						for i in 0...initialscores.length
							next if i==scoreindex
							if initialscores[i]>20
								badmoves=false
							end
						end
						score*=1.3 if badmoves
					end 
					if attacker.pbPartner.hp >= attacker.pbPartner.totalhp*0.75
						score*=1.1
					end
					if attacker.pbPartner.effects[PBEffects::Yawn]>0 || attacker.pbPartner.effects[PBEffects::LeechSeed]>=0 || attacker.pbPartner.effects[PBEffects::Attract]>=0 || attacker.pbPartner.status!=0 
						score*=0.3
					end
					if movecheck
						score*=0.3
					end
					if opponent.hasWorkingAbility(:UNAWARE)
						score*=0.5
					end 
					if attacker.pbPartner.hasWorkingItem(:LEFTOVERS) || (attacker.pbPartner.hasWorkingItem(:BLACKSLUDGE) && attacker.pbPartner.pbHasType?(:POISON))
						score*=1.2
					end
				else
					score*=0
				end          
			end        
			#~ when 0x147 # Fell Stinger
			#~ if attacker.stages[PBStats::ATTACK]!=6
			#~ if score>=100
			#~ score*=2
			#~ if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
			#~ score*=2
			#~ end
			#~ end
			#~ end        
		when 0x153 # Ion Deluge
			maxdam=0
			maxtype = -1
			sleepcheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]    
						# sleepcheck = true if j.function==0x03
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
							maxtype = j.type
						end              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]  
						#sleepcheck = true if j.function==0x03
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
							maxtype = j.type
						end 
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						#sleepcheck = true if j.function==0x03
						if tempdam>maxdam              
							maxdam=tempdam 
							maxtype = j.type
						end             
					end                    
				end          
			end 
			if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				score*=1.2
			else
				score*=0.9
			end
			if attacker.hasWorkingAbility(:MOTORDRIVE) || attacker.hasWorkingAbility(:LIGHTNINGROD) || attacker.hasWorkingAbility(:VOLTABSORB)
				score*=1.3
			end
			if attacker.pbHasType?(:GROUND)
				score*=1.1
			end
			if @doublebattle
				if attacker.pbPartner.hasWorkingAbility(:MOTORDRIVE) || attacker.pbPartner.hasWorkingAbility(:LIGHTNINGROD) || attacker.pbPartner.hasWorkingAbility(:VOLTABSORB)
					score*=1.2
				end
				if attacker.pbPartner.pbHasType?(:GROUND)
					score*=1.1
				end
			end
			if maxtype = getConst(PBTypes,:NORMAL)
				score*=1.5
			else
				score*=0.5
			end
			miniscore = getFieldDisruptScore(attacker,opponent,skill)
			if attacker.pbHasType?(:ELECTRIC)
				miniscore*=1.5
			end
			elecvar=false
			for mon in pbParty(attacker.index) 
				next if mon.nil?
				if mon.hasType?(:ELECTRIC)
					elecvar=true
				end  
			end
			if elecvar
				miniscore*=2
			end
			if opponent.pbHasType?(:ELECTRIC)
				miniscore*=0.5
			end
			for m in attacker.moves
				if m.function==0x03
					miniscore*=0.5
					break
				end
			end
			if sleepcheck
				miniscore*=2
			end
			if attacker.hasWorkingItem(:AMPLIFIELDROCK)
				miniscore*=2
			end
			score*=miniscore    
		when 0x137 # Crafty Shield
			maxdam=0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]    
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
						end              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]  
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
						end               
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
						end                          
					end                    
				end          
			end 
			if attacker.lastMoveUsed==615
				score*=0.5
			else
				nodam = true
				for m in opponent.moves
					if m.basedamage>0
						nodam=false
						break
					end
				end
				if nodam
					score+=10
				end
				if attacker.hp==attacker.totalhp
					score*=1.5
				end          
			end       
			#~ when 0x14A # Doesn't exist
			#~ when 0x14B # Doesn't exist
			#~ when 0x14C # Doesn't exist
			#~ when 0x14D # Doesn't exist
			#~ when 0x14E # Doesn't exist
			#~ when 0x14F # Doesn't exist
		when 0x143 # Flower Shield
			maxdam=0
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]    
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
						end              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]  
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
						end               
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
						end                          
					end                    
				end          
			end 
			opp1 = attacker.pbOppositeOpposing
			opp2 = opp1.pbPartner
			if @doublebattle && opponent.pbHasType?(:GRASS) && opponent==attacker.pbPartner && opponent.stages[PBStats::DEFENSE]!=6
				if opp1.attack>opp1.spatk
					score*=2
				else
					score*=0.5
				end
				if opp2.attack>opp2.spatk
					score*=2
				else
					score*=0.5
				end
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>20
							badmoves=false
						end
					end
					score*=1.3 if badmoves
				end   
				if (opponent.hp.to_f)/opponent.totalhp>0.75
					score*=1.1
				end          
				if opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Attract]>=0 || opponent.status!=0 || opponent.effects[PBEffects::Yawn]>0            
					score*=0.3
				end   
				if movecheck
					score*=0.2
				end          
				if opponent.hasWorkingAbility(:SIMPLE)
					score*=2
				end
				if opp1.hasWorkingAbility(:UNAWARE)
					score*=0.5
				end 
			else
				score*=0
			end                           
		when 0x157 # Rototiller
			maxdam=0
			movecheck = false
			healcheck = false
			pricheck = false
			foulcheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex] 
						healcheck=true if j.isHealingMove?
						pricheck=true if j.priority>0
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						foulcheck=true if j.id==getID(PBMoves,:FOULPLAY)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
						end              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]  
						healcheck=true if j.isHealingMove?
						pricheck=true if j.priority>0
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						foulcheck=true if j.id==getID(PBMoves,:FOULPLAY)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
						end               
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0] 
						healcheck=true if j.isHealingMove?
						pricheck=true if j.priority>0
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
						foulcheck=true if j.id==getID(PBMoves,:FOULPLAY)
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
						end                          
					end                    
				end          
			end 
			opp1 = attacker.pbOppositeOpposing
			opp2 = opp1.pbPartner
			if @doublebattle && opponent.pbHasType?(:GRASS) && opponent==attacker.pbPartner && opponent.stages[PBStats::SPATK]!=6 && opponent.stages[PBStats::ATTACK]!=6
				if initialscores.length>0
					badmoves=true
					for i in 0...initialscores.length
						next if i==scoreindex
						if initialscores[i]>20
							badmoves=false
						end
					end
					score*=1.3 if badmoves
				end   
				if (opponent.hp.to_f)/opponent.totalhp>0.75
					score*=1.1
				end          
				if opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Attract]>=0 || opponent.status!=0 || opponent.effects[PBEffects::Yawn]>0            
					score*=0.3
				end   
				if movecheck
					score*=0.2
				end          
				if opponent.hasWorkingAbility(:SIMPLE)
					score*=2
				end
				if opp1.hasWorkingAbility(:UNAWARE)
					score*=0.5
				end 
				if opponent.hasWorkingAbility(:CONTRARY)
					score*=0
				end          
			else
				score*=0
			end
		when 0x161 # Powder
			maxdam=0
			maxtype = -1
			firecheck = false
			movecount = 0
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex] 
						movecount+=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
							maxtype = j.type
						end 
						if j.type == getConst(PBTypes,:FIRE)
							firecheck = true
						end              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1] 
						movecount+=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
							maxtype = j.type
						end 
						if j.type == getConst(PBTypes,:FIRE)
							firecheck = true
						end 
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecount+=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
							maxtype = j.type
						end 
						if j.type == getConst(PBTypes,:FIRE)
							firecheck = true
						end             
					end                    
				end          
			end 
			if !(opponent.pbHasType?(:GRASS) || opponent.hasWorkingAbility(:OVERCOAT) || opponent.hasWorkingItem(:SAFETYGOGGLES))
				if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.2
				end
				if maxtype == getConst(PBTypes,:FIRE)
					score*=3
				else
					if opponent.pbHasType?(:FIRE)
						score*=2
					else
						score*=0.2
					end
				end
				effcheck = PBTypes.getCombinedEffectiveness(getConst(PBTypes,:FIRE),attacker.type1,attacker.type2,attacker.type3)
				if effcheck>4
					score*=2
					if effcheck>8
						score*=2
					end
				end
				if attacker.lastMoveUsed==601
					score*=0.6
				end        
				if opponent.hasWorkingAbility(:MAGICGUARD)
					score*=0.5
				end
				if !firecheck && movecount==4
					score*=0
				end   
			else
				score*=0
			end   
		when 0x142 # Electrify
			pricheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex] 
						pricheck=true if j.priority>0            
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]  
						pricheck=true if j.priority>0              
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]               
						pricheck=true if j.priority>0                              
					end                    
				end          
			end 
			startscore = score
			if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
				if attacker.hasWorkingAbility(:VOLTABSORB)
					if attacker.hp<attacker.totalhp*0.8
						score*=1.5
					else
						score*=0.1
					end
				end          
				if attacker.hasWorkingAbility(:LIGHTNINGROD)
					if attacker.stages[PBStats::ATTACK]!=6 || attacker.stages[PBStats::SPATK]!=6
						score*=1.5
					else
						score*=0.1
					end
				end
				if attacker.hasWorkingAbility(:MOTORDRIVE)
					if attacker.stages[PBStats::SPEED]!=6
						score*=1.2
					else
						score*=0.1
					end
				end
				if attacker.pbHasType?(:GROUND)
					score*=1.3
				end
				if score==startscore
					score*=0.1
				end
				if pricheck
					score*=0.5
				end
			else
				score*=0
			end        
		when 0x158 # Mat Block
			healcheck=false
			setupcheck=false
			movecheck = false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:FEINT) ||  j.id==getID(PBMoves,:PHANTOMFORCE) || j.id==getID(PBMoves,:SHADOWFORCE)
						healcheck=true if j.isHealingMove?
						setupcheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))              
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:FEINT) ||  j.id==getID(PBMoves,:PHANTOMFORCE) || j.id==getID(PBMoves,:SHADOWFORCE)
						healcheck=true if j.isHealingMove?
						setupcheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))              
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecheck=true if j.id==getID(PBMoves,:FEINT) ||  j.id==getID(PBMoves,:PHANTOMFORCE) || j.id==getID(PBMoves,:SHADOWFORCE)
						healcheck=true if j.isHealingMove?
						setupcheck=true if (j.id==getID(PBMoves,:SWORDSDANCE) || j.id==getID(PBMoves,:DRAGONDANCE) || j.id==getID(PBMoves,:CALMMIND) || j.id==getID(PBMoves,:WORKUP) || j.id==getID(PBMoves,:NASTYPLOT) || j.id==getID(PBMoves,:TAILGLOW) || j.id==getID(PBMoves,:BELLYDRUM) || j.id==getID(PBMoves,:BULKUP) || j.id==getID(PBMoves,:COIL) || j.id==getID(PBMoves,:CURSE) || j.id==getID(PBMoves,:GROWTH) || j.id==getID(PBMoves,:HONECLAWS) || j.id==getID(PBMoves,:QUIVERDANCE) || j.id==getID(PBMoves,:SHELLSMASH))              
					end                    
				end          
			end 
			if attacker.turncount==0
				if @doublebattle
					score*=1.3
					if ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && ((attacker.pbSpeed>pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0))
						score*=1.2
					else
						score*=0.7
						if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && ((attacker.pbSpeed<pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0))
							score*=0
						end
					end
					if setupcheck && healcheck
						score*=0.3
					end
					if attacker.hasWorkingItem(:LEFTOVERS) || (attacker.hasWorkingItem(:BLACKSLUDGE) && attacker.pbHasType?(:POISON)) || attacker.effects[PBEffects::Ingrain] || attacker.effects[PBEffects::AquaRing]
						score*=1.2
					end
					if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN        
						score*=1.2
						if opponent.effects[PBEffects::Toxic]>0
							score*=1.3
						end
					end
					if attacker.status==PBStatuses::POISON || attacker.status==PBStatuses::BURN        
						score*=0.7
						if attacker.effects[PBEffects::Toxic]>0
							score*=0.3
						end
					end
					if opponent.effects[PBEffects::LeechSeed]>=0
						score*=1.3
					end
					if opponent.effects[PBEffects::PerishSong]!=0
						score*=2
					end
					if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
						score*=0.3
					end
					if opponent.vanished
						score*=2
						if (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0) 
							score*=1.5
						end
					end
					if movecheck
						score*=0.1
					end          
					if attacker.effects[PBEffects::Wish]>0
						score*=1.3
					end
				end
			else
				score*=0
			end
			if (attacker.hasWorkingItem(:TOXICORB) || attacker.hasWorkingItem(:FLAMEORB)) && 
				attacker.turncount<1
				score*=2
			end
		when 0x163  # Subduction
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresone=true
				end
			end
			livecount1=0
			thisinitial = score
			for i in pbParty(opponent.index)
				next if i.nil?
				livecount1+=1 if i.hp!=0
			end
			livecount2=0
			for i in pbParty(attacker.index)
				next if i.nil?
				livecount2+=1 if i.hp!=0
			end
			if !attacker.hasWorkingAbility(:OWNTEMPO) || !theresone || @field.effects[PBEffects::MistyTerrain]==0
				if thisinitial<100
					score*=0.7
				end
				if attacker.hasWorkingItem(:LUMBERRY) || attacker.hasWorkingItem(:PERSIMBERRY)
					score*=1.3
				end
				if attacker.stages[PBStats::ATTACK]>0
					miniscore = (-5)*attacker.stages[PBStats::ATTACK]
					miniscore+=100
					miniscore/=100.0
					score*=miniscore
				end
				if livecount1>2
					miniscore=100
					miniscore*=(livecount1-1)
					miniscore*=0.01
					miniscore*=0.05
					miniscore=1-miniscore
					score*=miniscore
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.7 if movecheck     
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.7 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.isHealingMove?
						end  
						score*=0.7 if movecheck     
					end            
				end
			end
			if ((pbRoughStat(opponent,PBStats::SPEED,skill)<attacker.pbSpeed) ^ (@trickroom!=0)) || opponent.stages[PBStats::SPEED]>0 || !opponent.pbCanReduceStatStageAI?(PBStats::SPEED)
				if move.basedamage==0
					score=0
				end
			else
				miniscore=100
				if roles.include?("Physical Wall") || roles.include?("Special Wall")
					miniscore*=1.1
				end
				livecount1=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if livecount2==1 || attacker.hasWorkingAbility(:SHADOWTAG) || opponent.effects[PBEffects::MeanLook]>0
					miniscore*=1.4
				end
				if opponent.stages[PBStats::SPEED]<0
					minimini = 5*opponent.stages[PBStats::SPEED]
					minimini+=100
					minimini/=100.0
					miniscore*=minimini
				end       
				if livecount1==1 && move.basedamage==0
					miniscore*=0.5
				end
				if opponent.hasWorkingAbility(:UNAWARE) || opponent.hasWorkingAbility(:COMPETITIVE) || opponent.hasWorkingAbility(:DEFIANT) || opponent.hasWorkingAbility(:CONTRARY)
					miniscore*=0.1
				end
				if opponent.hasWorkingAbility(:SPEEDBOOST)
					miniscore*=0.8
				end
				if attacker.pbHasMove?(getID(PBMoves,:ELECTROBALL))
					miniscore*=1.5
				end  
				if attacker.pbHasMove?(getID(PBMoves,:GYROBALL))
					miniscore*=0.5
				end   
				if @trickroom!=0
					miniscore*=0.1
				else
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent.pokemonIndex].length>0
							movecheck=false
							for j in @aiMoveMemory[2][opponent.pokemonIndex]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							miniscore*=0.1 if movecheck            
						end
					elsif skill>=PBTrainerAI.highSkill
						if @aiMoveMemory[1].length>0
							movecheck=false
							for j in @aiMoveMemory[1]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							miniscore*=0.1 if movecheck     
						end
					elsif skill>=PBTrainerAI.mediumSkill
						if @aiMoveMemory[0].length>0
							movecheck=false
							for j in @aiMoveMemory[0]
								movecheck=true if j.id==getID(PBMoves,:TRICKROOM)
							end  
							miniscore*=0.1 if movecheck     
						end            
					end  
				end   
				if opponent.hasWorkingItem(:LAGGINGTAIL) || opponent.hasWorkingItem(:IRONBALL)
					miniscore*=0.1
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
						end  
						miniscore*=1.3 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
						end  
						miniscore*=1.3 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:ELECTROBALL)
						end  
						miniscore*=1.3 if movecheck     
					end            
				end  
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:GYROBALL)
						end  
						miniscore*=0.5 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:GYROBALL)
						end  
						miniscore*=0.5 if movecheck 
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:GYROBALL)
						end  
						miniscore*=0.5 if movecheck 
					end            
				end  
				if move.basedamage>0
					miniscore-=100
					miniscore*=(move.addlEffect.to_f/100)
					if attacker.hasWorkingAbility(:SERENEGRACE) && @field.effects[PBEffects::MistyTerrain]==0 && !theresone
						miniscore*=2
					end     
					miniscore+=100
				end          
				miniscore/=100.0    
				score*=miniscore
			end		  		
		when 0x164  # Laser Pulse
			score*=2
		when 0x165  # Caustic Breath	
		when 0x166  # Thunderstorm
			if pbCheckGlobalAbility(:AIRLOCK) ||
				pbCheckGlobalAbility(:CLOUDNINE) ||
				pbCheckGlobalAbility(:DELTASTREAM) ||
				pbCheckGlobalAbility(:DESOLATELAND) ||
				pbCheckGlobalAbility(:PRIMORDIALSEA) ||
				pbWeather==PBWeather::THUNDERSTORM
				score*=0
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				score*=1.3
			end
			if roles.include?("Lead")
				score*=1.2
			end
			#~ if attacker.hasWorkingItem(:SMOOTHROCK)
			#~ score*=1.3
			#~ end
			if pbWeather!=0 && pbWeather!=PBWeather::THUNDERSTORM
				score*=1.5
			end
			if attacker.pbHasType?(:ELECTRIC)
				score*=1.3
			else
				score*=0.7
			end
			if attacker.pbHasMove?(getID(PBMoves,:THUNDER))
				score*=1.5
			end			
		when 0x167  # Fallout
			if pbCheckGlobalAbility(:AIRLOCK) ||
				pbCheckGlobalAbility(:CLOUDNINE) ||
				pbCheckGlobalAbility(:DELTASTREAM) ||
				pbCheckGlobalAbility(:DESOLATELAND) ||
				pbCheckGlobalAbility(:PRIMORDIALSEA) ||
				pbWeather==PBWeather::FALLOUT
				score*=0
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				score*=1.3
			end
			if roles.include?("Lead")
				score*=1.2
			end
			#~ if attacker.hasWorkingItem(:SMOOTHROCK)
			#~ score*=1.3
			#~ end
			if pbWeather!=0 && pbWeather!=PBWeather::FALLOUT
				score*=1.5
			end
			if attacker.pbHasType?(:NUCLEAR)
				score*=1.3
			else
				score*=0.7
			end
			if attacker.pbHasType?(:NUCLEAR)
				score*=1.5
			end
			if attacker.pbHasMove?(getID(PBMoves,:EXPUNGE))
				score*=1.5
			end					
		when 0x168  # Nuclear Wind
			if move.id==getID(PBMoves,:NUCLEARWIND)
				if roles.include?("Lead")
					score*=1.2
				end
				if pbWeather!=0 && pbWeather!=PBWeather::FALLOUT
					score*=1.3
				end	
			end		
		when 0x169 # Shadow Veil        
			if attacker.pbOwnSide.effects[PBEffects::ShadowVeil]<=0
				#~ if attacker.pbOwnSide.effects[PBEffects::ShadowVeil]>0
				#~ score*=0.1
				#~ end
				#~ if attacker.hasWorkingItem(:LIGHTCLAY)
				#~ score*=1.5
				#~ end
				if (attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)
					score*=1.1
					#if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						maxdam=0
						for j in @aiMoveMemory[2][opponent.pokemonIndex]                 
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if maxdam<tempdam
						end  
						if maxdam>attacker.hp && (maxdam/2.0)<attacker.hp
							score*=2
						end                
					end
					#~ elsif skill>=PBTrainerAI.highSkill
					#~ if @aiMoveMemory[1].length>0
					#~ maxdam=0
					#~ for j in @aiMoveMemory[1]                
					#~ tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
					#~ maxdam=tempdam if maxdam<tempdam
					#~ end  
					#~ if maxdam>attacker.hp && (maxdam/2)<attacker.hp
					#~ score*=2
					#~ end                             
					#~ end
					#~ elsif skill>=PBTrainerAI.mediumSkill
					#~ if @aiMoveMemory[0].length>0
					#~ maxdam=0
					#~ for j in @aiMoveMemory[0]                 
					#~ tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
					#~ maxdam=tempdam if maxdam<tempdam
					#~ end  
					#~ if maxdam>attacker.hp && (maxdam/2)<attacker.hp
					#~ score*=2
					#~ end         
					#~ end          
					#~ end  
				end
				if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
					score*=1.3
				end
				if opponent.status==PBStatuses::SLEEP
					score*=10
				end
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0
						movecheck=false
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							movecheck=true if j.id==getID(PBMoves,:DEFOG)
						end  
						score*=0.1 if movecheck            
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0
						movecheck=false
						for j in @aiMoveMemory[1]
							movecheck=true if j.id==getID(PBMoves,:DEFOG)
						end  
						score*=0.1 if movecheck     
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0
						movecheck=false
						for j in @aiMoveMemory[0]
							movecheck=true if j.id==getID(PBMoves,:DEFOG)
						end  
						score*=0.1 if movecheck     
					end            
				end            
			else
				score=0
			end 
		when 0x170 # Chemotherapy 
			if skill>=PBTrainerAI.bestSkill
				#if @aiMoveMemory[2][opponent.pokemonIndex].length>0
				maxdam=0
				for j in opponent.moves#@aiMoveMemory[2][opponent.pokemonIndex]
					tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
					maxdam=tempdam if tempdam>maxdam
				end  
				if maxdam>attacker.hp
					score*=3
				else
					if maxdam*1.5>attacker.hp
						score*=1.5
					end
					if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && !attacker.hasWorkingAbility(:PRANKSTER)
						if maxdam*2>attacker.hp
							score*=2
							#else                  
							#score*=0.2
						end 
					end              
				end
				hplost=(attacker.totalhp-attacker.hp)
				thisdam=maxdam*1.1
				if ((attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && !attacker.hasWorkingAbility(:PRANKSTER)
					hplost+=maxdam
				end
				tickdamage=0
				if attacker.status==PBStatuses::POISON
					tickdamage+=attacker.totalhp/8
				end	
				if attacker.status==PBStatuses::BURN 
					tickdamage+=attacker.totalhp/16
				end
				if attacker.effects[PBEffects::LeechSeed]>=0 
					tickdamage+=attacker.totalhp/8
				end	
				if attacker.effects[PBEffects::Curse]
					tickdamage+=attacker.totalhp/4	
				end
				if attacker.effects[PBEffects::MultiTurn]>0
					tickdamage+=attacker.totalhp/8	
				end
				tickdamage*=1.1
				thisdam+=tickdamage
				livecount1=0
				for i in pbParty(opponent.index)
					next if i.nil?
					livecount1+=1 if i.hp!=0
				end
				livecount2=0
				for i in pbParty(attacker.index)
					next if i.nil?
					livecount2+=1 if i.hp!=0
				end
				if thisdam>hplost
					score*=0.1
				else
					if livecount2==1
						if hplost<(attacker.totalhp*0.55)
							score*=0.01
						end
						#~ else
						#~ if thisdam<(attacker.totalhp*0.55)
						#~ score*=3
						#~ end
					end
					if thisdam<(attacker.totalhp*0.55)
						score*=3
					end
				end
				#end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					maxdam=0
					for j in @aiMoveMemory[1]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=3
					end  
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					maxdam=0
					for j in @aiMoveMemory[0]
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						maxdam=tempdam if tempdam>maxdam
					end  
					if maxdam>attacker.hp
						score*=3
					end        
				end          
			end 
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:HEX)
					end  
					score*=1.3 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:HEX)
					end  
					score*=1.3 if movecheck      
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:HEX)
					end  
					score*=1.3 if movecheck     
				end            
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:HALFLIFE)
					end  
					score*=0 if movecheck && ((attacker.hp.to_f)/attacker.totalhp)>0.49            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:HALFLIFE)
					end  
					score*=0 if movecheck  && ((attacker.hp.to_f)/attacker.totalhp)>0.49    
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:HALFLIFE)
					end  
					score*=0 if movecheck  && ((attacker.hp.to_f)/attacker.totalhp)>0.49    
				end            
			end 
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:AURASPHERE)
					end  
					score*=0 if movecheck && !attacker.hasWorkingItem(:CHOPLEBERRY)            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:AURASPHERE)
					end  
					score*=0 if movecheck  && !attacker.hasWorkingItem(:CHOPLEBERRY)    
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:AURASPHERE)
					end  
					score*=0 if movecheck  && !attacker.hasWorkingItem(:CHOPLEBERRY)    
				end            
			end 
			score*=0.1 if (opponent.pbHasMove?(getID(PBMoves,:AURASPHERE)) || opponent.pbHasMove?(getID(PBMoves,:FOCUSBLAST))) && (!attacker.hasWorkingItem(:CHOPLEBERRY) || (attacker.pbSpeed<pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))
			if opponent.pbHasMove?(getID(PBMoves,:SWORDSDANCE)) || opponent.pbHasMove?(getID(PBMoves,:DRAGONDANCE)) || opponent.pbHasMove?(getID(PBMoves,:CALMMIND)) || opponent.pbHasMove?(getID(PBMoves,:WORKUP)) || opponent.pbHasMove?(getID(PBMoves,:NASTYPLOT)) || opponent.pbHasMove?(getID(PBMoves,:TAILGLOW)) || opponent.pbHasMove?(getID(PBMoves,:BELLYDRUM)) || opponent.pbHasMove?(getID(PBMoves,:BULKUP)) || opponent.pbHasMove?(getID(PBMoves,:COIL)) || opponent.pbHasMove?(getID(PBMoves,:CURSE)) || opponent.pbHasMove?(getID(PBMoves,:GROWTH)) || opponent.pbHasMove?(getID(PBMoves,:HONECLAWS)) || opponent.pbHasMove?(getID(PBMoves,:QUIVERDANCE)) || opponent.pbHasMove?(getID(PBMoves,:SHELLSMASH))
				score*=0.7
			end 
			if (attacker.hp.to_f)/attacker.totalhp<0.5
				score*=1.5
				if attacker.effects[PBEffects::Curse]
					score*=2
				end
				if attacker.hp*4<attacker.totalhp
					if attacker.status==PBStatuses::POISON
						score*=1.5
					end
					if attacker.effects[PBEffects::LeechSeed]>=0
						score*=2
					end
					if attacker.hp<attacker.totalhp*0.13
						if attacker.status==PBStatuses::BURN
							score*=2
						end
						#~ if (pbWeather==PBWeather::HAIL && !attacker.pbHasType?(:ICE)) || (pbWeather==PBWeather::SANDSTORM && !attacker.pbHasType?(:ROCK) && !attacker.pbHasType?(:GROUND) && !attacker.pbHasType?(:STEEL))
						#~ score*=2
						#~ end  
					end            
				end          
			else
				score*=0.7
			end  
			if attacker.effects[PBEffects::Toxic]>0
				score*=0.5
				if attacker.effects[PBEffects::Toxic]>4
					score*=0.5
				end          
			end
			if attacker.status==PBStatuses::PARALYSIS || attacker.effects[PBEffects::Attract]>=0 || attacker.effects[PBEffects::Confusion]>0
				score*=2
			end
			#~ if !(roles.include?("Physical Wall") || roles.include?("Special Wall"))
			#~ score*=0.8
			#~ end
			if opponent.status==PBStatuses::POISON || opponent.status==PBStatuses::BURN || opponent.effects[PBEffects::LeechSeed]>=0 || opponent.effects[PBEffects::Curse]
				score*=1.3
				if opponent.effects[PBEffects::Toxic]>0
					score*=1.3
				end
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck      
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:SUPERPOWER) || j.id==getID(PBMoves,:OVERHEAT) || j.id==getID(PBMoves,:DRACOMETEOR) || j.id==getID(PBMoves,:LEAFSTORM)|| j.id==getID(PBMoves,:PSYCHOBOOST)
					end  
					score*=1.2 if movecheck    
				end            
			end
			if opponent.vanished || opponent.effects[PBEffects::HyperBeam]>0
				score*=1.2
			end
			if (!opponent.pbHasType?(:FIGHTING) || (opponent.pbHasType?(:FIGHTING) && attacker.hasWorkingItem(:CHOPLEBERRY))) && pbWeather==PBWeather::FALLOUT
				score*=2
			else
				score*=0.5
			end
			if pbWeather==PBWeather::FALLOUT
				score*=1.3
			end                  
			if ((attacker.hp.to_f)/attacker.totalhp)>0.8
				score=0
				#~ elsif ((attacker.hp.to_f)/attacker.totalhp)<0.8 && ((attacker.hp.to_f)/attacker.totalhp)>0.6 && ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0))				
				#~ score*=0.3
			elsif ((attacker.hp.to_f)/attacker.totalhp)<0.25
				score*=2
			end     
			if attacker.effects[PBEffects::Wish]>0
				score=0
			end 
		when 0x171 # Stomp Tantrum 		
		when 0x172 # Meteor Beam 
			miniscore=100
			if attacker.effects[PBEffects::Substitute]>0
				miniscore*=1.3
			end
			if initialscores.length>0
				badmoves=true
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>20
						badmoves=false
					end
				end
				miniscore*=1.3 if badmoves
			end   
			if (attacker.hp.to_f)/attacker.totalhp>0.75
				miniscore*=1.2
			end  
			if opponent.effects[PBEffects::HyperBeam]>0
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Yawn]>0
				miniscore*=1.7
			end 
			if attacker.turncount<2
				miniscore*=1.2
			end
			if opponent.status!=0
				miniscore*=1.2
			end
			if opponent.status==PBStatuses::SLEEP || opponent.status==PBStatuses::FROZEN
				miniscore*=1.3
			end
			if opponent.effects[PBEffects::Encore]>0
				if opponent.moves[(opponent.effects[PBEffects::EncoreIndex])].basedamage==0            
					miniscore*=1.5
				end          
			end  
			if attacker.effects[PBEffects::Confusion]>0
				miniscore*=0.5
			end
			if attacker.effects[PBEffects::LeechSeed]>=0 || attacker.effects[PBEffects::Attract]>=0
				miniscore*=0.6
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck            
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.id==getID(PBMoves,:ROAR) || j.id==getID(PBMoves,:WHIRLWIND) || j.id==getID(PBMoves,:CIRCLETHROW) || j.id==getID(PBMoves,:DRAGONTAIL) || j.id==getID(PBMoves,:YAWN)
					end  
					miniscore*=0.5 if movecheck     
				end            
			end  
			if attacker.hasWorkingAbility(:SIMPLE)
				miniscore*=2
			end
			if opponent.hasWorkingAbility(:UNAWARE)
				miniscore*=0.5
			end        
			if @doublebattle
				miniscore*=0.5
			end
			if attacker.stages[PBStats::SPEED]<0
				ministat=attacker.stages[PBStats::SPEED]
				minimini=5*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			ministat=0
			ministat+=opponent.stages[PBStats::ATTACK]
			ministat+=opponent.stages[PBStats::SPATK]
			ministat+=opponent.stages[PBStats::SPEED]
			if ministat>0
				minimini=(-5)*ministat
				minimini+=100
				minimini/=100.0
				miniscore*=minimini
			end
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					movecheck=false
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					movecheck=false
					for j in @aiMoveMemory[1]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					movecheck=false
					for j in @aiMoveMemory[0]
						movecheck=true if j.isHealingMove?
					end  
					miniscore*=1.3 if movecheck     
				end            
			end    
			if attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill) && @trickroom==0
				miniscore*=1.5
			end
			if roles.include?("Sweeper")
				miniscore*=1.3
			end
			if attacker.status==PBStatuses::PARALYSIS
				miniscore*=0.5
			end        
			if attacker.hp==attacker.totalhp && ((attacker.hasWorkingItem(:FOCUSSASH) || (attacker.hasWorkingAbility(:STURDY) && !attacker.moldbroken)) && (pbWeather!=PBWeather::HAIL || attacker.pbHasType?(:ICE)) && (pbWeather!=PBWeather::SANDSTORM || attacker.pbHasType?(:ROCK) || attacker.pbHasType?(:GROUND) || attacker.pbHasType?(:STEEL)))
				miniscore*=1.4
			end
			#~ if skill>=PBTrainerAI.bestSkill
			#~ if @aiMoveMemory[2][opponent.pokemonIndex].length>0
			#~ movecheck=false
			#~ for j in @aiMoveMemory[2][opponent.pokemonIndex]
			#~ movecheck=true if j.priority>0
			#~ end  
			#~ miniscore*=0.6 if movecheck            
			#~ end
			#~ elsif skill>=PBTrainerAI.highSkill
			#~ if @aiMoveMemory[1].length>0
			#~ movecheck=false
			#~ for j in @aiMoveMemory[1]
			#~ movecheck=true if j.priority>0
			#~ end  
			#~ miniscore*=0.6 if movecheck     
			#~ end
			#~ elsif skill>=PBTrainerAI.mediumSkill
			#~ if @aiMoveMemory[0].length>0
			#~ movecheck=false
			#~ for j in @aiMoveMemory[0]
			#~ movecheck=true if j.priority>0
			#~ end  
			#~ miniscore*=0.6 if movecheck     
			#~ end            
			#~ end   
			miniscore+=100
			miniscore/=100.0          
			if attacker.pbTooHigh?(PBStats::SPATK) 
				miniscore=1
			end       
			if attacker.hasWorkingAbility(:CONTRARY)
				miniscore*=0.5
			end          
			score*=miniscore
		when 0x173 # Body Press
		when 0x174 # Jaw Lock
			if attacker.pbHasMove?(getID(PBMoves,:PERISHSONG))
				score*=1.5
			end
			if opponent.effects[PBEffects::PerishSong]>0
				score*=4
			end 
			if opponent.effects[PBEffects::Attract]>=0
				score*=1.3
			end
			if opponent.effects[PBEffects::LeechSeed]>=0
				score*=1.3
			end
			if opponent.effects[PBEffects::Curse]
				score*=1.5
			end 
			if opponent.effects[PBEffects::Confusion]>0
				score*=1.1
			end		
		when 0x175 # Mind Blown 
			maxdam=0
			maxtype = -1
			contactcheck = false
			movecheck = false
			healvar=false
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex]  
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT) || j.id==getID(PBMoves,:BANEFULBUNKER) || j.id==getID(PBMoves,:SPIKYSHIELD)
						healvar=true if j.isHealingMove? 
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
							maxtype = j.type
							contactcheck = j.isContactMove?
						end 
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT) || j.id==getID(PBMoves,:BANEFULBUNKER) || j.id==getID(PBMoves,:SPIKYSHIELD)
						healvar=true if j.isHealingMove? 
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
							maxtype = j.type
						end 
					end              
				end
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]  
						movecheck=true if j.id==getID(PBMoves,:PROTECT) || j.id==getID(PBMoves,:DETECT) || j.id==getID(PBMoves,:BANEFULBUNKER) || j.id==getID(PBMoves,:SPIKYSHIELD)
						healvar=true if j.isHealingMove? 
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
						if tempdam>maxdam              
							maxdam=tempdam 
							maxtype = j.type
						end 
					end                    
				end          
			end 
			startscore = score
			if (!attacker.hasWorkingAbility(:MAGICGUARD) && attacker.hp<attacker.totalhp*0.5) || (attacker.hp<attacker.totalhp*0.75 && (opponent.pbSpeed>attacker.pbSpeed ^ @trickroom!=0)) ||	pbCheckGlobalAbility(:DAMP)
				score*=0.1
				if !attacker.hasWorkingAbility(:MAGICGUARD)
					#score*=0.7
					if startscore < 100
						score*=0.7
					end
					if (attacker.pbSpeed<pbRoughStat(opponent.pbPartner,PBStats::SPEED,skill)) ^ (@trickroom!=0)
						score*=0.5
					end
					if maxdam < attacker.totalhp*0.2
						score*=1.3
					end
					healcheck = false
					for m in attacker.moves 
						healcheck=true if m.isHealingMove? 
						break
					end
					if healcheck
						score*=1.2
					end
					if initialscores.length>0
						badmoves=true
						for i in 0...initialscores.length
							next if i==scoreindex
							if initialscores[i]>25
								badmoves=false
							end
						end
						score*=1.3 if badmoves
					end            
					if movecheck
						score*=0.5
					end
					ministat=0
					ministat+=opponent.stages[PBStats::EVASION]
					minimini=(-10)*ministat
					minimini+=100
					minimini/=100.0
					score*=minimini
					ministat=0
					ministat+=attacker.stages[PBStats::ACCURACY]
					minimini=(10)*ministat
					minimini+=100
					minimini/=100.0
					score*=minimini
					if opponent.hasWorkingItem(:LAXINCENSE) || opponent.hasWorkingItem(:BRIGHTPOWDER)
						score*=0.7
					end
					#~ if (opponent.hasWorkingAbility(:SANDVEIL) && pbWeather==PBWeather::SANDSTORM) || (opponent.hasWorkingAbility(:SNOWCLOAK) && pbWeather==PBWeather::HAIL)
					#~ score*=0.7
					#~ end
				else
					score*=1.1
				end
			end
			#when 0x176 # ??? 
			# next when goes here
		end
		###### END FUNCTION CODES
		if PBTargets::SingleNonUser
			if move.type==13 && (opponent.pbPartner.hasWorkingAbility(:LIGHTNINGROD) || 
					attacker.pbPartner.hasWorkingAbility(:LIGHTNINGROD))
				score*=0
			end
		else
			if move.type==13 && opponent.pbPartner.hasWorkingAbility(:LIGHTNINGROD)
				score*=0.5
			end
		end   
		if PBTargets::SingleNonUser
			if move.type==11 && (opponent.pbPartner.hasWorkingAbility(:STORMDRAIN) || 
					attacker.pbPartner.hasWorkingAbility(:STORMDRAIN))
				score*=0
			end
		else
			if move.type==11 && opponent.pbPartner.hasWorkingAbility(:STORMDRAIN)
				score*=0.5
			end
		end  
		if PBTargets::SingleNonUser
			if move.type==12 && (opponent.pbPartner.hasWorkingAbility(:SAPSIPPER) || 
					attacker.pbPartner.hasWorkingAbility(:SAPSIPPER))
				score*=0
			end
		else
			if move.type==12 && opponent.pbPartner.hasWorkingAbility(:SAPSIPPER)
				score*=0.5
			end
		end
		if move.isSoundBased? && opponent.hasWorkingAbility(:SOUNDPROOF) && !opponent.moldbroken
			score*=0
		end   
		destinycheck = false
		if skill>=PBTrainerAI.bestSkill 
			if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
				for j in @aiMoveMemory[2][opponent.pokemonIndex] 
					destinycheck = true if j.id==getID(PBMoves,:DESTINYBOND) 
				end
			end     
		elsif skill>=PBTrainerAI.highSkill
			if @aiMoveMemory[1].length>0
				for j in @aiMoveMemory[1]
					destinycheck = true if j.id==getID(PBMoves,:DESTINYBOND) 
				end
			end
		end    
		if move.basedamage>0
			if skill>=PBTrainerAI.highSkill
				if opponent.effects[PBEffects::DestinyBond]
					score*=0.2
				else
					if ((opponent.pbSpeed>attacker.pbSpeed) ^ (@trickroom!=0)) && destinycheck
						score*=0.7
					end
				end
			end
		end    
		widecheck = 0
		if skill>=PBTrainerAI.bestSkill && @doublebattle
			if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
				for j in @aiMoveMemory[2][opponent.pokemonIndex] 
					widecheck = 1 if j.id==getID(PBMoves,:WIDEGUARD) 
				end              
			end
			if @aiMoveMemory[2][opponent.pbPartner.pokemonIndex].length>0            
				for j in @aiMoveMemory[2][opponent.pbPartner.pokemonIndex] 
					widecheck = 1 if j.id==getID(PBMoves,:WIDEGUARD) 
				end              
			end
			if widecheck>0	
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pokemonIndex] 
						if (j.id==getID(PBMoves,:WIDEGUARD) && opponent.pbOwnSide.effects[PBEffects::WideGuardLastUsed]<4) #|| j.id!=getID(PBMoves,:WIDEGUARD)
							widecheck = 2 
						end	
					end              
				end
				if @aiMoveMemory[2][opponent.pbPartner.pokemonIndex].length>0            
					for j in @aiMoveMemory[2][opponent.pbPartner.pokemonIndex] 
						if (j.id==getID(PBMoves,:WIDEGUARD) && opponent.pbOwnSide.effects[PBEffects::WideGuardLastUsed]<4) #|| j.id!=getID(PBMoves,:WIDEGUARD)
							widecheck = 2 
						end	
					end              
				end	
			end		
		end      
		if widecheck==2 && ((move.target == PBTargets::AllOpposing) || (move.target == PBTargets::AllNonUsers)) 
			case opponent.pbOwnSide.effects[PBEffects::WideGuardLastUsed]
			when 3	
				score*=0 if rand(5)>0
			when 2
				score*=0 if rand(5)>1	
			when 1
				score*=0 if rand(5)>2
			when 0
				score*=0 if rand(5)>3
			end		
		end   
		shieldcheck = false
		if skill>=PBTrainerAI.bestSkill 
			if @aiMoveMemory[2][opponent.pokemonIndex].length>0            
				for j in @aiMoveMemory[2][opponent.pokemonIndex] 
					shieldcheck = true if j.id==getID(PBMoves,:SPIKYSHIELD) ||  
					j.id==getID(PBMoves,:KINGSSHIELD) 
				end
			end     
		elsif skill>=PBTrainerAI.highSkill
			if @aiMoveMemory[1].length>0
				for j in @aiMoveMemory[1]
					shieldcheck = true if j.id==getID(PBMoves,:SPIKYSHIELD) ||  
					j.id==getID(PBMoves,:KINGSSHIELD)
				end
			end
		end
		if move.isContactMove? && roughdamage<100
			if opponent.hasWorkingAbility(:ROUGHSKIN) || opponent.hasWorkingAbility(:IRONBARBS) || opponent.hasWorkingAbility(:INFURIATE)
				score*=0.7
			end
			if opponent.hasWorkingItem(:ROCKYHELMET) || shieldcheck
				score*=0.7
			end
			if opponent.effects[PBEffects::KingsShield]== true || 
				opponent.effects[PBEffects::SpikyShield]== true
				score *=0.1
			end
		end 
		if move.pbIsPhysical?(move.type) && attacker.species==PBSpecies::AOTIUS
			for i in 0...4
				if opponent.moves[i].id==getID(PBMoves,:COUNTER)
					score*=0.1
				end
			end
		end 		
		if move.basedamage>0 && (opponent.effects[PBEffects::SpikyShield] || opponent.effects[PBEffects::KingsShield])
			score*=0.1
		end
		if move.basedamage==0 && 
			move.id!=getID(PBMoves,:SHADOWVEIL) && 
			move.id!=getID(PBMoves,:NATUREPOWER) && 
			move.id!=getID(PBMoves,:CHEMOTHERAPY) && 
			move.id!=getID(PBMoves,:RECOVER) && 
			move.id!=getID(PBMoves,:ROOST) && 
			move.id!=getID(PBMoves,:MOONLIGHT) && 
			move.id!=getID(PBMoves,:MORNINGSUN) && 
			move.id!=getID(PBMoves,:SYNTHESIS) && 	
			move.id!=getID(PBMoves,:AQUARING) && 
			move.id!=getID(PBMoves,:REFRESH) && 								
			move.id!=getID(PBMoves,:PROTECT) #&& !@doublebattle
			greatmoves=false
			if initialscores.length>0
				for i in 0...initialscores.length
					next if i==scoreindex
					if initialscores[i]>=102
						greatmoves=true
					end
				end
			end          
			if greatmoves
				maxdam=0
				if skill>=PBTrainerAI.bestSkill
					if @aiMoveMemory[2][opponent.pokemonIndex].length>0              
						for j in @aiMoveMemory[2][opponent.pokemonIndex]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end                
					end
				elsif skill>=PBTrainerAI.highSkill
					if @aiMoveMemory[1].length>0              
						for j in @aiMoveMemory[1]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end                
					end
				elsif skill>=PBTrainerAI.mediumSkill
					if @aiMoveMemory[0].length>0              
						for j in @aiMoveMemory[0]
							tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)
							maxdam=tempdam if tempdam>maxdam
						end                      
					end          
				end            
				if maxdam>0 && maxdam<(attacker.hp*0.3)
					score*=0.6
				else
					score*=0.1
				end                                    
			end        
		end
		if $game_switches[330]
			if move.id==getID(PBMoves,:EARTHQUAKE) 
				if attacker.species==PBSpecies::ANDERIND && 
					(opponent.species==PBSpecies::ELECTRUXO || opponent.species==PBSpecies::ARCHILLES) && 
					opponent==@battlers[2] &&
					!opponent.pbPartner.hasWorkingAbility(:CLOUDNINE)
					#~ maxdam=0
					#~ for j in attacker.moves
					#~ tempdam = pbRoughDamage(move,attacker,opponent,skill,move.basedamage)
					#~ maxdam=tempdam if tempdam>maxdam
					#~ end  
					if pbRoughDamage(move,attacker,opponent,skill,move.basedamage)>=opponent.hp
						score*=1.5
					end	
				end	
			end	
		end			  
		ispowder = (move.id==214 || move.id==218 || move.id==220 || move.id==445 || move.id==601 || move.id==18 || move.id==219)
		if ispowder && (opponent.type==getConst(PBTypes,:GRASS) || opponent.hasWorkingAbility(:OVERCOAT) || opponent.hasWorkingItem(:SAFETYGOGGLES))
			score*=0
		end
		# A score of 0 here means it should absolutely not be used
		if score<=0
			PBDebug.log(sprintf("%s: final score: 0",PBMoves.getName(move.id))) if $INTERNAL
			PBDebug.log(sprintf(" ")) if $INTERNAL
			return score
		end    
		##### Other score modifications ################################################
		# Prefer damaging moves if AI has no more Pokémon
		if attacker.pbNonActivePokemonCount==0
			#~ if skill>=PBTrainerAI.mediumSkill &&
			#~ !(skill>=PBTrainerAI.highSkill && opponent.pbNonActivePokemonCount>0)
			if attacker.species==141 #&& attacker.pbSpeed>opponent.pbSpeed
				if move.basedamage==0 && !move.function==0xB3 
					PBDebug.log("[Preferring status move]") if $INTERNAL
					score*=30
					#~ elsif opponent.hp<=opponent.totalhp/2
					#~ PBDebug.log("[Preferring damaging move]") if $INTERNAL
					#~ score*=0
				end
			else
				if move.basedamage==0 && !move.function==0xB3 
					PBDebug.log("[Not preferring status move]") if $INTERNAL
					score*=0.9
				elsif opponent.hp<=opponent.totalhp/2
					PBDebug.log("[Preferring damaging move]") if $INTERNAL
					score*=1.1
				end
			end
			#~ end
		end
		# Don't prefer attacking the opponent if they'd be semi-invulnerable
		if opponent.effects[PBEffects::TwoTurnAttack]>0 &&
			skill>=PBTrainerAI.highSkill
			invulmove=PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function
			if move.accuracy>0 &&   # Checks accuracy, i.e. targets opponent
				([0xC9,0xCA,0xCB,0xCC,0xCD,0xCE].include?(invulmove) ||
					opponent.effects[PBEffects::SkyDrop]) &&
				((attacker.pbSpeed>opponent.pbSpeed) ^ (@trickroom!=0))
				if skill>=PBTrainerAI.bestSkill   # Can get past semi-invulnerability
					miss=false
					case invulmove
					when 0xC9, 0xCC # Fly, Bounce
						miss=true unless move.function==0x08 ||  # Thunder
						move.function==0x15 ||  # Hurricane
						move.function==0x77 ||  # Gust
						move.function==0x78 ||  # Twister
						move.function==0x11B || # Sky Uppercut
						move.function==0x11C || # Smack Down
						isConst?(move.id,PBMoves,:WHIRLWIND)
					when 0xCA # Dig
						miss=true unless move.function==0x76 || # Earthquake
						move.function==0x95    # Magnitude
					when 0xCB # Dive
						miss=true unless move.function==0x75 || # Surf
						move.function==0xD0    # Whirlpool
					when 0xCD # Shadow Force
						miss=true
					when 0xCE # Sky Drop
						miss=true unless move.function==0x08 ||  # Thunder
						move.function==0x15 ||  # Hurricane
						move.function==0x77 ||  # Gust
						move.function==0x78 ||  # Twister
						move.function==0x11B || # Sky Uppercut
						move.function==0x11C    # Smack Down
					end
					if opponent.effects[PBEffects::SkyDrop]
						miss=true unless move.function==0x08 ||  # Thunder
						move.function==0x15 ||  # Hurricane
						move.function==0x77 ||  # Gust
						move.function==0x78 ||  # Twister
						move.function==0x11B || # Sky Uppercut
						move.function==0x11C    # Smack Down
					end
					score*=0 if miss
				else
					score*=0
				end
			end
		end
		#Prefer targets with more dangerous abilities
		if (opponent.pbPartner.hasWorkingAbility(:CONTRARY) || opponent.pbPartner.hasWorkingAbility(:MOXIE) || opponent.pbPartner.hasWorkingAbility(:INFURIATE)) &&
			(opponent.pbPartner.stages[PBStats::ATTACK]>0 || opponent.pbPartner.stages[PBStats::SPATK]>0 || opponent.pbPartner.stages[PBStats::DEFENSE]>0 || opponent.pbPartner.stages[PBStats::SPDEF]>0 || opponent.pbPartner.stages[PBStats::SPEED]>0)
			if opponent.pbPartner.hasWorkingAbility(:CONTRARY) 
				if opponent.pbPartner.pbHasMove?(getID(PBMoves,:OVERHEAT)) ||
					opponent.pbPartner.pbHasMove?(getID(PBMoves,:LEAFSTORM)) ||
					opponent.pbPartner.pbHasMove?(getID(PBMoves,:DRACOMETEOR)) ||
					opponent.pbPartner.pbHasMove?(getID(PBMoves,:SUPERPOWER)) ||
					opponent.pbPartner.pbHasMove?(getID(PBMoves,:CLOSECOMBAT)) ||
					opponent.pbPartner.pbHasMove?(getID(PBMoves,:PSYCHOBOOST)) ||
					opponent.pbPartner.pbHasMove?(getID(PBMoves,:VCREATE)) ||
					opponent.pbPartner.pbHasMove?(getID(PBMoves,:HAMMERARM)) ||
					opponent.pbPartner.pbHasMove?(getID(PBMoves,:DRAGONASCENT))							
					PBDebug.log(sprintf("Sweep Disrupt")) if $INTERNAL
					score*=0.5
				end							
			end									
		end			
		# Pick a good move for the Choice items
		# if attacker.hasWorkingItem(:CHOICEBAND) ||
		#    attacker.hasWorkingItem(:CHOICESPECS) ||
		#    attacker.hasWorkingItem(:CHOICESCARF)
		#   if skill>=PBTrainerAI.mediumSkill
		#     if move.basedamage>=60
		#       score+=60
		#     elsif move.basedamage>0
		#       score+=30
		#     elsif move.function==0xF2 # Trick
		#       score+=70
		#     else
		#       score-=60
		#     end
		#   end
		# end
		# If user has King's Rock, prefer moves that may cause flinching with it # TODO
		# If user is asleep, prefer moves that are usable while asleep
		#if attacker.status==PBStatuses::SLEEP
		#  if skill>=PBTrainerAI.mediumSkill
		#    if move.function!=0x11 && move.function!=0xB4 # Snore, Sleep Talk
		#      hasSleepMove=false
		#      for m in attacker.moves
		#        if m.function==0x11 || m.function==0xB4 # Snore, Sleep Talk
		#          hasSleepMove=true; break
		#        end
		#      end
		#      score-=60 if hasSleepMove
		#    end
		#  end
		#end
		# If user is frozen, prefer a move that can thaw the user
		#if attacker.status==PBStatuses::FROZEN
		#  if skill>=PBTrainerAI.mediumSkill
		#    if move.canThawUser?
		#      score+=40
		#    else
		#      hasFreezeMove=false
		#      for m in attacker.moves
		#        if m.canThawUser?
		#          hasFreezeMove=true; break
		#        end
		#      end
		#      score-=60 if hasFreezeMove
		#    end
		#  end
		#end
		# If target is frozen, don't prefer moves that could thaw them # TODO
		# Adjust score based on how much damage it can deal
		if move.basedamage>0
			typemod=pbTypeModNoMessages(move.type,attacker,opponent,move,skill)
			if typemod==0 || score<=0
				score=0
				#### KUROTSUNE - 029 - START        
			elsif skill>=PBTrainerAI.mediumSkill            && 
				(!attacker.hasWorkingAbility(:MOLDBREAKER) && !(((isConst?(attacker.species,PBSpecies,:GYARADOS) && (attacker.item == PBItems::GYARADOSITE || attacker.PULSE3))) && attacker.willmega) &&
					!attacker.hasWorkingAbility(:TURBOBLAZE)  &&
					!attacker.hasWorkingAbility(:TERAVOLT) && 
					move.id != PBMoves::INFERNALBLADE)  
				if (typemod<=4                                              && 
						opponent.hasWorkingAbility(:WONDERGUARD))               ||
					(isConst?(move.type,PBTypes,:GROUND)                     && 
						(opponent.hasWorkingAbility(:LEVITATE)                   || 
							opponent.hasWorkingItem(:AIRBALLOON)                    || 
							opponent.effects[PBEffects::MagnetRise]>0))             ||
					(isConst?(move.type,PBTypes,:FIRE)                       && 
						opponent.hasWorkingAbility(:FLASHFIRE))                 ||
					(isConst?(move.type,PBTypes,:WATER)                      &&
						(opponent.hasWorkingAbility(:WATERABSORB)                ||
							opponent.hasWorkingAbility(:STORMDRAIN)                 ||
							opponent.hasWorkingAbility(:DRYSKIN)))                  ||          
					(isConst?(move.type,PBTypes,:GRASS)                      && 
						opponent.hasWorkingAbility(:SAPSIPPER))                 ||
					(isConst?(move.type,PBTypes,:ELECTRIC)                   &&
						(opponent.hasWorkingAbility(:VOLTABSORB)                 ||
							opponent.hasWorkingAbility(:LIGHTNINGROD)               ||
							opponent.hasWorkingAbility(:MOTORDRIVE)))									||
					(isConst?(move.type,PBTypes,:NUCLEAR)                    &&
						opponent.hasWorkingAbility(:LEADSKIN))										||
					(isConst?(move.type,PBTypes,:FAIRY)                  	  &&
						opponent.hasWorkingAbility(:DISENCHANT))
					score=0
				end
			end
		end
		#### KUROTSUNE - 029 - END     
		if score != 0
			# Calculate how much damage the move will do (roughly)
			realBaseDamage=move.basedamage
			realBaseDamage=60 if move.basedamage==1
			if skill>=PBTrainerAI.mediumSkill
				realBaseDamage=pbBetterBaseDamage(move,attacker,opponent,skill,realBaseDamage)
			end
		end
	else # non-damaging moves
		if skill>=PBTrainerAI.mediumSkill            && 
			(!attacker.hasWorkingAbility(:MOLDBREAKER) && !(((isConst?(attacker.species,PBSpecies,:GYARADOS) && (attacker.item == PBItems::GYARADOSITE || attacker.PULSE3))) && attacker.willmega) &&
				!attacker.hasWorkingAbility(:TURBOBLAZE)  &&
				!attacker.hasWorkingAbility(:TERAVOLT) && 
				move.id != PBMoves::INFERNALBLADE)  
			if (isConst?(move.type,PBTypes,:FIRE)                       && 
					opponent.hasWorkingAbility(:FLASHFIRE))                 ||
				(isConst?(move.type,PBTypes,:WATER)                      &&
					(opponent.hasWorkingAbility(:WATERABSORB)                ||
						opponent.hasWorkingAbility(:STORMDRAIN)                 ||
						opponent.hasWorkingAbility(:DRYSKIN)))                  ||          
				(isConst?(move.type,PBTypes,:GRASS)                      && 
					opponent.hasWorkingAbility(:SAPSIPPER))                 ||
				(isConst?(move.type,PBTypes,:ELECTRIC)                   &&
					(opponent.hasWorkingAbility(:VOLTABSORB)                 ||
						opponent.hasWorkingAbility(:LIGHTNINGROD)               ||
						opponent.hasWorkingAbility(:MOTORDRIVE)))                 ||
				(isConst?(move.type,PBTypes,:NUCLEAR)                    &&
					opponent.hasWorkingAbility(:LEADSKIN) && move.id!=getID(PBMoves,:CHEMOTHERAPY))		||
				(isConst?(move.type,PBTypes,:FAIRY)                  	  &&
					opponent.hasWorkingAbility(:DISENCHANT))
				score=0
			end
		end
		# Don't prefer attacks which don't deal damage
		#score-=10
		# Account for accuracy of move
		accuracy=pbRoughAccuracy(move,attacker,opponent,skill)
		if accuracy<80
			score*=accuracy/100.0
		end
		#score=0 if score<=10 && skill>=PBTrainerAI.highSkill
		if move.basedamage==0 && (move.target==PBTargets::SingleNonUser || move.target==PBTargets::RandomOpposing || move.target==PBTargets::AllOpposing || move.target==PBTargets::OpposingSide || move.target==PBTargets::SingleOpposing || move.target==PBTargets::OppositeOpposing) &&
			(opponent.hasWorkingAbility(:MAGICBOUNCE)|| (isConst?(opponent.species,PBSpecies,:SABLEYE) && opponent.item == PBItems::SABLEYEITE && opponent.willmega) ||
				(@doublebattle && (opponent.pbPartner.hasWorkingAbility(:MAGICBOUNCE) || (isConst?(opponent.pbPartner.species,PBSpecies,:SABLEYE) && opponent.pbPartner.item == PBItems::SABLEYEITE && opponent.willmega))))
			score=0
		end
		#~ if skill>=PBTrainerAI.mediumSkill
		#~ if attacker.hasWorkingAbility(:PRANKSTER)
		#~ if opponent.pbHasType?(:DARK)
		#~ if move.basedamage==0 && move.priority>-1
		#~ score=0
		#~ end
		#~ end
		#~ end
		#~ end  
		score=score.to_i    
		score=0 if score<0
		PBDebug.log(sprintf("%s: final score: %d",PBMoves.getName(move.id),score)) if $INTERNAL
		PBDebug.log(sprintf(" ")) if $INTERNAL
		return score
	end
	
	################################################################################
	# Get type effectiveness and approximate stats.
	################################################################################
	def pbTypeModifierAI(type,attacker,opponent)
		return 4 if type<0
		return 4 if isConst?(type,PBTypes,:GROUND) && opponent.pbHasType?(:FLYING) &&
		opponent.hasWorkingItem(:IRONBALL)
		atype=type # attack type
		otype1=opponent.type1
		otype2=opponent.type2
		otype3=opponent.type3
		if zorovar # ai being fooled by illusion
			otype1=opponent.effects[PBEffects::Illusion].type1 #17
			otype2=opponent.effects[PBEffects::Illusion].type2 #17
			otype3=opponent.effects[PBEffects::Illusion].type3 #17
		end
		if isConst?(otype1,PBTypes,:FLYING) && opponent.effects[PBEffects::Roost]
			# the following if statement checks if a Pokémon is a mono-Flying type
			if isConst?(otype2,PBTypes,:FLYING) && (isConst?(otype3,PBTypes,:FLYING) ||
					otype3==-1)
				otype1=getConst(PBTypes,:NORMAL) || 0
			else
				otype1=otype2
			end
		end
		if isConst?(otype2,PBTypes,:FLYING) && opponent.effects[PBEffects::Roost]
			otype2=otype1
		elsif isConst?(otype3,PBTypes,:FLYING) && opponent.effects[PBEffects::Roost]
			otype3=-1
		end	  
		mod1=PBTypes.getEffectiveness(atype,otype1)
		mod2=(otype1==otype2) ? 2 : PBTypes.getEffectiveness(atype,otype2)
		mod3=(otype3==nil || otype2==otype3 || otype1==otype3) ? 2 : PBTypes.getEffectiveness(atype,otype3,@battle.inverse)		
		if opponent.hasWorkingItem(:RINGTARGET)
			mod1=2 if mod1==0
			mod2=2 if mod2==0
			mod3=2 if mod3==0			
		end
		if attacker.hasWorkingAbility(:SCRAPPY) ||
			opponent.effects[PBEffects::Foresight]
			mod1=2 if isConst?(otype1,PBTypes,:GHOST) &&
			(isConst?(atype,PBTypes,:NORMAL) || isConst?(atype,PBTypes,:FIGHTING))
			mod2=2 if isConst?(otype2,PBTypes,:GHOST) &&
			(isConst?(atype,PBTypes,:NORMAL) || isConst?(atype,PBTypes,:FIGHTING))
			mod3=2 if isConst?(otype3,PBTypes,:GHOST) &&
			(isConst?(atype,PBTypes,:NORMAL) || isConst?(atype,PBTypes,:FIGHTING))
		end
		#### JERICHO - 005 - START
		if attacker.hasWorkingAbility(:PIXILATE) || 
			attacker.hasWorkingAbility(:AERILATE) || 
			attacker.hasWorkingAbility(:REFRIGERATE) ||
			attacker.hasWorkingAbility(:ENERGIZATE) ||
			attacker.hasWorkingAbility(:ATOMIZATE)
			mod1=2 if isConst?(otype1,PBTypes,:GHOST) && isConst?(atype,PBTypes,:NORMAL)
			mod2=2 if isConst?(otype2,PBTypes,:GHOST) && isConst?(atype,PBTypes,:NORMAL)
			mod3=2 if isConst?(otype3,PBTypes,:GHOST) && isConst?(atype,PBTypes,:NORMAL)				
		end
		if attacker.hasWorkingAbility(:NORMALIZE)
			mod1=2 if isConst?(otype1,PBTypes,(:GROUND || :FAIRY || :FLYING || :NORMAL || :DARK))
			mod1=1 if isConst?(otype1,PBTypes,:STEEL)
			mod1=0 if isConst?(otype1,PBTypes,:GHOST) && !opponent.effects[PBEffects::Foresight]
			mod2=2 if isConst?(otype2,PBTypes,(:GROUND || :FAIRY || :FLYING || :NORMAL || :DARK))
			mod2=1 if isConst?(otype2,PBTypes,:STEEL)
			mod2=0 if isConst?(otype2,PBTypes,:GHOST) && !opponent.effects[PBEffects::Foresight]
			mod3=2 if isConst?(otype3,PBTypes,(:GROUND || :FAIRY || :FLYING || :NORMAL || :DARK))
			mod3=1 if isConst?(otype3,PBTypes,:STEEL)
			mod3=0 if isConst?(otype3,PBTypes,:GHOST) && !opponent.effects[PBEffects::Foresight]			
		end
		if opponent.effects[PBEffects::Electrify]
			mod1=0 if isConst?(otype1,PBTypes,:GROUND)
			mod1=4 if isConst?(otype1,PBTypes,:FLYING)
			mod1=2 if isConst?(otype1,PBTypes,(:GHOST || :FAIRY || :NORMAL || :DARK))
			mod2=0 if isConst?(otype2,PBTypes,:GROUND)
			mod2=4 if isConst?(otype2,PBTypes,:FLYING)
			mod2=2 if isConst?(otype2,PBTypes,(:GHOST || :FAIRY || :NORMAL || :DARK))
			mod3=0 if isConst?(otype3,PBTypes,:GROUND)
			mod3=4 if isConst?(otype3,PBTypes,:FLYING)
			mod3=2 if isConst?(otype3,PBTypes,(:GHOST || :FAIRY || :NORMAL || :DARK))			
		end
		if $fefieldeffect == 24
			mod1=0 if isConst?(otype1,PBTypes,:GHOST) && isConst?(atype,PBTypes,(:FAIRY || :DARK || :STEEL))
			mod2=0 if isConst?(otype2,PBTypes,:GHOST) && isConst?(atype,PBTypes,(:FAIRY || :DARK || :STEEL))
			mod3=0 if isConst?(otype3,PBTypes,:GHOST) && isConst?(atype,PBTypes,(:FAIRY || :DARK || :STEEL))			
		end
		#### JERICHO - 005 - END   
		if opponent.effects[PBEffects::Ingrain] ||
			opponent.effects[PBEffects::SmackDown] ||
			@battle.field.effects[PBEffects::Gravity]>0
			mod1=2 if isConst?(otype1,PBTypes,:FLYING) && isConst?(atype,PBTypes,:GROUND)
			mod2=2 if isConst?(otype2,PBTypes,:FLYING) && isConst?(atype,PBTypes,:GROUND)
			mod3=2 if isConst?(otype3,PBTypes,:FLYING) && isConst?(atype,PBTypes,:GROUND)			
		end
		if opponent.effects[PBEffects::MiracleEye]
			mod1=2 if isConst?(otype1,PBTypes,:DARK) && isConst?(atype,PBTypes,:PSYCHIC)
			mod2=2 if isConst?(otype2,PBTypes,:DARK) && isConst?(atype,PBTypes,:PSYCHIC)
			mod3=2 if isConst?(otype3,PBTypes,:DARK) && isConst?(atype,PBTypes,:PSYCHIC)
		end
		return (mod1*mod2*mod3)/2
		#typemod = mod1*mod2
		#~ if $fefieldeffect == 36 # Inverse Field
		#~ temptypemod = typemod
		#~ temptypemod = 16 if typemod == 1
		#~ temptypemod = 8 if typemod == 2
		#~ temptypemod = 2 if typemod == 8
		#~ temptypemod = 1 if typemod == 16
		#~ temptypemod = 0.5 if typemod == 32
		#~ temptypemod = 32 if typemod == 0.5
		#~ typemod = temptypemod
		#~ end
		#return typemod
	end
	
	def pbTypeModifier2(battlerThis,battlerOther)
		if battlerThis.type1==battlerThis.type2
			return 4*pbTypeModifierAI(battlerThis.type1,battlerThis,battlerOther)
		else
			ret=pbTypeModifierAI(battlerThis.type1,battlerThis,battlerOther)
			ret*=pbTypeModifierAI(battlerThis.type2,battlerThis,battlerOther)
			ret*=pbTypeModifierAI(battlerThis.type3,battlerThis,battlerOther)			
			return ret # 0,1,2,4,8,_16_,32,64,128,256
		end
	end
	
	
	def pbRoughStat(battler,stat,skill)
		atkmul=1
		defmul=1
		spemul=1
		spamul=1
		spdmul=1
		if battler.species==PBSpecies::ARCHILLES && (battler.item == PBItems::ARCHILLESITE || battler.PULSE3) && battler.willmega
			atkmul=1.35
			defmul=1.294
			spemul=1.045
			spamul=1.35
			spdmul=1
		elsif battler.species==PBSpecies::METALYNX && (battler.item == PBItems::METALYNXITE || battler.PULSE3) && battler.willmega	
			atkmul=1.473
			defmul=1.28
			spemul=1.133
			spamul=1
			spdmul=1.1
		elsif battler.species==PBSpecies::ELECTRUXO && (battler.item == PBItems::ELECTRUXOLITE || battler.PULSE3) && battler.willmega	
			atkmul=1
			defmul=1.158
			spemul=1.294
			spamul=1.388
			spdmul=1.238
		elsif battler.species==PBSpecies::GYARADOS && (battler.item == PBItems::GYARADOSITE || battler.PULSE3) && battler.willmega	
			atkmul=1
			defmul=1.126
			spemul=1
			spamul=2.167
			spdmul=1.2
		elsif battler.species==PBSpecies::AMPHAROS && (battler.item == PBItems::AMPHAROSITE || battler.PULSE3) && battler.willmega	
			atkmul=1
			defmul=1.352
			spemul=0.909
			spamul=1.434
			spdmul=1.333
		elsif battler.species==PBSpecies::DRILGANN && (battler.item == PBItems::DRILGANNITE || battler.PULSE3) && battler.willmega	
			atkmul=1.285
			defmul=1.257
			spemul=1.527
			spamul=1
			spdmul=1.173
		elsif battler.species==PBSpecies::S51A && (battler.item == PBItems::UNIDENTIFIEDFALLENOBJECT || battler.PULSE3) && battler.willmega	
			atkmul=1
			defmul=1.333
			spemul=1.466
			spamul=1.304
			spdmul=1
		elsif battler.species==PBSpecies::INFLAGETAH && (battler.item == PBItems::INFLAGETITE || battler.PULSE3) && battler.willmega	
			atkmul=1.45
			defmul=1.167
			spemul=1.167
			spamul=1.125
			spdmul=1.125
		elsif battler.species==PBSpecies::SYRENTIDE && (battler.item == PBItems::SYRENTIDEITE || battler.PULSE3) && battler.willmega	
			atkmul=1
			defmul=1.185
			spemul=1
			spamul=1.34
			spdmul=1.462
		elsif battler.species==PBSpecies::DRAMSAMA && (battler.item == PBItems::DRAMSAMAITE || battler.PULSE3) && battler.willmega	
			atkmul=1.062
			defmul=1.142
			spemul=1.263
			spamul=1.38
			spdmul=1.307
		elsif battler.species==PBSpecies::SABLEYE && (battler.item == PBItems::SABLEYEITE || battler.PULSE3) && battler.willmega	
			atkmul=1
			defmul=1.666
			spemul=0.4
			spamul=1
			spdmul=1.769
		elsif battler.species==PBSpecies::BAARIETTE && (battler.item == PBItems::BAARIETTITE || battler.PULSE3) && battler.willmega	
			atkmul=1.333
			defmul=1.412
			spemul=1.133
			spamul=1.062
			spdmul=1.294
		elsif battler.species==PBSpecies::WHIMSICOTT && (battler.item == PBItems::WHIMSICOTTITE || battler.PULSE3) && battler.willmega	
			atkmul=1
			defmul=1.235
			spemul=1.172
			spamul=1.51
			spdmul=1.266
		elsif battler.species==PBSpecies::ARBOK && (battler.item == PBItems::ARBOKITE || battler.PULSE3) && battler.willmega	
			atkmul=1.368
			defmul=1.428
			spemul=1.125
			spamul=1
			spdmul=1.312
		elsif battler.species==PBSpecies::GENGAR && (battler.item == PBItems::GENGARITE || battler.PULSE3) && battler.willmega	
			atkmul=1
			defmul=1.333
			spemul=1.181
			spamul=1.307
			spdmul=1.266			
		elsif battler.species==PBSpecies::KIRICORN && (battler.item == PBItems::KIRICORNITE || battler.PULSE3) && battler.willmega	
			atkmul=1.194  
			defmul=1
			spemul=1.084
			spamul=1.895
			spdmul=1
		end					
		if skill>=PBTrainerAI.highSkill && stat==PBStats::SPEED
			#print battler.pbSpeed*spemul
			return battler.pbSpeed*spemul
		end
		stagemul=[2,2,2,2,2,2,2,3,4,5,6,7,8]
		stagediv=[8,7,6,5,4,3,2,2,2,2,2,2,2]
		stage=battler.stages[stat]+6
		value=0
		value=battler.attack*atkmul if stat==PBStats::ATTACK
		value=battler.defense*defmul if stat==PBStats::DEFENSE
		value=battler.speed*spemul if stat==PBStats::SPEED
		value=battler.spatk*spamul if stat==PBStats::SPATK
		value=battler.spdef*spdmul if stat==PBStats::SPDEF
		#print (value*1.0*stagemul[stage]/stagediv[stage]).floor
		return (value*1.0*stagemul[stage]/stagediv[stage]).floor
	end
	
	def pbBetterBaseDamage(move,attacker,opponent,skill,basedamage)
		# Covers all function codes which have their own def pbBaseDamage
		case move.function
		when 0x6A # SonicBoom
			basedamage=20        
		when 0x6B # Dragon Rage
			basedamage=40
		when 0x6C # Super Fang
			basedamage=(opponent.hp/2.0).floor                 
		when 0x6D # Night Shade
			basedamage=attacker.level
		when 0x6E # Endeavor
			basedamage=opponent.hp-attacker.hp
		when 0x6F # Psywave
			basedamage=attacker.level
		when 0x70 # OHKO
			basedamage=opponent.totalhp
		when 0x71 # Counter        
			maxdam=60
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						next if j.pbIsSpecial?(j.type)
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*2
						if tempdam>maxdam
							maxdam=tempdam
						end  
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						next if j.pbIsSpecial?(j.type)
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*2
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end              
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						next if j.pbIsSpecial?(j.type)
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*2
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end  
				end          
			end  
			basedamage = maxdam
		when 0x72 # Mirror Coat
			maxdam=60
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						next if j.pbIsPhysical?(j.type)
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*2
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						next if j.pbIsPhysical?(j.type)
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*2
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end              
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						next if j.pbIsPhysical?(j.type)
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*2
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end  
				end          
			end  
			basedamage = maxdam
		when 0x73 # Metal Burst
			maxdam=45
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*1.5
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*1.5
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end              
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*1.5
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end  
				end          
			end  
			basedamage = maxdam 
		when 0x75 # Surf
			basedamage*=2 if PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function==0xCB # Dive
		when 0x76 # Earthquake
			basedamage*=2 if PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function==0xCA # Dig
		when 0x77, 0x78 # Gust, Twister
			basedamage*=2 if PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function==0xC9 || # Fly
			PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function==0xCC || # Bounce
			PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function==0xCE    # Sky Drop
		when 0x79 # Fusion Bolt
			basedamage*=2 if previousMove == 127 || previousMove == 131
		when 0x7A # Fusion Flare
			basedamage*=2 if previousMove == 64 || previousMove == 68
		when 0x7B # Venoshock
			if opponent.status==PBStatuses::POISON 
				basedamage*=2
			end     
		when 0x7C # SmellingSalt
			basedamage*=2 if opponent.status==PBStatuses::PARALYSIS
		when 0x7D # Wake-Up Slap
			basedamage*=2 if opponent.status==PBStatuses::SLEEP
		when 0x7E # Facade
			basedamage*=2 if attacker.status==PBStatuses::POISON ||
			attacker.status==PBStatuses::BURN ||
			attacker.status==PBStatuses::PARALYSIS
		when 0x7F # Hex
			basedamage*=2 if opponent.status!=0
		when 0x80 # Brine
			basedamage*=2 if opponent.hp<=(opponent.totalhp/2).floor
		when 0x85 # Retaliate
			basedamage*=2 if attacker.pbOwnSide.effects[PBEffects::Retaliate]
		when 0x86 # Acrobatics
			basedamage*=2 if attacker.item==0 || attacker.hasWorkingItem(:FLYINGGEM)
		when 0x87 # Weather Ball
			basedamage*=1.5 if pbWeather!=0
		when 0x89 # Return
			basedamage=[(attacker.happiness*2/5).floor,1].max
		when 0x8A # Frustration
			basedamage=[((255-attacker.happiness)*2/5).floor,1].max
		when 0x8B # Eruption
			basedamage=[(150*(attacker.hp.to_f)/attacker.totalhp).floor,1].max
		when 0x8C # Crush Grip
			basedamage=[(120*opponent.hp/opponent.totalhp).floor,1].max
		when 0x8D # Gyro Ball
			ospeed=pbRoughStat(opponent,PBStats::SPEED,skill)
			aspeed=pbRoughStat(attacker,PBStats::SPEED,skill)
			basedamage=[[(25*ospeed/aspeed).floor,150].min,1].max
		when 0x8E # Stored Power
			mult=0
			for i in [PBStats::ATTACK,PBStats::DEFENSE,PBStats::SPEED,
					PBStats::SPATK,PBStats::SPDEF,PBStats::ACCURACY,PBStats::EVASION]
				mult+=attacker.stages[i] if attacker.stages[i]>0
			end
			basedamage=20*(mult+1)
		when 0x8F # Punishment
			mult=0
			for i in [PBStats::ATTACK,PBStats::DEFENSE,PBStats::SPEED,
					PBStats::SPATK,PBStats::SPDEF,PBStats::ACCURACY,PBStats::EVASION]
				mult+=opponent.stages[i] if opponent.stages[i]>0
			end
			basedamage=[20*(mult+3),200].min
			#   when 0x90 # Hidden Power
			#     hp=pbHiddenPower(attacker.iv)
			#      basedamage=hp[1]
		when 0x91 # Fury Cutter
			basedamage=basedamage<<(attacker.effects[PBEffects::FuryCutter]-1)
		when 0x92 # Echoed Voice
			basedamage*=attacker.effects[PBEffects::EchoedVoice]
		when 0x94 # Present
			basedamage=50
		when 0x95 # Magnitude
			basedamage=71
			basedamage*=2 if PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function==0xCA # Dig
		when 0x96 # Natural Gift
			damagearray={
				60 => [:HAFLIBERRY],
				80 => [:CHERIBERRY,:CHESTOBERRY,:PECHABERRY,:RAWSTBERRY,:ASPEARBERRY,
					:LEPPABERRY,:ORANBERRY,:PERSIMBERRY,:LUMBERRY,:SITRUSBERRY,
					:FIGYBERRY,:WIKIBERRY,:MAGOBERRY,:AGUAVBERRY,:IAPAPABERRY,
					:RAZZBERRY,:OCCABERRY,:PASSHOBERRY,:WACANBERRY,:RINDOBERRY,
					:YACHEBERRY,:CHOPLEBERRY,:KEBIABERRY,:SHUCABERRY,:COBABERRY,
					:PAYAPABERRY,:TANGABERRY,:CHARTIBERRY,:KASIBBERRY,:HABANBERRY,
					:COLBURBERRY,:BABIRIBERRY,:CHILANBERRY,:ROSELIBERRY],
				90 => [:BLUKBERRY,:NANABBERRY,:WEPEARBERRY,:PINAPBERRY,:POMEGBERRY,
					:KELPSYBERRY,:QUALOTBERRY,:HONDEWBERRY,:GREPABERRY,:TAMATOBERRY,
					:CORNNBERRY,:MAGOSTBERRY,:RABUTABERRY,:NOMELBERRY,:SPELONBERRY,
					:PAMTREBERRY,:ACAIBERRY,:BACUBERRY,:CUPUBERRY,:GUARABERRY],
				100 => [:WATMELBERRY,:DURINBERRY,:BELUEBERRY,:LIECHIBERRY,:GANLONBERRY,
					:SALACBERRY,:PETAYABERRY,:APICOTBERRY,:LANSATBERRY,:STARFBERRY,
					:ENIGMABERRY,:MICLEBERRY,:CUSTAPBERRY,:JABOCABERRY,:ROWAPBERRY,
					:KEEBERRY,:MARANGABERRY]
			}
			haveanswer=false
			for i in damagearray.keys
				data=damagearray[i]
				if data
					for j in data
						if isConst?(attacker.item,PBItems,j)
							basedamage=i; haveanswer=true; break
						end
					end
				end
				break if haveanswer
			end
		when 0x97 # Trump Card
			dmgs=[200,80,60,50,40]
			ppleft=[move.pp-1,4].min   # PP is reduced before the move is used
			basedamage=dmgs[ppleft]
		when 0x98 # Flail
			n=(48*(attacker.hp.to_f)/attacker.totalhp).floor
			basedamage=20
			basedamage=40 if n<33
			basedamage=80 if n<17
			basedamage=100 if n<10
			basedamage=150 if n<5
			basedamage=200 if n<2
		when 0x99 # Electro Ball
			n=(attacker.pbSpeed/opponent.pbSpeed).floor
			basedamage=40
			basedamage=60 if n>=1
			basedamage=80 if n>=2
			basedamage=120 if n>=3
			basedamage=150 if n>=4
		when 0x9A # Low Kick
			weight=opponent.weight
			basedamage=20
			basedamage=40 if weight>100
			basedamage=60 if weight>250
			basedamage=80 if weight>500
			basedamage=100 if weight>1000
			basedamage=120 if weight>2000
		when 0x9B # Heavy Slam
			n=(attacker.weight/opponent.weight).floor
			basedamage=40
			basedamage=60 if n>=2
			basedamage=80 if n>=3
			basedamage=100 if n>=4
			basedamage=120 if n>=5
		when 0xA0 # Frost Breath
			basedamage*=1.5
		when 0xBD, 0xBE # Double Kick, Twineedle
			basedamage*=2
		when 0xBF # Triple Kick
			basedamage*=6
		when 0xC0 # Fury Attack
			if attacker.hasWorkingAbility(:SKILLLINK)
				basedamage*=5
			else
				basedamage=(basedamage*19/6).floor
			end
		when 0xC1 # Beat Up
			party=pbParty(attacker.index)
			participants=[]
			for i in 0...party.length
				participants.push(i) if party[i] && !party[i].isEgg? &&
				party[i].hp>0 #&& party[i].status==0
			end
			if party[participants[0]].baseStats[1]!=nil
				atk=party[participants[0]].baseStats[1]
				participants[0]=nil; participants.compact!
			else
				atk=100
			end
			basedamage= 5+(atk/10)
			mult=0
			for i in 0...party.length
				mult+=1 if party[i] && !party[i].isEgg? &&
				party[i].hp>0 && party[i].status==0
			end
			basedamage*=mult
			basedamage*=1.1
			#~ when 0xC4 # SolarBeam
			#~ if pbWeather!=0 && pbWeather!=PBWeather::SUNNYDAY
			#~ basedamage=(basedamage*0.5).floor
			#~ end
		when 0xD0 # Whirlpool
			if skill>=PBTrainerAI.mediumSkill
				basedamage*=2 if PBMoveData.new(opponent.effects[PBEffects::TwoTurnAttack]).function==0xCB # Dive
			end
		when 0xD3 # Rollout
			if skill>=PBTrainerAI.mediumSkill
				basedamage*=2 if attacker.effects[PBEffects::DefenseCurl]
			end
		when 0xD4 # Bide 
			maxdam=30
			if skill>=PBTrainerAI.bestSkill
				if @aiMoveMemory[2][opponent.pokemonIndex].length>0
					for j in @aiMoveMemory[2][opponent.pokemonIndex]
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*1.5
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end              
				end
			elsif skill>=PBTrainerAI.highSkill
				if @aiMoveMemory[1].length>0
					for j in @aiMoveMemory[1]
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*1.5
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end              
				end            
			elsif skill>=PBTrainerAI.mediumSkill
				if @aiMoveMemory[0].length>0
					for j in @aiMoveMemory[0]
						next if j.basedamage<=1
						tempdam = pbRoughDamage(j,opponent,attacker,skill,j.basedamage)*1.5
						if tempdam>maxdam
							maxdam=tempdam
						end                
					end  
				end          
			end  
			basedamage = maxdam 
		when 0xE1 # Final Gambit
			basedamage=attacker.hp
			#~ when 0xF0 # Knock Off
			#~ if opponent.item!=0 && !pbIsUnlosableItem(opponent,opponent.item)
			#~ basedamage*=1.5
			#~ end        
		when 0xF7 # Fling
			def flingarray
				return {
					130 => [:IRONBALL],
					100 => [:ARMORFOSSIL,:CLAWFOSSIL,:COVERFOSSIL,:DOMEFOSSIL,:HARDSTONE,
						:HELIXFOSSIL,:OLDAMBER,:PLUMEFOSSIL,:RAREBONE,:ROOTFOSSIL,
						:SKULLFOSSIL,:SAILFOSSIL,:JAWFOSSIL],
					90 => [:DEEPSEATOOTH,:DRACOPLATE,:DREADPLATE,:EARTHPLATE,:FISTPLATE,
						:FLAMEPLATE,:GRIPCLAW,:ICICLEPLATE,:INSECTPLATE,:IRONPLATE,
						:MEADOWPLATE,:MINDPLATE,:SKYPLATE,:SPLASHPLATE,:SPOOKYPLATE,
						:STONEPLATE,:THICKCLUB,:TOXICPLATE,:ZAPPLATE],
					80 => [:DAWNSTONE,:DUSKSTONE,:ELECTIRIZER,:MAGMARIZER,:ODDKEYSTONE,
						:OVALSTONE,:PROTECTOR,:QUICKCLAW,:RAZORCLAW,:SHINYSTONE,
						:STICKYBARB],
					70 => [:BURNDRIVE,:CHILLDRIVE,:DOUSEDRIVE,:DRAGONFANG,:POISONBARB,
						:POWERANKLET,:POWERBAND,:POWERBELT,:POWERBRACER,:POWERLENS,
						:POWERWEIGHT,:SHOCKDRIVE],
					60 => [:ADAMANTORB,:DAMPROCK,:HEATROCK,:LUSTROUSORB,:MACHOBRACE,
						:ROCKYHELMET,:STICK],
					50 => [:DUBIOUSDISC,:SHARPBEAK],
					40 => [:EVIOLITE,:ICYROCK,:LUCKYPUNCH],
					30 => [:ABILITYURGE,:ABSORBBULB,:AMULETCOIN,:ANTIDOTE,:AWAKENING,
						:BALMMUSHROOM,:BERRYJUICE,:BIGMUSHROOM,:BIGNUGGET,:BIGPEARL,
						:BINDINGBAND,:BLACKBELT,:BLACKFLUTE,:BLACKGLASSES,:BLACKSLUDGE,
						:BLUEFLUTE,:BLUESHARD,:BURNHEAL,:CALCIUM,:CARBOS,
						:CASTELIACONE,:CELLBATTERY,:CHARCOAL,:CLEANSETAG,:COMETSHARD,
						:DAMPMULCH,:DEEPSEASCALE,:DIREHIT,:DIREHIT2,:DIREHIT3,
						:DRAGONSCALE,:EJECTBUTTON,:ELIXIR,:ENERGYPOWDER,:ENERGYROOT,
						:ESCAPEROPE,:ETHER,:EVERSTONE,:EXPSHARE,:FIRESTONE,
						:FLAMEORB,:FLOATSTONE,:FLUFFYTAIL,:FRESHWATER,:FULLHEAL,
						:FULLRESTORE,:GOOEYMULCH,:GREENSHARD,:GROWTHMULCH,:GUARDSPEC,
						:HEALPOWDER,:HEARTSCALE,:HONEY,:HPUP,:HYPERPOTION,
						:ICEHEAL,:IRON,:ITEMDROP,:ITEMURGE,:KINGSROCK,
						:LAVACOOKIE,:LEAFSTONE,:LEMONADE,:LIFEORB,:LIGHTBALL,
						:LIGHTCLAY,:LUCKYEGG,:MAGNET,:MAXELIXIR,:MAXETHER,
						:MAXPOTION,:MAXREPEL,:MAXREVIVE,:METALCOAT,:METRONOME,
						:MIRACLESEED,:MOOMOOMILK,:MOONSTONE,:MYSTICWATER,:NEVERMELTICE,
						:NUGGET,:OLDGATEAU,:PARALYZEHEAL,:PEARL,:PEARLSTRING,
						:POKEDOLL,:POKETOY,:POTION,:PPMAX,:PPUP,
						:PRISMSCALE,:PROTEIN,:RAGECANDYBAR,:RARECANDY,:RAZORFANG,
						:REDFLUTE,:REDSHARD,:RELICBAND,:RELICCOPPER,:RELICCROWN,
						:RELICGOLD,:RELICSILVER,:RELICSTATUE,:RELICVASE,:REPEL,
						:RESETURGE,:REVIVALHERB,:REVIVE,:SACREDASH,:SCOPELENS,
						:SHELLBELL,:SHOALSALT,:SHOALSHELL,:SMOKEBALL,:SODAPOP,
						:SOULDEW,:SPELLTAG,:STABLEMULCH,:STARDUST,:STARPIECE,
						:SUNSTONE,:SUPERPOTION,:SUPERREPEL,:SWEETHEART,:THUNDERSTONE,
						:TINYMUSHROOM,:TOXICORB,:TWISTEDSPOON,:UPGRADE,:WATERSTONE,
						:WHITEFLUTE,:XACCURACY,:XACCURACY2,:XACCURACY3,:XACCURACY6,
						:XATTACK,:XATTACK2,:XATTACK3,:XATTACK6,:XDEFEND,
						:XDEFEND2,:XDEFEND3,:XDEFEND6,:XSPDEF,:XSPDEF2,
						:XSPDEF3,:XSPDEF6,:XSPECIAL,:XSPECIAL2,:XSPECIAL3,
						:XSPECIAL6,:XSPEED,:XSPEED2,:XSPEED3,:XSPEED6,
						:YELLOWFLUTE,:YELLOWSHARD,:ZINC],
					20 => [:CLEVERWING,:GENIUSWING,:HEALTHWING,:MUSCLEWING,:PRETTYWING,
						:RESISTWING,:SWIFTWING],
					10 => [:AIRBALLOON,:BIGROOT,:BLUESCARF,:BRIGHTPOWDER,:CHOICEBAND,
						:CHOICESCARF,:CHOICESPECS,:DESTINYKNOT,:EXPERTBELT,:FOCUSBAND,
						:FOCUSSASH,:FULLINCENSE,:GREENSCARF,:LAGGINGTAIL,:LAXINCENSE,
						:LEFTOVERS,:LUCKINCENSE,:MENTALHERB,:METALPOWDER,:MUSCLEBAND,
						:ODDINCENSE,:PINKSCARF,:POWERHERB,:PUREINCENSE,:QUICKPOWDER,
						:REAPERCLOTH,:REDCARD,:REDSCARF,:RINGTARGET,:ROCKINCENSE,
						:ROSEINCENSE,:SEAINCENSE,:SHEDSHELL,:SILKSCARF,:SILVERPOWDER,
						:SMOOTHROCK,:SOFTSAND,:SOOTHEBELL,:WAVEINCENSE,:WHITEHERB,
						:WIDELENS,:WISEGLASSES,:YELLOWSCARF,:ZOOMLENS]
				}
			end
			if attacker.item==0
				basedamage=0
			else
				basedamage=10 if pbIsBerry?(attacker.item)
				for i in flingarray.keys
					data=flingarray[i]
					if data
						for j in data
							basedamage = i if isConst?(attacker.item,PBItems,j)
						end
					end
				end
			end
		when 0x113 # Spit Up
			basedamage = 100*attacker.effects[PBEffects::Stockpile]
		when 0x171 # Stomping Tantrum 
			if attacker.effects[PBEffects::Tantrum]
				basedamage*=2
			end  
		end
		return basedamage
	end
	
	def pbStatusDamage(move)
		if (move.id == PBMoves::AFTERYOU || move.id == PBMoves::BESTOW ||
				move.id == PBMoves::CRAFTYSHIELD || move.id == PBMoves::LUCKYCHANT ||
				move.id == PBMoves::MEMENTO || move.id == PBMoves::QUASH ||
				move.id == PBMoves::SAFEGUARD || move.id == PBMoves::SPITE ||
				move.id == PBMoves::SPLASH || move.id == PBMoves::SWEETSCENT ||
				move.id == PBMoves::TELEKINESIS || move.id == PBMoves::TELEPORT)
			return 0
		elsif (move.id == PBMoves::ALLYSWITCH || move.id == PBMoves::AROMATICMIST ||
				move.id == PBMoves::CONVERSION || move.id == PBMoves::ENDURE ||
				move.id == PBMoves::ENTRAINMENT || move.id == PBMoves::FORESIGHT || 
				move.id == PBMoves::FORESTSCURSE || move.id == PBMoves::DEFOG || 
				move.id == PBMoves::GUARDSWAP || move.id == PBMoves::HEALBLOCK ||
				move.id == PBMoves::IMPRISON || 
				move.id == PBMoves::HELPINGHAND || move.id == PBMoves::MAGICROOM ||
				move.id == PBMoves::MAGNETRISE || 
				move.id == PBMoves::LOCKON || move.id == PBMoves::MINDREADER || 
				move.id == PBMoves::MIRACLEEYE || move.id == PBMoves::MUDSPORT ||
				move.id == PBMoves::NIGHTMARE || move.id == PBMoves::ODORSLEUTH ||
				move.id == PBMoves::POWERSPLIT || move.id == PBMoves::POWERSWAP ||
				move.id == PBMoves::GRUDGE || move.id == PBMoves::GUARDSPLIT ||
				move.id == PBMoves::POWERTRICK || move.id == PBMoves::QUICKGUARD ||
				move.id == PBMoves::RECYCLE || move.id == PBMoves::REFLECTTYPE ||
				move.id == PBMoves::ROTOTILLER || move.id == PBMoves::SANDATTACK ||
				move.id == PBMoves::SKILLSWAP || move.id == PBMoves::SNATCH ||
				move.id == PBMoves::MAGICCOAT || 
				move.id == PBMoves::TEETERDANCE || move.id == PBMoves::WATERSPORT)
			return 5
		elsif (move.id == PBMoves::ACUPRESSURE || move.id == PBMoves::CAMOUFLAGE ||      
				move.id == PBMoves::CHARM || move.id == PBMoves::CONFIDE ||
				move.id == PBMoves::DEFENSECURL || move.id == PBMoves::GROWTH ||
				move.id == PBMoves::EMBARGO || move.id == PBMoves::FLASH ||
				move.id == PBMoves::FOCUSENERGY || move.id == PBMoves::GROWL ||
				move.id == PBMoves::HARDEN || move.id == PBMoves::HAZE ||
				move.id == PBMoves::HOWL ||
				move.id == PBMoves::KINESIS || move.id == PBMoves::LEER ||
				move.id == PBMoves::METALSOUND || move.id == PBMoves::NOBLEROAR ||
				move.id == PBMoves::PLAYNICE || move.id == PBMoves::POWDER ||
				move.id == PBMoves::PSYCHUP || move.id == PBMoves::SHARPEN ||
				move.id == PBMoves::SMOKESCREEN || move.id == PBMoves::STRINGSHOT ||
				move.id == PBMoves::SUPERSONIC || move.id == PBMoves::TAILWHIP ||
				move.id == PBMoves::TORMENT ||
				move.id == PBMoves::WITHDRAW || move.id == PBMoves::WORKUP)
			return 10
		elsif (move.id == PBMoves::ASSIST || move.id == PBMoves::BABYDOLLEYES || 
				move.id == PBMoves::CAPTIVATE || move.id == PBMoves::COTTONSPORE ||
				move.id == PBMoves::AGILITY ||
				move.id == PBMoves::DOUBLETEAM || move.id == PBMoves::EERIEIMPULSE ||
				move.id == PBMoves::FAKETEARS || move.id == PBMoves::FEATHERDANCE ||
				move.id == PBMoves::HEALPULSE || move.id == PBMoves::HEALINGWISH ||
				move.id == PBMoves::INGRAIN ||
				move.id == PBMoves::LUNARDANCE || move.id == PBMoves::MEFIRST ||
				move.id == PBMoves::MEDITATE || move.id == PBMoves::MIMIC ||
				move.id == PBMoves::POISONPOWDER ||
				move.id == PBMoves::REFRESH || move.id == PBMoves::ROLEPLAY ||
				move.id == PBMoves::SCARYFACE || move.id == PBMoves::SCREECH ||
				move.id == PBMoves::SKETCH ||
				move.id == PBMoves::TICKLE || move.id == PBMoves::CHARGE ||
				move.id == PBMoves::TRICKORTREAT || move.id == PBMoves::VENOMDRENCH ||
				move.id == PBMoves::MAGNETICFLUX || move.id == PBMoves::FALLOUT ||
				move.id == PBMoves::SANDSTORM || move.id == PBMoves::HAIL ||
				move.id == PBMoves::SUNNYDAY || move.id == PBMoves::RAINDANCE)
			return 15
		elsif (move.id == PBMoves::AQUARING || move.id == PBMoves::BLOCK ||
				move.id == PBMoves::CONVERSION2 || move.id == PBMoves::ELECTRIFY ||
				move.id == PBMoves::FLATTER || move.id == PBMoves::GASTROACID ||
				move.id == PBMoves::HEARTSWAP || move.id == PBMoves::IONDELUGE ||
				move.id == PBMoves::MEANLOOK ||
				move.id == PBMoves::METRONOME || move.id == PBMoves::COPYCAT ||
				move.id == PBMoves::MIRRORMOVE || move.id == PBMoves::MIST ||
				move.id == PBMoves::PERISHSONG || move.id == PBMoves::REST ||
				move.id == PBMoves::ROAR || move.id == PBMoves::SIMPLEBEAM || 
				move.id == PBMoves::SPIDERWEB || move.id == PBMoves::FLOWERSHIELD ||
				move.id == PBMoves::SWAGGER || move.id == PBMoves::SWEETKISS ||
				move.id == PBMoves::POISONGAS || 
				move.id == PBMoves::TRANSFORM || move.id == PBMoves::WHIRLWIND ||
				move.id == PBMoves::WORRYSEED || move.id == PBMoves::YAWN)
			return 20
		elsif (move.id == PBMoves::AMNESIA || move.id == PBMoves::ATTRACT ||
				move.id == PBMoves::BARRIER || move.id == PBMoves::BELLYDRUM ||
				move.id == PBMoves::DESTINYBOND ||
				move.id == PBMoves::DETECT || move.id == PBMoves::DISABLE ||
				move.id == PBMoves::ACIDARMOR || move.id == PBMoves::COSMICPOWER ||
				move.id == PBMoves::COTTONGUARD || move.id == PBMoves::DEFENDORDER ||
				move.id == PBMoves::FOLLOWME || move.id == PBMoves::AUTOTOMIZE ||
				move.id == PBMoves::IRONDEFENSE || move.id == PBMoves::MINIMIZE || 
				move.id == PBMoves::PSYCHOSHIFT || move.id == PBMoves::GRAVITY ||
				move.id == PBMoves::RAGEPOWDER || move.id == PBMoves::ROCKPOLISH ||
				move.id == PBMoves::STOCKPILE || move.id == PBMoves::SUBSTITUTE ||
				move.id == PBMoves::SWITCHEROO ||  move.id == PBMoves::SWALLOW ||
				move.id == PBMoves::TAUNT || move.id == PBMoves::TOPSYTURVY ||
				move.id == PBMoves::TRICK)
			return 25
		elsif (move.id == PBMoves::BATONPASS || move.id == PBMoves::BULKUP ||
				move.id == PBMoves::CALMMIND || move.id == PBMoves::COIL || 
				move.id == PBMoves::CURSE || move.id == PBMoves::ELECTRICTERRAIN ||
				move.id == PBMoves::ENCORE || move.id == PBMoves::SOAK ||
				move.id == PBMoves::LEECHSEED || 
				move.id == PBMoves::PAINSPLIT ||
				move.id == PBMoves::WISH ||
				move.id == PBMoves::GRASSYTERRAIN || move.id == PBMoves::MISTYTERRAIN ||
				move.id == PBMoves::NATUREPOWER || 
				move.id == PBMoves::SLEEPTALK ||
				move.id == PBMoves::TRICKROOM || move.id == PBMoves::WONDERROOM)
			return 30
		elsif (move.id == PBMoves::AROMATHERAPY || move.id == PBMoves::NUCLEARWASTE ||
				move.id == PBMoves::HEALBELL || move.id == PBMoves::LOVELYKISS || 
				move.id == PBMoves::LIGHTSCREEN || move.id == PBMoves::MATBLOCK ||
				move.id == PBMoves::NASTYPLOT || move.id == PBMoves::REFLECT ||
				move.id == PBMoves::TAILWIND || move.id == PBMoves::SPIKES ||
				move.id == PBMoves::STEALTHROCK || move.id == PBMoves::THUNDERWAVE ||
				move.id == PBMoves::WILLOWISP ||  move.id == PBMoves::TOXICSPIKES ||
				move.id == PBMoves::TOXIC || move.id == PBMoves::GLARE ||
				move.id == PBMoves::SING || move.id == PBMoves::PARTINGSHOT || 
				move.id == PBMoves::GRASSWHISTLE || move.id == PBMoves::WIDEGUARD || 
				move.id == PBMoves::HONECLAWS ||
				move.id == PBMoves::STUNSPORE || move.id == PBMoves::CONFUSERAY || 
				move.id == PBMoves::SWORDSDANCE || move.id == PBMoves::TAILGLOW)
			return 35
		elsif (move.id == PBMoves::DRAGONDANCE || move.id == PBMoves::GEOMANCY ||
				move.id == PBMoves::QUIVERDANCE || move.id == PBMoves::SHELLSMASH ||
				move.id == PBMoves::SHIFTGEAR)
			return 40
		elsif (move.id == PBMoves::STICKYWEB || move.id == PBMoves::ROOST ||
				move.id == PBMoves::SLACKOFF || move.id == PBMoves::MILKDRINK ||
				move.id == PBMoves::HEALORDER || move.id == PBMoves::MOONLIGHT || move.id == PBMoves::MORNINGSUN ||
				move.id == PBMoves::SOFTBOILED ||	move.id == PBMoves::SYNTHESIS || 
				move.id == PBMoves::RECOVER || move.id == PBMoves::CHEMOTHERAPY)
			return 60
		elsif (move.id == PBMoves::HYPNOSIS || move.id == PBMoves::SLEEPPOWDER ||
				move.id == PBMoves::SPORE || move.id == PBMoves::PROTECT ||
				move.id == PBMoves::SHADOWVEIL || move.id == PBMoves::DARKVOID ||
				move.id == PBMoves::SPIKYSHIELD || move.id == PBMoves::KINGSSHIELD) 
			return 100			
		end
	end
	
	def pbAegislashStats(aegi)
		if aegi.form==1
			return aegi
		else
			bladecheck = aegi.clone
			bladecheck.stages = aegi.stages.clone
			bladecheck.form = 1
			if $fefieldeffect==31 && bladecheck.stages[PBStats::ATTACK]<6
				bladecheck.stages[PBStats::ATTACK] += 1
			end
			return bladecheck
		end
	end
	
	def pbMegaStats(pkmn)
		if pkmn.form==1
			return pkmn
		else
			megacheck = pkmn.clone
			megacheck.stages = pkmn.stages.clone
			megacheck.form = 1
			return megacheck
		end
	end		
	
	def pbRoughDamage(move,attacker,opponent,skill,basedamage)
		if opponent.species==0 || attacker.species==0
			return 0
		end
		if move.basedamage==0
			return 0
		end
		if attacker.effects[PBEffects::GoneRogue]			
			return 0
		end
		if skill>=PBTrainerAI.highSkill
			basedamage = pbBetterBaseDamage(move,attacker,opponent,skill,basedamage)
		end
		# Fixed damage moves
		return basedamage if move.function==0x6A ||   # SonicBoom
		move.function==0x6B ||   # Dragon Rage
		move.function==0x6C ||   # Super Fang
		move.function==0x6D ||   # Night Shade
		move.function==0x6E ||   # Endeavor
		move.function==0x6F ||   # Psywave
		move.function==0x70 ||   # OHKO
		move.function==0x71 ||   # Counter
		move.function==0x72 ||   # Mirror Coat
		move.function==0x73 ||   # Metal Burst
		move.function==0xD4 ||   # Bide
		move.function==0xE1      # Final Gambit
		type=move.type
		# Type Boosting abilities - Moved later to match pbCalcDamage
		#    if skill>=PBTrainerAI.mediumSkill
		#      if isConst?(type,PBTypes,:NORMAL) &&
		#        (attacker.hasWorkingAbility(:AERILATE) ||
		#        attacker.hasWorkingAbility(:REFRIGERATE) ||
		#        attacker.hasWorkingAbility(:GALVANIZE) ||
		#        attacker.hasWorkingAbility(:PIXILATE))
		#        basedamage=(basedamage*1.3).round
		#      end
		#    end
		# More accurate move type (includes Normalize, most type-changing moves, etc.)
		if skill>=PBTrainerAI.minimumSkill
			type=move.pbType(type,attacker,opponent)
		end
		# Technician
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:TECHNICIAN) && basedamage<=60
				basedamage=(basedamage*1.5).round
			end
		end
		# Acceleration
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:ACCELERATION)
				if (move.id == PBMoves::AQUAJET || move.id == PBMoves::BULLETPUNCH ||
						move.id == PBMoves::EXTREMESPEED || move.id == PBMoves::FAKEOUT ||
						move.id == PBMoves::FEINT || move.id == PBMoves::FLAMEIMPACT ||
						move.id == PBMoves::ICESHARD || move.id == PBMoves::INSTANTCRUSH ||
						move.id == PBMoves::MACHPUNCH || move.id == PBMoves::QUICKATTACK ||
						move.id == PBMoves::SHADOWSNEAK || move.id == PBMoves::SUCKERPUNCH ||
						move.id == PBMoves::SUDDENSTRIKE || move.id == PBMoves::PLASMARUSH)
					basedamage=(basedamage*1.5).round
				end
			end
		end
		# Iron Fist
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:IRONFIST) && move.isPunchingMove?
				basedamage=(basedamage*1.2).round
			end
		end
		# Soundboost/Punk Rock
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:PUNKROCK) && (move.id==3 || move.id==30 || move.id==161 || move.id==272|| move.id==275 || move.id==286 || move.id==297 ||
					move.id==305 || move.id==312 || move.id==613 || move.id==617 || move.id==709)
				basedamage=(basedamage*1.3).round
			end
		end
		# Soundboost/Punk Rock
		if skill>=PBTrainerAI.mediumSkill
			if opponent.hasWorkingAbility(:PUNKROCK) && (move.id==3 || move.id==30 || move.id==161 || move.id==272|| move.id==275 || move.id==286 || move.id==297 ||
					move.id==305 || move.id==312 || move.id==613 || move.id==617 || move.id==709)
				basedamage=(basedamage*0.5).round
			end
		end
		# Strong Jaw
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:STRONGJAW)
				if (move.id == PBMoves::BITE || move.id == PBMoves::CRUNCH ||
						move.id == PBMoves::THUNDERFANG || move.id == PBMoves::FIREFANG ||
						move.id == PBMoves::ICEFANG || move.id == PBMoves::POISONFANG ||
						move.id == PBMoves::METALCRUNCHER || move.id == PBMoves::FUSIONBITE || move.id == PBMoves::HYPERFANG)
					basedamage=(basedamage*1.5).round
				end
			end
		end
		# Mega Launcher
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(attacker.ability,PBAbilities,:MEGALAUNCHER) || (isConst?(attacker.species,PBSpecies,:S51A) && attacker.item == PBItems::UNIDENTIFIEDFALLENOBJECT && attacker.willmega)
				if id == PBMoves::AURASPHERE || id == PBMoves::DRAGONPULSE || id==PBMoves::MOONBLAST || id==PBMoves::SPIKECANNON || id==PBMoves::ZAPCANNON ||
					id == PBMoves::DARKPULSE || id == PBMoves::WATERPULSE || id == PBMoves::ORIGINPULSE || id==PBMoves::HYDROCANNON ||
					id == PBMoves::FIREBLAST || id==PBMoves::FOCUSBLAST || id==PBMoves::FLASHCANNON || id==PBMoves::LASERPULSE
					basedamage=(basedamage*1.5).round
				end
			end  
		end	
		# Tough Claws
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:TOUGHCLAWS) && move.isContactMove?
				basedamage=(basedamage*1.3).round
			end
		end
		# Reckless
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:RECKLESS) || (attacker.species==PBSpecies::INFLAGETAH && (attacker.item == PBItems::INFLAGETITE || attacker.PULSE3) && attacker.willmega)
				if move.function==0xFA ||  # Take Down, etc.
					move.function==0xFB ||  # Double-Edge, etc.
					move.function==0xFC ||  # Head Smash
					move.function==0xFD ||  # Volt Tackle
					move.function==0xFE ||  # Flare Blitz
					move.function==0x10B		 # Jump Kick, Hi Jump Kick
					basedamage=(basedamage*1.3).round
				end
			end
		end
		# Flare Boost
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:FLAREBOOST) &&
				attacker.status==PBStatuses::BURN && 
				move.pbIsSpecial?(type)
				basedamage=(basedamage*1.5).round
			end
		end
		# Toxic Boost
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:TOXICBOOST) &&
				attacker.status==PBStatuses::POISON && move.pbIsPhysical?(type)
				basedamage=(basedamage*1.5).round
			end
		end
		# Analytic
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:ANALYTIC) && opponent.hasMovedThisRound?
				basedamage = (basedamage*1.3).round
			end
		end
		# Rivalry
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:RIVALRY) &&
				attacker.gender!=2 && opponent.gender!=2
				if attacker.gender==opponent.gender
					basedamage=(basedamage*1.25).round
				end
			end
		end
		# Sand Force
		if skill>=PBTrainerAI.mediumSkill
			if (attacker.hasWorkingAbility(:SANDFORCE) || (isConst?(attacker.species,PBSpecies,:DRILGANN) && (attacker.item == PBItems::DRILGANNITE || attacker.PULSE3) && attacker.willmega)) &&
				pbWeather==PBWeather::SANDSTORM &&
				(isConst?(type,PBTypes,:ROCK) ||
					isConst?(type,PBTypes,:GROUND) ||
					isConst?(type,PBTypes,:STEEL))
				basedamage=(basedamage*1.3).round
			end
		end
		# Heatproof
		if skill>=PBTrainerAI.mediumSkill
			if (opponent.hasWorkingAbility(:HEATPROOF) || (isConst?(opponent.species,PBSpecies,:METALYNX) && opponent.item == PBItems::METALYNXITE && opponent.willmega)) &&
				isConst?(type,PBTypes,:FIRE) && move.id != PBMoves::INFERNALBLADE && !opponent.moldbroken &&
				!(((isConst?(attacker.species,PBSpecies,:GYARADOS) && (attacker.item == PBItems::GYARADOSITE || attacker.PULSE3))) && attacker.willmega)
				basedamage=(basedamage*0.01).round
			end
		end
		# Dry Skin
		if skill>=PBTrainerAI.mediumSkill
			if opponent.hasWorkingAbility(:DRYSKIN) &&
				isConst?(type,PBTypes,:FIRE)
				basedamage=(basedamage*1.25).round
			end
		end
		# Sheer Force
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:SHEERFORCE) && move.addlEffect>0
				basedamage=(basedamage*1.3).round
			end
		end
		# Razor Fang
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingItem(:RAZORFANG)
				if (move.id == PBMoves::BITE || move.id == PBMoves::CRUNCH ||
						move.id == PBMoves::THUNDERFANG || move.id == PBMoves::FIREFANG ||
						move.id == PBMoves::ICEFANG || move.id == PBMoves::POISONFANG ||
						move.id == PBMoves::FUSIONBITE || move.id == PBMoves::HYPERFANG)
					basedamage=(basedamage*1.5).round
				end
			end
		end		
		# Type-boosting items
		if skill>=PBTrainerAI.mediumSkill
			if (attacker.hasWorkingItem(:SILKSCARF) && isConst?(type,PBTypes,:NORMAL)) ||
				(attacker.hasWorkingItem(:BLACKBELT) && isConst?(type,PBTypes,:FIGHTING)) ||
				(attacker.hasWorkingItem(:SHARPBEAK) && isConst?(type,PBTypes,:FLYING)) ||
				(attacker.hasWorkingItem(:POISONBARB) && isConst?(type,PBTypes,:POISON)) ||
				(attacker.hasWorkingItem(:SOFTSAND) && isConst?(type,PBTypes,:GROUND)) ||
				(attacker.hasWorkingItem(:HARDSTONE) && isConst?(type,PBTypes,:ROCK)) ||
				(attacker.hasWorkingItem(:SILVERPOWDER) && isConst?(type,PBTypes,:BUG)) ||
				(attacker.hasWorkingItem(:SPELLTAG) && isConst?(type,PBTypes,:GHOST)) ||
				(attacker.hasWorkingItem(:METALCOAT) && isConst?(type,PBTypes,:STEEL)) ||
				(attacker.hasWorkingItem(:CHARCOAL) && isConst?(type,PBTypes,:FIRE)) ||
				(attacker.hasWorkingItem(:MYSTICWATER) && isConst?(type,PBTypes,:WATER)) ||
				(attacker.hasWorkingItem(:MIRACLESEED) && isConst?(type,PBTypes,:GRASS)) ||
				(attacker.hasWorkingItem(:MAGNET) && isConst?(type,PBTypes,:ELECTRIC)) ||
				(attacker.hasWorkingItem(:TWISTEDSPOON) && isConst?(type,PBTypes,:PSYCHIC)) ||
				(attacker.hasWorkingItem(:NEVERMELTICE) && isConst?(type,PBTypes,:ICE)) ||
				(attacker.hasWorkingItem(:DRAGONFANG) && isConst?(type,PBTypes,:DRAGON)) ||
				(attacker.hasWorkingItem(:BLACKGLASSES) && isConst?(type,PBTypes,:DARK))
				(attacker.hasWorkingItem(:PRETTYRIBBON) && isConst?(type,PBTypes,:FAIRY))				
				basedamage=(basedamage*1.2).round
			end
			if (attacker.hasWorkingItem(:FISTPLATE) && isConst?(type,PBTypes,:FIGHTING)) ||
				(attacker.hasWorkingItem(:SKYPLATE) && isConst?(type,PBTypes,:FLYING)) ||
				(attacker.hasWorkingItem(:TOXICPLATE) && isConst?(type,PBTypes,:POISON)) ||
				(attacker.hasWorkingItem(:EARTHPLATE) && isConst?(type,PBTypes,:GROUND)) ||
				(attacker.hasWorkingItem(:STONEPLATE) && isConst?(type,PBTypes,:ROCK)) ||
				(attacker.hasWorkingItem(:INSECTPLATE) && isConst?(type,PBTypes,:BUG)) ||
				(attacker.hasWorkingItem(:SPOOKYPLATE) && isConst?(type,PBTypes,:GHOST)) ||
				(attacker.hasWorkingItem(:IRONPLATE) && isConst?(type,PBTypes,:STEEL)) ||
				(attacker.hasWorkingItem(:FLAMEPLATE) && isConst?(type,PBTypes,:FIRE)) ||
				(attacker.hasWorkingItem(:SPLASHPLATE) && isConst?(type,PBTypes,:WATER)) ||
				(attacker.hasWorkingItem(:MEADOWPLATE) && isConst?(type,PBTypes,:GRASS)) ||
				(attacker.hasWorkingItem(:ZAPPLATE) && isConst?(type,PBTypes,:ELECTRIC)) ||
				(attacker.hasWorkingItem(:MINDPLATE) && isConst?(type,PBTypes,:PSYCHIC)) ||
				(attacker.hasWorkingItem(:ICICLEPLATE) && isConst?(type,PBTypes,:ICE)) ||
				(attacker.hasWorkingItem(:DRACOPLATE) && isConst?(type,PBTypes,:DRAGON)) ||
				(attacker.hasWorkingItem(:DREADPLATE) && isConst?(type,PBTypes,:DARK)) ||
				(attacker.hasWorkingItem(:PIXIEPLATE) && isConst?(type,PBTypes,:FAIRY))
				basedamage=(basedamage*1.2).round
			end
			if (attacker.hasWorkingItem(:NORMALGEM) && isConst?(type,PBTypes,:NORMAL)) ||
				(attacker.hasWorkingItem(:FIGHTINGGEM) && isConst?(type,PBTypes,:FIGHTING)) ||
				(attacker.hasWorkingItem(:FLYINGGEM) && isConst?(type,PBTypes,:FLYING)) ||
				(attacker.hasWorkingItem(:POISONGEM) && isConst?(type,PBTypes,:POISON)) ||
				(attacker.hasWorkingItem(:GROUNDGEM) && isConst?(type,PBTypes,:GROUND)) ||
				(attacker.hasWorkingItem(:ROCKGEM) && isConst?(type,PBTypes,:ROCK)) ||
				(attacker.hasWorkingItem(:BUGGEM) && isConst?(type,PBTypes,:BUG)) ||
				(attacker.hasWorkingItem(:GHOSTGEM) && isConst?(type,PBTypes,:GHOST)) ||
				(attacker.hasWorkingItem(:STEELGEM) && isConst?(type,PBTypes,:STEEL)) ||
				(attacker.hasWorkingItem(:FIREGEM) && isConst?(type,PBTypes,:FIRE)) ||
				(attacker.hasWorkingItem(:WATERGEM) && isConst?(type,PBTypes,:WATER)) ||
				(attacker.hasWorkingItem(:GRASSGEM) && isConst?(type,PBTypes,:GRASS)) ||
				(attacker.hasWorkingItem(:ELECTRICGEM) && isConst?(type,PBTypes,:ELECTRIC)) ||
				(attacker.hasWorkingItem(:PSYCHICGEM) && isConst?(type,PBTypes,:PSYCHIC)) ||
				(attacker.hasWorkingItem(:ICEGEM) && isConst?(type,PBTypes,:ICE)) ||
				(attacker.hasWorkingItem(:DRAGONGEM) && isConst?(type,PBTypes,:DRAGON)) ||
				(attacker.hasWorkingItem(:DARKGEM) && isConst?(type,PBTypes,:DARK)) ||
				(attacker.hasWorkingItem(:FAIRYGEM) && isConst?(type,PBTypes,:FAIRY))
				basedamage=(basedamage*1.3).round
			end
			if attacker.hasWorkingItem(:ROCKINCENSE) && isConst?(type,PBTypes,:ROCK)
				basedamage=(basedamage*1.2).round
			end
			if attacker.hasWorkingItem(:ROSEINCENSE) && isConst?(type,PBTypes,:GRASS)
				basedamage=(basedamage*1.2).round
			end
			if attacker.hasWorkingItem(:SEAINCENSE) && isConst?(type,PBTypes,:WATER)
				basedamage=(basedamage*1.2).round
			end
			if attacker.hasWorkingItem(:WAVEINCENSE) && isConst?(type,PBTypes,:WATER)
				basedamage=(basedamage*1.2).round
			end
			if attacker.hasWorkingItem(:ODDINCENSE) && isConst?(type,PBTypes,:PSYCHIC)
				basedamage=(basedamage*1.2).round
			end
			# Muscle Band
			if attacker.hasWorkingItem(:MUSCLEBAND) && move.pbIsPhysical?(type)
				basedamage=(basedamage*1.1).round
			end
			# Wise Glasses
			if attacker.hasWorkingItem(:WISEGLASSES) && move.pbIsSpecial?(type)
				basedamage=(basedamage*1.1).round
			end
		end
		# pbBaseDamageMultiplier - TODO
		# Me First
		# Charge
		if skill>=PBTrainerAI.mediumSkill
			if attacker.effects[PBEffects::Charge]>0 && isConst?(type,PBTypes,:ELECTRIC)
				basedamage=(basedamage*2.0).round
			end
		end
		# Helping Hand 
		if skill>=PBTrainerAI.mediumSkill
			if attacker.effects[PBEffects::HelpingHand]
				basedamage=(basedamage*1.5).round
			end    
		end
		# Water Sport
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(type,PBTypes,:FIRE)
				if opponent.pbOwnSide.effects[PBEffects::WaterSport]>0
					basedamage=(basedamage*0.33).round
				end
			end
		end
		# Mud Sport
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(type,PBTypes,:ELECTRIC)
				if opponent.pbOwnSide.effects[PBEffects::MudSport]>0
					basedamage=(basedamage*0.33).round
				end
			end
		end
		# Aerilate
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(type,PBTypes,:NORMAL) &&
				isConst?(attacker.ability,PBAbilities,:AERILATE)
				basedamage=(basedamage*1.3).round
			end
		end
		# Galvanize
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(type,PBTypes,:NORMAL) &&
				isConst?(attacker.ability,PBAbilities,:ENERGIZATE)
				if skill>=PBTrainerAI.bestSkill
					basedamage=(basedamage*1.3).round
				end
			end
		end
		# Dark Aura/Aurabreak
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(type,PBTypes,:DARK)
				for i in @battlers
					if isConst?(i.ability,PBAbilities,:DARKAURA)
						breakaura=0
						for j in @battlers
							if isConst?(j.ability,PBAbilities,:AURABREAK)
								breakaura+=1
							end
						end
						if breakaura!=0
							basedamage=(basedamage*2/3).round
						else
							basedamage=(basedamage*1.3).round
						end
					end
				end
			end
		end
		# Fairy Aura/Aurabreak
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(type,PBTypes,:FAIRY)
				for i in @battlers
					if isConst?(i.ability,PBAbilities,:FAIRYAURA)
						breakaura=0
						for j in @battlers
							if isConst?(j.ability,PBAbilities,:AURABREAK)
								breakaura+=1
							end
						end
						if breakaura!=0
							basedamage=(basedamage*2/3).round
						else
							basedamage=(basedamage*1.3).round
						end
					end
				end
			end
		end
		# Pixilate
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(type,PBTypes,:NORMAL) &&
				(isConst?(attacker.ability,PBAbilities,:PIXILATE) || (isConst?(attacker.species,PBSpecies,:SYRENTIDE) && attacker.item == PBItems::SYRENTIDEITE && attacker.willmega))
				if skill>=PBTrainerAI.bestSkill
					basedamage=(basedamage*1.3).round
				end
			end
		end
		# Refrigerate
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(type,PBTypes,:NORMAL) &&
				isConst?(attacker.ability,PBAbilities,:REFRIGERATE)
				if skill>=PBTrainerAI.bestSkill
					basedamage=(basedamage*1.3).round
				end
			end
		end
		# Atomizate
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(type,PBTypes,:NORMAL) &&
				isConst?(attacker.ability,PBAbilities,:ATOMIZATE)
				if skill>=PBTrainerAI.bestSkill
					basedamage=(basedamage*1.3).round
				end
			end
		end
		# Normalize
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(attacker.ability,PBAbilities,:NORMALIZE)
				basedamage=(basedamage*1.3).round
			end
		end
		# Knock Off
		if skill>=PBTrainerAI.mediumSkill
			if move.id == PBMoves::KNOCKOFF && (!opponent.hasWorkingAbility(:STICKYHOLD) || opponent.moldbroken) &&
				opponent.item && !pbIsUnlosableItem(opponent,opponent.item)
				basedamage=(basedamage*1.5).round
			end
		end
		# Specific Field Effect Boosts
		if skill>=PBTrainerAI.bestSkill
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:WHIMSICOTT) && j.item == PBItems::WHIMSICOTTITE && j.willmega)
					theresone=true
				end
			end			
			if @field.effects[PBEffects::GrassyTerrain]>0 || theresone				
				if (move.id == PBMoves::EARTHQUAKE || move.id == PBMoves::MAGNITUDE || move.id == PBMoves::BULLDOZE)
					basedamage=(basedamage*0.5).round
				end
			end						
		end
		# Get base attack stat
		atk=pbRoughStat(attacker,PBStats::ATTACK,skill)
		#~ if attacker.species==681
		#~ dummymon = pbAegislashStats(attacker)
		#~ atk=pbRoughStat(dummymon,PBStats::ATTACK,skill)
		#~ end
		#~ if (attacker.species==PBSpecies::ARCHILLES && attacker.item == PBItems::ARCHILLESITE && attacker.willmega) ||
		#~ (attacker.species==PBSpecies::ELECTRUXO && attacker.item == PBItems::ELECTRUXOLITE && attacker.willmega) ||
		#~ (attacker.species==PBSpecies::METALYNX && attacker.item == PBItems::METALYNXITE && attacker.willmega) 
		#~ dummymon = pbMegaStats(attacker)
		#~ atk=pbRoughStat(dummymon,PBStats::ATTACK,skill)
		#~ print atk			
		#~ dummymon.form=0
		#~ end		
		if move.function==0x121 # Foul Play
			atk=pbRoughStat(opponent,PBStats::ATTACK,skill)
		end
		if move.function==0x173 # Body Press
			atk=pbRoughStat(attacker,PBStats::DEFENSE,skill)
		end		
		if type>=0 && move.pbIsSpecial?(type)
			atk=pbRoughStat(attacker,PBStats::SPATK,skill)
			#~ if attacker.species==681
			#~ dummymon = pbAegislashStats(attacker)
			#~ atk=pbRoughStat(dummymon,PBStats::SPATK,skill)
			#~ end
			#~ if attacker.species==PBSpecies::ARCHILLES && attacker.item == PBItems::ARCHILLESITE && attacker.willmega
			#~ dummymon = pbMegaStats(attacker)
			#~ atk=pbRoughStat(dummymon,PBStats::SPATK,skill)
			#~ end				
			if move.function==0x121 # Foul Play
				atk=pbRoughStat(opponent,PBStats::SPATK,skill)
			end
		end
		# Hustle
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:HUSTLE) && move.pbIsPhysical?(type)
				atk=(atk*1.5).round
			end
		end
		# Thick Fat
		if skill>=PBTrainerAI.mediumSkill
			if opponent.hasWorkingAbility(:THICKFAT) &&
				(isConst?(type,PBTypes,:ICE) || isConst?(type,PBTypes,:FIRE))
				atk=(atk*0.5).round
			end
		end
		# Pinch abilities
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hp<=(attacker.totalhp/3).floor
				if (attacker.hasWorkingAbility(:OVERGROW) && isConst?(type,PBTypes,:GRASS)) ||
					(attacker.hasWorkingAbility(:BLAZE) && isConst?(type,PBTypes,:FIRE)) ||
					(attacker.hasWorkingAbility(:TORRENT) && isConst?(type,PBTypes,:WATER)) ||
					(attacker.hasWorkingAbility(:SWARM) && isConst?(type,PBTypes,:BUG))
					atk=(atk*1.5).round
				end
			end
		end
		# Guts
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:GUTS) &&
				attacker.status!=0 && move.pbIsPhysical?(type)
				atk=(atk*1.5).round
			end
		end
		# Plus, Minus
		if skill>=PBTrainerAI.mediumSkill
			if (attacker.hasWorkingAbility(:PLUS) ||
					attacker.hasWorkingAbility(:MINUS)) && move.pbIsSpecial?(type)
				partner=attacker.pbPartner
				if partner.hasWorkingAbility(:PLUS) || partner.hasWorkingAbility(:MINUS)
					atk=(atk*1.5).round
				end
			end
		end    
		# Defeatist
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:DEFEATIST) &&
				attacker.hp<=(attacker.totalhp/2).floor
				atk=(atk*0.5).round
			end
		end
		# Pure Power, Huge Power
		if skill>=PBTrainerAI.mediumSkill
			if (attacker.hasWorkingAbility(:PUREPOWER) ||
					attacker.hasWorkingAbility(:HUGEPOWER)) && move.pbIsPhysical?(type)
				atk=(atk*2.0).round
			end
		end
		if move.id == PBMoves::SCALD && @pbWeather==PBWeather::SUNNYDAY && !opponent.pbHasType?(:FIRE)
      atk=(atk*2.0).round
		end	
		# Sharp Coral
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:SHARPCORAL)
				atk=(atk*2.0).round
			end
		end
		# Solar Power
		if skill>=PBTrainerAI.mediumSkill
			theresone=false
			therestwo=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ARCHILLES) && j.item == PBItems::ARCHILLESITE && j.willmega)
					theresone=true
				end
			end
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ELECTRUXO) && j.item == PBItems::ELECTRUXOLITE && j.willmega)
					therestwo=true
				end
			end				
			if attacker.hasWorkingAbility(:SOLARPOWER) &&
				(pbWeather==PBWeather::SUNNYDAY || theresone) && !therestwo && move.pbIsSpecial?(type)
				atk=(atk*1.5).round
			end
		end
		# Flash Fire
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:FLASHFIRE) &&
				attacker.effects[PBEffects::FlashFire] && isConst?(type,PBTypes,:FIRE)
				atk=(atk*1.5).round
			end
		end
		# Disenchant
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:DISENCHANT) &&
				attacker.effects[PBEffects::Disenchant] && isConst?(type,PBTypes,:DARK)
				atk=(atk*1.5).round
			end
		end		
		# Slow Start
		if skill>=PBTrainerAI.mediumSkill
			if attacker.hasWorkingAbility(:SLOWSTART) &&
				attacker.turncount<5 && move.pbIsPhysical?(type)
				atk=(atk*0.5).round
			end
		end
		#~ # Flower Gift
		#~ if skill>=PBTrainerAI.mediumSkill
		#~ if (pbWeather==PBWeather::SUNNYDAY || $fefieldeffect == 33 || $fefieldeffect == 42 || 
		#~ (attacker.hasWorkingItem(:CHERCREST) && isConst?(attacker.species,PBSpecies,:CHERRIM)) || 
		#~ (attacker.pbPartner.hasWorkingItem(:CHERCREST) && isConst?(attacker.pbPartner.species,PBSpecies,:CHERRIM)) ) && 
		#~ move.pbIsPhysical?(type)
		#~ if attacker.hasWorkingAbility(:FLOWERGIFT) &&
		#~ isConst?(attacker.species,PBSpecies,:CHERRIM)
		#~ atk=(atk*1.5).round
		#~ end
		#~ if attacker.pbPartner.hasWorkingAbility(:FLOWERGIFT) &&
		#~ isConst?(attacker.pbPartner.species,PBSpecies,:CHERRIM)
		#~ atk=(atk*1.5).round
		#~ end
		#~ end
		#~ end
		# Attack-boosting items
		if skill>=PBTrainerAI.highSkill
			#    if attacker.hasWorkingItem(:SOULDEW) &&
			#       (isConst?(attacker.species,PBSpecies,:LATIAS) ||
			#       isConst?(attacker.species,PBSpecies,:LATIOS)) && move.pbIsSpecial?(type)
			#      atk=(atk*1.5).round
			#    end
			if attacker.hasWorkingItem(:CHOICEBAND) && move.pbIsPhysical?(type)
				atk=(atk*1.5).round
			end
			if attacker.hasWorkingItem(:CHOICESPECS) && move.pbIsSpecial?(type)
				atk=(atk*1.5).round
			end
			if move.pbIsPhysical?(type) 
				atk=atk*(1+attacker.ev[1]/100.0)
			end	
			if move.pbIsSpecial?(type) #&& !@battle.pbOwnedByPlayer?(attacker.index)
				atk=atk*(1+attacker.ev[4]/100.0)
			end	
		end
		# Get base defense stat
		defense=pbRoughStat(opponent,PBStats::DEFENSE,skill)
		applysandstorm=false
		if type>=0 && move.pbIsSpecial?(type)
			if move.function!=0x122 # Psyshock, Coral Break
				defense=pbRoughStat(opponent,PBStats::SPDEF,skill)
				applysandstorm=true
			end
		end
		if opponent.effects[PBEffects::PowerTrick]
			defense=pbRoughStat(opponent,PBStats::ATTACK,skill)
		end
		defense = 1 if (defense == 0 || !defense)
		# Sandstorm weather
		if skill>=PBTrainerAI.mediumSkill
			if pbWeather==PBWeather::SANDSTORM &&
				opponent.pbHasType?(:ROCK) && applysandstorm
				defense=(defense*1.5).round
			end
		end
		# Marvel Scale
		if skill>=PBTrainerAI.mediumSkill
			if (opponent.hasWorkingAbility(:MARVELSCALE)) &&
				move.pbIsPhysical?(type)
				if opponent.status>0   
					defense=(defense*1.5).round
				end
			end
		end
		# Hail
		if skill>=PBTrainerAI.mediumSkill
			if pbWeather==PBWeather::HAIL && move.pbIsPhysical?(type) &&
				opponent.hasWorkingAbility(:SANDVEIL)
				defense=(defense*1.3).round
			end
		end
		# Sand Veil Defense
		if skill>=PBTrainerAI.mediumSkill
			if pbWeather==PBWeather::SANDSTORM && move.pbIsPhysical?(type) &&
				opponent.hasWorkingAbility(:SANDVEIL)
				defense=(defense*1.3).round
			end
		end		
		# Grass Pelt
		if skill>=PBTrainerAI.mediumSkill
			if isConst?(opponent.ability,PBAbilities,:GRASSPELT) && move.pbIsPhysical?(type) &&
				@field.effects[PBEffects::GrassyTerrain]>0 # Grassy Field
				defense=(defense*2).round
			end
		end
		# Fur Coat
		if skill>=PBTrainerAI.mediumSkill
			if opponent.hasWorkingAbility(:FURCOAT) && move.pbIsPhysical?(type) && !(opponent.moldbroken) && move.id != PBMoves::INFERNALBLADE
				defense=(defense*2).round
			end
		end
		# Sharp Coral
		if skill>=PBTrainerAI.mediumSkill
			if opponent.hasWorkingAbility(:SHARPCORAL)
				defense=(defense*0.5).round
			end
		end
		#~ # Flower Gift
		#~ if skill>=PBTrainerAI.mediumSkill
		#~ if (pbWeather==PBWeather::SUNNYDAY || $fefieldeffect == 33 || $fefieldeffect == 42 ||
		#~ (opponent.hasWorkingItem(:CHERCREST) && isConst?(opponent.species,PBSpecies,:CHERRIM)) || 
		#~ (opponent.pbPartner.hasWorkingItem(:CHERCREST) && isConst?(opponent.pbPartner.species,PBSpecies,:CHERRIM)) ) && 
		#~ move.pbIsSpecial?(type)
		#~ if opponent.hasWorkingAbility(:FLOWERGIFT) &&
		#~ isConst?(opponent.species,PBSpecies,:CHERRIM)
		#~ defense=(defense*1.5).round
		#~ end
		#~ if opponent.pbPartner.hasWorkingAbility(:FLOWERGIFT) &&
		#~ isConst?(opponent.pbPartner.species,PBSpecies,:CHERRIM)
		#~ defense=(defense*1.5).round
		#~ end
		#~ end
		#~ end
		# Defense-boosting items
		if skill>=PBTrainerAI.highSkill
			if opponent.hasWorkingItem(:EVIOLITE)
				evos=pbGetEvolvedFormData(opponent.species)
				if evos && evos.length>0
					defense=(defense*1.5).round
				end
			end
			if opponent.hasWorkingItem(:ASSAULTVEST) && move.pbIsSpecial?(type)
				defense=(defense*1.5).round
			end
			if opponent.hasWorkingItem(:DEEPSEASCALE) &&
				isConst?(opponent.species,PBSpecies,:CLAMPERL) && move.pbIsSpecial?(type)
				defense=(defense*2.0).round
			end
			if opponent.hasWorkingItem(:METALPOWDER) &&
				isConst?(opponent.species,PBSpecies,:DITTO) &&
				!opponent.effects[PBEffects::Transform] && move.pbIsPhysical?(type)
				defense=(defense*2.0).round
			end
			if move.pbIsPhysical?(type)
				defense=defense*(1+opponent.ev[2]/100.0)
			end	
			if move.pbIsSpecial?(type) #&& !@battle.pbOwnedByPlayer?(opponent.index)
				defense=defense*(1+opponent.ev[5]/100.0)
			end	
			#      if opponent.hasWorkingItem(:SOULDEW) &&
			#         (isConst?(opponent.species,PBSpecies,:LATIAS) ||
			#         isConst?(opponent.species,PBSpecies,:LATIOS)) && move.pbIsSpecial?(type)
			#        defense=(defense*1.5).round
			#      end
		end
		# Main damage calculation
		damage=(((2.0*attacker.level/5+2).floor*basedamage*atk/defense).floor/50).floor+2 if basedamage >= 0
		# Multi-targeting attacks
		if skill>=PBTrainerAI.mediumSkill
			if move.pbTargetsAll?(attacker)
				damage=(damage*0.75).round
			end
		end
		# Field Boosts
		if skill>=PBTrainerAI.bestSkill
			thereselec=false
			theresgrass=false
			theresmisty=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:AMPHAROS) && j.item == PBItems::AMPHAROSITE && j.willmega)
					thereselec=true
				end
			end	
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:WHIMSICOTT) && j.item == PBItems::WHIMSICOTTITE && j.willmega)
					theresgrass=true
				end
			end
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
					theresmisty=true
				end
			end										
			if @field.effects[PBEffects::ElectricTerrain]>0 || thereselec  # Electric Field
				if isConst?(type,PBTypes,:ELECTRIC)
					damage=(damage*1.5).floor
				end
			elsif @field.effects[PBEffects::GrassyTerrain]>0 || theresgrass  # Grassy Field
				if isConst?(type,PBTypes,:GRASS)
					damage=(damage*1.5).floor
				end
			elsif @field.effects[PBEffects::MistyTerrain]>0 || theresmisty  # Misty Field
				if isConst?(type,PBTypes,:DRAGON)
					damage=(damage*0.5).floor
				end
			end							
		end
		# Weather
		if skill>=PBTrainerAI.mediumSkill
			theresone=false
			therestwo=false
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ARCHILLES) && j.item == PBItems::ARCHILLESITE && j.willmega)
					theresone=true
				end
			end
			for j in @battlers
				if (isConst?(j.species,PBSpecies,:ELECTRUXO) && j.item == PBItems::ELECTRUXOLITE && j.willmega)
					therestwo=true
				end
			end				
			if (pbWeather==PBWeather::SUNNYDAY || theresone) && !therestwo
				if isPrimordialWeather? &&
					isConst?(type,PBTypes,:WATER)
					damage=0
				end
				if isConst?(type,PBTypes,:FIRE)
					damage=(damage*1.5).round
				elsif isConst?(type,PBTypes,:WATER)
					damage=(damage*0.5).round
				end
			elsif (pbWeather==PBWeather::RAINDANCE && !theresone) || therestwo 
				if isPrimordialWeather? &&
					isConst?(type,PBTypes,:FIRE)
					damage=0
				end
				if @doublebattle && (
						(attacker.pbPartner.pbHasMove?(getID(PBMoves,:SUNNYDAY)) && attacker.pbPartner.hasWorkingAbility(:PRANKSTER) && !attacker.hasWorkingAbility(:PRANKSTER))
					)
					if isConst?(type,PBTypes,:FIRE)
						damage=(damage*1.5).round
					elsif isConst?(type,PBTypes,:WATER)
						damage=(damage*0.5).round
					end					
				else	
					if isConst?(type,PBTypes,:FIRE)
						damage=(damage*0.5).round
					elsif isConst?(type,PBTypes,:WATER)
						damage=(damage*1.5).round
					end
				end
			end
		end
		# Critical hits - n/a
		# Random variance - n/a
		# STAB
		if skill>=PBTrainerAI.mediumSkill
			if (attacker.pbHasType?(type) && !(isConst?(attacker.species,PBSpecies,:GYARADOS) && (attacker.item == PBItems::GYARADOSITE || attacker.PULSE3) && attacker.willmega && type == PBTypes::FLYING)) || 
				(attacker.hasWorkingAbility(:ELEMENTALIST) && (type == PBTypes::FIRE || type == PBTypes::ELECTRIC || type == PBTypes::WATER)) ||
				#Some pokemon gain a new type after going mega, and AI won't take the new type into account in the 1st turn.
				(isConst?(attacker.species,PBSpecies,:AMPHAROS) && (attacker.item==PBItems::AMPHAROSITE || attacker.PULSE3) && type == PBTypes::DRAGON && attacker.willmega) ||
				(isConst?(attacker.species,PBSpecies,:GYARADOS) && (attacker.item==PBItems::GYARADOSITE || attacker.PULSE3) && type == PBTypes::DARK && attacker.form==0 && attacker.willmega) ||
				(isConst?(attacker.species,PBSpecies,:ARBOK) && (attacker.item==PBItems::ARBOKITE || attacker.PULSE3) && type == PBTypes::DARK && attacker.willmega) 
				if attacker.hasWorkingAbility(:ADAPTABILITY)
					damage=(damage*2).round
				else
					damage=(damage*1.5).round
				end
			end
		end
		#print damage if move.id == PBMoves::FLAMEIMPACT
		# Type effectiveness
		#    typemod=pbTypeModifierAI(type,attacker,opponent)
		typemod=pbTypeModNoMessages(type,attacker,opponent,move,skill)
		if isConst?(type,PBTypes,:NUCLEAR) && ((attacker.pbSpeed>pbRoughStat(opponent,PBStats::SPEED,skill)) ^ (@trickroom!=0)) && typemod>8
			typemod=8
		end	
		if skill>=PBTrainerAI.minimumSkill
			damage=(damage*typemod*1.0/4).round
		end
		#print damage if move.id == PBMoves::FLAMEIMPACT
		# Burn
		if skill>=PBTrainerAI.mediumSkill
			if attacker.status==PBStatuses::BURN && move.pbIsPhysical?(type) &&
				!attacker.hasWorkingAbility(:GUTS)
				damage=(damage*0.5).round
			end
		end
		# Make sure damage is at least 1
		damage=1 if damage<1
		# Reflect
		if skill>=PBTrainerAI.highSkill
			if opponent.pbOwnSide.effects[PBEffects::Reflect]>0 && move.pbIsPhysical?(type)
				if !opponent.pbPartner.isFainted?
					damage=(damage*0.66).round
				else
					damage=(damage*0.5).round
				end
			end
		end
		# Light Screen
		if skill>=PBTrainerAI.highSkill
			if opponent.pbOwnSide.effects[PBEffects::LightScreen]>0 && move.pbIsSpecial?(type)
				if !opponent.pbPartner.isFainted?
					damage=(damage*0.66).round
				else
					damage=(damage*0.5).round
				end
			end
		end
		# Multiscale
		if skill>=PBTrainerAI.mediumSkill
			if ((opponent.hasWorkingAbility(:MULTISCALE)) || (opponent.hasWorkingAbility(:SHADOWSHIELD))) &&
				opponent.hp==opponent.totalhp
				damage=(damage*0.5).round
			end
		end
		# Tinted Lens
		if skill>=PBTrainerAI.mediumSkill
			if (opponent.hasWorkingAbility(:TINTEDLENS)) && typemod<4
				damage=(damage*2.0).round
			end
		end
		# Friend Guard
		if skill>=PBTrainerAI.mediumSkill
			if opponent.pbPartner.hasWorkingAbility(:FRIENDGUARD)
				damage=(damage*0.75).round
			end
		end
		# Solid Rock, Filter
		if skill>=PBTrainerAI.mediumSkill
			if (opponent.hasWorkingAbility(:SOLIDROCK) || opponent.hasWorkingAbility(:FILTER)) && typemod>4
				damage=(damage*0.75).round
			end
		end
		# Final damage-altering items
		if skill>=PBTrainerAI.highSkill
			if attacker.hasWorkingItem(:METRONOME)
				if attacker.effects[PBEffects::Metronome]>4
					damage=(damage*2.0).round
				else
					met=1.0+attacker.effects[PBEffects::Metronome]*0.2
					damage=(damage*met).round
				end
			end
			if attacker.hasWorkingItem(:EXPERTBELT) && typemod>4
				damage=(damage*1.2).round
			end
			if attacker.hasWorkingItem(:LIFEORB)
				damage=(damage*1.3).round
			end
		end
		if typemod>4 && skill>=PBTrainerAI.highSkill
			if (opponent.hasWorkingItem(:CHOPLEBERRY) && isConst?(type,PBTypes,:FIGHTING) && !(isConst?(opponent.species,PBSpecies,:METALYNX))) ||
				(opponent.hasWorkingItem(:COBABERRY) && isConst?(type,PBTypes,:FLYING)) ||
				(opponent.hasWorkingItem(:KEBIABERRY) && isConst?(type,PBTypes,:POISON)) ||
				(opponent.hasWorkingItem(:SHUCABERRY) && isConst?(type,PBTypes,:GROUND)) ||
				(opponent.hasWorkingItem(:CHARTIBERRY) && isConst?(type,PBTypes,:ROCK)) ||
				(opponent.hasWorkingItem(:TANGABERRY) && isConst?(type,PBTypes,:BUG)) ||
				(opponent.hasWorkingItem(:KASIBBERRY) && isConst?(type,PBTypes,:GHOST)) ||
				(opponent.hasWorkingItem(:BABIRIBERRY) && isConst?(type,PBTypes,:STEEL)) ||
				(opponent.hasWorkingItem(:OCCABERRY) && isConst?(type,PBTypes,:FIRE)) ||
				(opponent.hasWorkingItem(:PASSHOBERRY) && isConst?(type,PBTypes,:WATER)) ||
				(opponent.hasWorkingItem(:RINDOBERRY) && isConst?(type,PBTypes,:GRASS)) ||
				(opponent.hasWorkingItem(:WACANBERRY) && isConst?(type,PBTypes,:ELECTRIC)) ||
				(opponent.hasWorkingItem(:PAYAPABERRY) && isConst?(type,PBTypes,:PSYCHIC)) ||
				(opponent.hasWorkingItem(:YACHEBERRY) && isConst?(type,PBTypes,:ICE)) ||
				(opponent.hasWorkingItem(:HABANBERRY) && isConst?(type,PBTypes,:DRAGON)) ||
				(opponent.hasWorkingItem(:COLBURBERRY) && isConst?(type,PBTypes,:DARK)) ||
				(opponent.hasWorkingItem(:HAFLIBERRY) && isConst?(type,PBTypes,:NUCLEAR)) ||
				(opponent.hasWorkingItem(:ROSELIBERRY) && isConst?(type,PBTypes,:FAIRY))
				damage=(damage*0.5).round
			end
		end
		# pbModifyDamage - TODO
		# "AI-specific calculations below"
		# Increased critical hit rates
		if skill>=PBTrainerAI.mediumSkill
			critrate = pbAICritRate(attacker,opponent,move)
			if critrate==2
				damage=(damage*1.25).round
			elsif critrate>2
				damage=(damage*1.5).round
			end
		end
		#damage*=0.9
		# Random variance
		random=85#+@battle.pbRandom(16)
		damage=(damage*random/100.0).floor				
		#print damage if move.id == PBMoves::FIREBLAST
		return damage
	end
	
	def pbTypeModNoMessages(type,attacker,opponent,move,skill)    
		return 4 if type<0
		id = move.id
		if isConst?(type,PBTypes,:NORMAL) && attacker.hasWorkingAbility(:ENERGIZATE)       
			type=PBTypes::ELECTRIC
		end
		if isConst?(type,PBTypes,:NORMAL) && attacker.hasWorkingAbility(:AERILATE)       
			type=PBTypes::FLYING
		end
		if isConst?(type,PBTypes,:NORMAL) && (attacker.hasWorkingAbility(:PIXILATE) || (isConst?(attacker.species,PBSpecies,:SYRENTIDE) && attacker.item == PBItems::SYRENTIDEITE && attacker.willmega))   
			type=PBTypes::FAIRY
		end
		if isConst?(type,PBTypes,:NORMAL) && attacker.hasWorkingAbility(:REFRIGERATE)       
			type=PBTypes::ICE
		end
		if isConst?(type,PBTypes,:NORMAL) && attacker.hasWorkingAbility(:ATOMIZATE)       
			type=PBTypes::NUCLEAR
		end
		if isConst?(type,PBTypes,:WATER) && pbCheckGlobalAbility(:DEEPFREEZE)    
			type=PBTypes::ICE
		end
		if attacker.hasWorkingAbility(:NORMALIZE)       
			type=PBTypes::NORMAL
		end
		if opponent.hasWorkingAbility(:SAPSIPPER) && !(opponent.moldbroken) && isConst?(type,PBTypes,:GRASS)
			return 0
		end
		if opponent.hasWorkingAbility(:LEVITATE) && !(opponent.moldbroken) && isConst?(type,PBTypes,:GROUND)
			return 0
		end
		if opponent.hasWorkingItem(:AIRBALLOON) && isConst?(type,PBTypes,:GROUND)
			return 0
		end		
		if opponent.hasWorkingAbility(:LEADSKIN) && !(opponent.moldbroken) && isConst?(type,PBTypes,:NUCLEAR)
			return 0
		end
		if opponent.hasWorkingAbility(:DISENCHANT) && !(opponent.moldbroken) && isConst?(type,PBTypes,:FAIRY)
			return 0
		end
		if ((opponent.hasWorkingAbility(:STORMDRAIN) && isConst?(type,PBTypes,:WATER)) ||
				(opponent.hasWorkingAbility(:LIGHTNINGROD) && isConst?(type,PBTypes,:ELECTRIC)) ||
				(opponent.hasWorkingAbility(:SAPSIPPER) && isConst?(type,PBTypes,:GRASS))) &&
			!(opponent.moldbroken)
			return 0
		end
		if (isConst?(opponent.ability,PBAbilities,:MOTORDRIVE)) &&
			(isConst?(type,PBTypes,:ELECTRIC)) &&
			!(opponent.moldbroken)       
			return 0
		end
		if ((opponent.hasWorkingAbility(:DRYSKIN) && !(opponent.moldbroken)) && (isConst?(type,PBTypes,:WATER))) ||
			(opponent.hasWorkingAbility(:VOLTABSORB) && !(opponent.moldbroken) && (isConst?(type,PBTypes,:ELECTRIC))) ||
			(opponent.hasWorkingAbility(:WATERABSORB) && !(opponent.moldbroken) && (isConst?(type,PBTypes,:WATER)))
			if opponent.effects[PBEffects::HealBlock]==0        
				return 0
			end
		end
		if opponent.hasWorkingAbility(:FLASHFIRE) && !(opponent.moldbroken) && move.id != PBMoves::INFERNALBLADE && (isConst?(type,PBTypes,:FIRE))
			return 0
		end
		if opponent.hasWorkingAbility(:DISENCHANT) && !(opponent.moldbroken) && (isConst?(type,PBTypes,:FAIRY))
			return 0
		end		
		#Telepathy
		if opponent.hasWorkingAbility(:TELEPATHY) && 
			move.basedamage>0 &&
			!(opponent.moldbroken)
			partner=attacker.pbPartner
			if opponent.index == partner.index
				return 0
			end
		end
		# UPDATE Implementing Flying Press + Freeze Dry
		faintedcount=0
		for i in pbParty(opponent.index)
			next if i.nil?
			faintedcount+=1 if (i.hp==0 && i.hp!=0)
		end
		if opponent.effects[PBEffects::Illusion]
			if skill>=PBTrainerAI.bestSkill
				if !(opponent.turncount>=1 || faintedcount>2)
					zorovar=true
				else
					zorovar=false
				end
			elsif skill>=PBTrainerAI.highSkill
				if !(faintedcount>4)
					zorovar=true
				else
					zorovar=false
				end
			else
				zorovar=true
			end
		else
			zorovar=false
		end
		typemod=move.pbTypeModifierAI(type,attacker,opponent,zorovar)
		typemod2= nil
		typemod3= nil
		# if $fefieldeffect == 31
		#   if isConst?(type,PBTypes,:STEEL) && (opponent.pbHasType?(PBTypes::DRAGON))
		#    typemod*= 2
		#  end
		# end
		if id == PBMoves::FREEZEDRY && (opponent.pbHasType?(PBTypes::WATER))
			typemod*= 4
		end
		if id == PBMoves::EXPUNGE && (opponent.pbHasType?(PBTypes::NUCLEAR))
			typemod*= 4
		end
		if id == PBMoves::INFERNALBLADE && (opponent.pbHasType?(PBTypes::FAIRY))
			typemod*= 4
		end
		if pbWeather==PBWeather::DELTASTREAM && 
			((opponent.pbHasType?(PBTypes::FLYING)) && 
				!opponent.effects[PBEffects::Roost]) &&
			(isConst?(type,PBTypes,:ELECTRIC) || isConst?(type,PBTypes,:ICE) ||
				isConst?(type,PBTypes,:ROCK))
			typemod /= 2
		end
		if pbWeather==PBWeather::FALLOUT && 
			(opponent.pbHasType?(PBTypes::NUCLEAR)) &&
			((!isConst?(type,PBTypes,:NUCLEAR) && id != PBMoves::EXPUNGE) || !isConst?(type,PBTypes,:POISON))
			typemod /= 2
		end
		if id == PBMoves::FLYINGPRESS
			typemod2=move.pbTypeModifierAI(PBTypes::FLYING,attacker,opponent,zorovar)
			typemod3= ((typemod*typemod2)/4.0)
			typemod=typemod3
		end
		if typemod==0
			if @function==0x111
				return 1
			end
		end
		return typemod
	end
	
	def pbAICritRate(attacker,opponent,move)
		if (opponent.hasWorkingAbility(:BATTLEARMOR) ||
				opponent.hasWorkingAbility(:SHELLARMOR)) &&
			!(opponent.moldbroken) && move.id != PBMoves::INFERNALBLADE
			return 0
		end
		return 0 if opponent.pbOwnSide.effects[PBEffects::LuckyChant]>0
		return 3 if move.function==0xA0 # Frost Breath
		c=0
		c+=attacker.effects[PBEffects::FocusEnergy]
		c+=1 if move.hasHighCriticalRate?
		if (attacker.inHyperMode? rescue false) && isConst?(move.type,PBTypes,:SHADOW)
			c+=1
		end
		c+=1 if attacker.hasWorkingAbility(:SUPERLUCK)
		if attacker.hasWorkingItem(:STICK) &&
			isConst?(attacker.species,PBSpecies,:BARAND)
			c+=2
		end
		#c+=1 if attacker.hasWorkingItem(:RAZORCLAW)
		c+=1 if attacker.hasWorkingItem(:SCOPELENS)
		c=3 if c>3
		return c
	end
	
	def pbRoughAccuracy(move,attacker,opponent,skill)
		# Get base accuracy
		baseaccuracy=move.accuracy
		if skill>=PBTrainerAI.mediumSkill
			if pbWeather==PBWeather::SUNNYDAY &&
				(move.function==0x08 || move.function==0x15) # Thunder, Hurricane
				accuracy=50
			end
		end
		# Accuracy stages
		accstage=attacker.stages[PBStats::ACCURACY]
		accstage=0 if opponent.hasWorkingAbility(:UNAWARE)
		accuracy=(accstage>=0) ? (accstage+3)*100.0/3 : 300.0/(3-accstage)
		evastage=opponent.stages[PBStats::EVASION]
		evastage-=2 if @field.effects[PBEffects::Gravity]>0
		evastage=-6 if evastage<-6
		evastage=0 if opponent.effects[PBEffects::Foresight] ||
		opponent.effects[PBEffects::MiracleEye] ||
		move.function==0xA9 || # Chip Away
		attacker.hasWorkingAbility(:UNAWARE)
		evasion=(evastage>=0) ? (evastage+3)*100.0/3 : 300.0/(3-evastage)
		accuracy*=baseaccuracy/evasion
		# Accuracy modifiers
		if skill>=PBTrainerAI.mediumSkill
			accuracy*=1.3 if attacker.hasWorkingAbility(:COMPOUNDEYES)
			if attacker.hasWorkingItem(:MICLEBERRY)
				accuracy*=1.2 if (attacker.hasWorkingAbility(:GLUTTONY) &&
					attacker.hp<=(attacker.totalhp/2).floor) ||
				attacker.hp<=(attacker.totalhp/4).floor
			end
			accuracy*=1.1 if attacker.hasWorkingAbility(:VICTORYSTAR)
			if skill>=PBTrainerAI.highSkill
				partner=attacker.pbPartner
				accuracy*=1.1 if partner && partner.hasWorkingAbility(:VICTORYSTAR)
			end
			accuracy*=1.1 if attacker.hasWorkingItem(:WIDELENS)
			accuracy*=1.2 if attacker.hasWorkingItem(:ZOOMLENS) && attacker.pbSpeed<opponent.pbSpeed
			if skill>=PBTrainerAI.highSkill
				accuracy*=0.8 if attacker.hasWorkingAbility(:HUSTLE) &&
				move.basedamage>0 &&
				move.pbIsPhysical?(move.pbType(move.type,attacker,opponent))
			end
			if skill>=PBTrainerAI.bestSkill
				accuracy/=2 if opponent.hasWorkingAbility(:WONDERSKIN) &&
				move.basedamage==0 &&
				attacker.pbIsOpposing?(opponent.index)
				accuracy/=1.2 if opponent.hasWorkingAbility(:TANGLEDFEET) &&
				opponent.effects[PBEffects::Confusion]>0
				#~ accuracy/=1.2 if pbWeather==PBWeather::SANDSTORM &&
				#~ opponent.hasWorkingAbility(:SANDVEIL)
				#~ accuracy/=1.2 if pbWeather==PBWeather::HAIL &&
				#~ opponent.hasWorkingAbility(:SNOWCLOAK)
			end
			if skill>=PBTrainerAI.highSkill
				accuracy/=1.1 if opponent.hasWorkingItem(:BRIGHTPOWDER)
				accuracy/=1.1 if opponent.hasWorkingItem(:LAXINCENSE)
			end
		end
		# Override accuracy
		accuracy=100 if move.accuracy==0   # Doesn't do accuracy check (always hits)
		accuracy=100 if move.function==0xA5 # Swift
		if skill>=PBTrainerAI.mediumSkill
			accuracy=100 if opponent.effects[PBEffects::LockOn]>0 &&
			opponent.effects[PBEffects::LockOnPos]==attacker.index
			if skill>=PBTrainerAI.highSkill
				accuracy=100 if attacker.hasWorkingAbility(:NOGUARD) ||
				opponent.hasWorkingAbility(:NOGUARD)
			end
			accuracy=100 if opponent.effects[PBEffects::Telekinesis]>0
			case pbWeather
			when PBWeather::HAIL
				accuracy=100 if move.function==0x0D # Blizzard
			when PBWeather::RAINDANCE
				accuracy=100 if move.function==0x08 || move.function==0x15 # Thunder, Hurricane
			when PBWeather::THUNDERSTORM
				accuracy=100 if move.function==0x08 # Thunder
			when PBWeather::FALLOUT
				accuracy=100 if move.function==0x168 # Expunge
			end
			accuracy=100 if attacker.pbHasType?(:POISON) && move.id==getID(PBMoves,:TOXIC)
			accuracy=100 if attacker.pbHasType?(:NUCLEAR) && move.id==getID(PBMoves,:NUCLEARWASTE)
			accuracy=100 if (move.function==0x10 || move.function==0x9B || move.id==getID(PBMoves,:BODYSLAM) || move.id==getID(PBMoves,:FLYINGPRESS)) &&
			opponent.effects[PBEffects::Minimize] # Flying Press, Stomp, DRush	
			if move.function==0x70 # OHKO moves
				accuracy=move.accuracy+attacker.level-opponent.level
				accuracy=0 if opponent.hasWorkingAbility(:STURDY)
				accuracy=0 if opponent.level>attacker.level
			end
		end
		accuracy=100 if accuracy>100
		return accuracy
	end
	
	def pbGetMonRole(mon,opponent,skill,position=0,party=nil)
		#PBDebug.log(sprintf("Beginning role assignment for %s",PBSpecies.getName(mon.species))) if $INTERNAL
		monRoles=[]
		if mon.class == PokeBattle_Battler
			if (mon.nature==PBNatures::MODEST || 
					mon.nature==PBNatures::JOLLY || mon.nature==PBNatures::TIMID || 
					mon.nature==PBNatures::ADAMANT) || (mon.item==getID(PBItems,:CHOICEBAND) ||
					mon.item==getID(PBItems,:CHOICESPECS) || mon.item==getID(PBItems,:CHOICESCARF))
				monRoles.push("Sweeper")
			end
			healingmove=false
			for i in mon.moves   
				next if i.nil?
				if i.isHealingMove?
					healingmove=true
				end
			end
			if (mon.nature==PBNatures::BOLD || 
					mon.nature==PBNatures::RELAXED || mon.nature==PBNatures::IMPISH || 
					mon.nature==PBNatures::LAX)
				monRoles.push("Physical Wall")
			end
			if (mon.nature==PBNatures::CALM || 
					mon.nature==PBNatures::GENTLE || mon.nature==PBNatures::SASSY || 
					mon.nature==PBNatures::CAREFUL)
				monRoles.push("Special Wall")
			end
			if mon.pokemonIndex==0 ||
				(@doublebattle && mon.pokemonIndex==1)
				monRoles.push("Lead")
			end
			curemove=false
			for i in mon.moves 
				next if i.nil?
				if (i.id == getID(PBMoves,:HEALBELL) || i.id == getID(PBMoves,:AROMATHERAPY))
					curemove=true
				end
			end
			wishmove=false
			for i in mon.moves  
				next if i.nil?
				if (i.id == getID(PBMoves,:WISH))
					wishmove=true
				end
			end
			if curemove || wishmove
				monRoles.push("Cleric")
			end
			if mon.item==getID(PBItems,:LIGHTCLAY) 
				monRoles.push("Screener")
			end
			priorityko=false
			for i in mon.moves
				next if i.nil?
				next if i.priority<1
				dam=pbRoughDamage(i,mon,opponent,skill,i.basedamage)
				if opponent.hp>0
					percentage=(dam*100.0)/opponent.hp
					priorityko=true if percentage>100
				end
			end
			if priorityko || (mon.speed>opponent.speed)
				monRoles.push("Revenge Killer")
			end
			pivotmove=false
			for i in mon.moves
				next if i.nil?
				if (i.id == getID(PBMoves,:UTURN) || i.id == getID(PBMoves,:VOLTSWITCH))
					pivotmove=true
				end
			end
			if (pivotmove && healingmove) || isConst?(mon.ability,PBAbilities,:REGENERATOR)
				monRoles.push("Pivot")
			end
			spinmove=false
			for i in mon.moves
				next if i.nil?
				if (i.id == getID(PBMoves,:RAPIDSPIN))
					spinmove=true
				end
			end
			if spinmove
				monRoles.push("Spinner")
			end
			if ((mon.ev[0]>mon.ev[1] && mon.ev[0]>mon.ev[4]) && !healingmove) || mon.item==getID(PBItems,:ASSAULTVEST)
				monRoles.push("Tank")
			end
			batonmove=false
			for i in mon.moves
				next if i.nil?
				if (i.id == getID(PBMoves,:BATONPASS))
					batonmove=true
				end
			end
			if batonmove
				monRoles.push("Baton Passer")
			end
			tauntmove=false
			for i in mon.moves
				next if i.nil?
				if (i.id == getID(PBMoves,:TAUNT))
					tauntmove=true
				end
			end
			if tauntmove || mon.item==getID(PBItems,:CHOICEBAND) || 
				mon.item==getID(PBItems,:CHOICESPECS)
				monRoles.push("Stallbreaker")
			end
			restmove=false
			for i in mon.moves
				next if i.nil?
				if (i.id == getID(PBMoves,:REST))
					restmove=true
				end
			end
			if restmove || mon.item==getID(PBItems,:TOXICORB) || mon.item==getID(PBItems,:FLAMEORB) || isConst?(mon.ability,PBAbilities,:GUTS) || isConst?(mon.ability,PBAbilities,:QUICKFEET)|| isConst?(mon.ability,PBAbilities,:FLAREBOOST) || isConst?(mon.ability,PBAbilities,:TOXICBOOST) || isConst?(mon.ability,PBAbilities,:NATURALCURE) || isConst?(mon.ability,PBAbilities,:MAGICGUARD) || isConst?(mon.ability,PBAbilities,:MAGICBOUNCE) || (isConst?(mon.species,PBSpecies,:SABLEYE) && mon.item == PBItems::SABLEYEITE) || (isConst?(mon.ability,PBAbilities,:HYDRATION) && pbWeather==PBWeather::RAINDANCE)
				monRoles.push("Status Absorber")
			end
			if isConst?(mon.ability,PBAbilities,:SHADOWTAG) || isConst?(mon.ability,PBAbilities,:ARENATRAP) || isConst?(mon.ability,PBAbilities,:MAGNETPULL)
				monRoles.push("Trapper")
			end
			weathermove=false
			for i in mon.moves
				next if i.nil?
				if (i.id == getID(PBMoves,:SUNNYDAY) || i.id == getID(PBMoves,:RAINDANCE) ||
						i.id == getID(PBMoves,:HAIL) || i.id == getID(PBMoves,:SANDSTORM) || i.id == getID(PBMoves,:THUNDERSTORM || i.id == getID(PBMoves,:FALLOUT)))
					weathermove=true
				end
			end
			if weathermove || isConst?(mon.ability,PBAbilities,:DROUGHT) || (isConst?(mon.species,PBSpecies,:ARCHILLES) && mon.item == PBItems::ARCHILLESITE) || isConst?(mon.ability,PBAbilities,:SANDSTREAM) || isConst?(mon.ability,PBAbilities,:DRIZZLE) || (isConst?(mon.species,PBSpecies,:ELECTRUXO) && mon.item == PBItems::ELECTRUXOLITE) || isConst?(mon.ability,PBAbilities,:SNOWWARNING) || isConst?(mon.ability,PBAbilities,:PRIMORDIALSEA) || isConst?(mon.ability,PBAbilities,:DESOLATELAND) || isConst?(mon.ability,PBAbilities,:DELTASTREAM) || isConst?(mon.ability,PBAbilities,:STORMBRINGER) || isConst?(mon.ability,PBAbilities,:CHERNOBYL)
				monRoles.push("Weather Setter")
			end
			fieldmove=false
			for i in mon.moves
				next if i.nil?
				if (i.id == getID(PBMoves,:GRASSYTERRAIN) || i.id == getID(PBMoves,:ELECTRICTERRAIN) ||
						i.id == getID(PBMoves,:MISTYTERRAIN))
					fieldmove=true
				end
			end
			if fieldmove
				monRoles.push("Field Setter")
			end
			#if $game_switches[1121] && mon.pokemonIndex==(pbParty(mon.index).length-1)
			if mon.pokemonIndex==(pbParty(mon.index).length-1)
				monRoles.push("Ace")
			end
			secondhighest=true
			if pbParty(mon.index).length>2
				for i in 0..(pbParty(mon.index).length-2)
					next if pbParty(mon.index)[i].nil?
					if mon.level<pbParty(mon.index)[i].level
						secondhighest=false
					end
				end
			end
			#if $game_switches[1121]&& secondhighest
			if secondhighest
				monRoles.push("Second")
			end
			#PBDebug.log(sprintf("Ending role assignment for %s",PBSpecies.getName(mon.species))) if $INTERNAL
			#PBDebug.log(sprintf("")) if $INTERNAL
			return monRoles
		elsif mon.class == PokeBattle_Pokemon
			movelist = []
			for i in mon.moves
				next if i.nil?
				movedummy = PokeBattle_Move.pbFromPBMove(self,i)
				movelist.push(movedummy)
			end
			if (mon.nature==PBNatures::MODEST || 
					mon.nature==PBNatures::JOLLY || mon.nature==PBNatures::TIMID || 
					mon.nature==PBNatures::ADAMANT) || (mon.item==getID(PBItems,:CHOICEBAND) ||
					mon.item==getID(PBItems,:CHOICESPECS) || mon.item==getID(PBItems,:CHOICESCARF))
				monRoles.push("Sweeper")
			end
			healingmove=false
			for i in movelist    
				if i.isHealingMove?
					healingmove=true
				end
			end
			if (mon.nature==PBNatures::BOLD || 
					mon.nature==PBNatures::RELAXED || mon.nature==PBNatures::IMPISH || 
					mon.nature==PBNatures::LAX)
				monRoles.push("Physical Wall")
			end
			if (mon.nature==PBNatures::CALM || 
					mon.nature==PBNatures::GENTLE || mon.nature==PBNatures::SASSY || 
					mon.nature==PBNatures::CAREFUL)
				monRoles.push("Special Wall")
			end
			if position==0
				monRoles.push("Lead")
			end
			curemove=false
			for i in movelist
				if (i.id == getID(PBMoves,:HEALBELL) || i.id == getID(PBMoves,:AROMATHERAPY))
					curemove=true
				end
			end
			wishmove=false
			for i in movelist   
				if (i.id == getID(PBMoves,:WISH))
					wishmove=true
				end
			end
			if curemove || wishmove
				monRoles.push("Cleric")
			end
			if mon.item==getID(PBItems,:LIGHTCLAY) 
				monRoles.push("Screener")
			end
			# pbRoughDamage does not take Pokemon objects, this will cause issues
			priorityko=false
			for i in movelist     
				next if i.priority<1
				next if i.basedamage<10
				priorityko=true 
			end
			if priorityko || (mon.speed>opponent.speed)
				monRoles.push("Revenge Killer")
			end
			pivotmove=false
			for i in movelist
				if (i.id == getID(PBMoves,:UTURN) || i.id == getID(PBMoves,:VOLTSWITCH))
					pivotmove=true
				end
			end
			if (pivotmove && healingmove) || isConst?(mon.ability,PBAbilities,:REGENERATOR)
				monRoles.push("Pivot")
			end
			spinmove=false
			for i in movelist
				if (i.id == getID(PBMoves,:RAPIDSPIN))
					spinmove=true
				end
			end
			if spinmove
				monRoles.push("Spinner")
			end
			if ((mon.ev[0]>mon.ev[1] && mon.ev[0]>mon.ev[4]) && !healingmove) || mon.item==getID(PBItems,:ASSAULTVEST)
				monRoles.push("Tank")
			end
			batonmove=false
			for i in movelist
				if (i.id == getID(PBMoves,:BATONPASS))
					batonmove=true
				end
			end
			if batonmove
				monRoles.push("Baton Passer")
			end
			tauntmove=false
			for i in movelist
				if (i.id == getID(PBMoves,:TAUNT))
					tauntmove=true
				end
			end
			if tauntmove || mon.item==getID(PBItems,:CHOICEBAND) || 
				mon.item==getID(PBItems,:CHOICESPECS)
				monRoles.push("Stallbreaker")
			end
			restmove=false
			for i in movelist
				if (i.id == getID(PBMoves,:REST))
					restmove=true
				end
			end
			if restmove || mon.item==getID(PBItems,:TOXICORB) || mon.item==getID(PBItems,:FLAMEORB) || isConst?(mon.ability,PBAbilities,:GUTS) || isConst?(mon.ability,PBAbilities,:QUICKFEET)|| isConst?(mon.ability,PBAbilities,:FLAREBOOST) || isConst?(mon.ability,PBAbilities,:TOXICBOOST) || isConst?(mon.ability,PBAbilities,:NATURALCURE) || isConst?(mon.ability,PBAbilities,:MAGICGUARD) || isConst?(mon.ability,PBAbilities,:MAGICBOUNCE) || (isConst?(mon.species,PBSpecies,:SABLEYE) && mon.item == PBItems::SABLEYEITE) || (isConst?(mon.ability,PBAbilities,:HYDRATION) && pbWeather==PBWeather::RAINDANCE)
				monRoles.push("Status Absorber")
			end
			if isConst?(mon.ability,PBAbilities,:SHADOWTAG) || isConst?(mon.ability,PBAbilities,:ARENATRAP) || isConst?(mon.ability,PBAbilities,:MAGNETPULL)
				monRoles.push("Trapper")
			end
			weathermove=false
			for i in movelist
				if (i.id == getID(PBMoves,:SUNNYDAY) || i.id == getID(PBMoves,:RAINDANCE) ||
						i.id == getID(PBMoves,:HAIL) || i.id == getID(PBMoves,:SANDSTORM) || i.id == getID(PBMoves,:THUNDERSTORM || i.id == getID(PBMoves,:FALLOUT)))
					weathermove=true
				end
			end
			if weathermove || isConst?(mon.ability,PBAbilities,:DROUGHT) || (isConst?(mon.species,PBSpecies,:ARCHILLES) && mon.item == PBItems::ARCHILLESITE) || isConst?(mon.ability,PBAbilities,:SANDSTREAM) || isConst?(mon.ability,PBAbilities,:DRIZZLE) || (isConst?(mon.species,PBSpecies,:ELECTRUXO) && mon.item == PBItems::ELECTRUXOLITE) || isConst?(mon.ability,PBAbilities,:SNOWWARNING) || isConst?(mon.ability,PBAbilities,:PRIMORDIALSEA) || isConst?(mon.ability,PBAbilities,:DESOLATELAND) || isConst?(mon.ability,PBAbilities,:DELTASTREAM) || isConst?(mon.ability,PBAbilities,:STORMBRINGER) || isConst?(mon.ability,PBAbilities,:CHERNOBYL)
				monRoles.push("Weather Setter")
			end
			fieldmove=false
			for i in movelist
				if (i.id == getID(PBMoves,:GRASSYTERRAIN) || i.id == getID(PBMoves,:ELECTRICTERRAIN) ||
						i.id == getID(PBMoves,:MISTYTERRAIN))
					fieldmove=true
				end
			end
			if fieldmove
				monRoles.push("Field Setter")
			end
			if position==(party.length-1)
				#if $game_switches[1121] && position==(party.length-1)
				monRoles.push("Ace")
			end
			secondhighest=true
			if party.length>2
				for i in 0..(party.length-2)
					next if party[i].nil?
					if mon.level<party[i].level
						secondhighest=false
					end
				end
			end
			#if $game_switches[1121]&& secondhighest
			if secondhighest
				monRoles.push("Second")
			end
			#PBDebug.log(sprintf("Ending role assignment for %s",PBSpecies.getName(mon.species))) if $INTERNAL
			#PBDebug.log(sprintf("")) if $INTERNAL
			return monRoles
		end
		#PBDebug.log(sprintf("Ending role assignment for %s",PBSpecies.getName(mon.species))) if $INTERNAL
		#PBDebug.log(sprintf("")) if $INTERNAL
		return monRoles
	end
	
	def getAIMemory(skill)
		if skill>=PBTrainerAI.mediumSkill
			return @aiMoveMemory[0]
		elsif skill>=PBTrainerAI.highSkill
			return @aiMoveMemory[1]
		elsif skill>=PBTrainerAI.bestSkill
			return @aiMoveMemory[2]
		else
			return -1
		end
	end
	
	def getAbilityDisruptScore(move,attacker,opponent,skill)
		abilityscore=100.0
		if opponent.hasWorkingAbility(:SPEEDBOOST)
			PBDebug.log(sprintf("Speedboost Disrupt")) if $INTERNAL
			abilityscore*=1.1
			if opponent.stages[PBStats::SPEED]<2
				abilityscore*=1.3
			end
		end
		if opponent.hasWorkingAbility(:SANDVEIL)
			PBDebug.log(sprintf("Sand veil Disrupt")) if $INTERNAL
			if @weather==PBWeather::SANDSTORM
				abilityscore*=1.3
			end
		end
		if opponent.hasWorkingAbility(:VOLTABSORB) || opponent.hasWorkingAbility(:LIGHTNINGROD) || opponent.hasWorkingAbility(:MOTORDRIVE)
			PBDebug.log(sprintf("Volt Absorb Disrupt")) if $INTERNAL
			elecvar = false
			totalelec=true
			elecmove=nil
			for i in attacker.moves
				if !isConst?(i.type,PBTypes,:ELECTRIC)
					totalelec=false
				end
				if isConst?(i.type,PBTypes,:ELECTRIC)
					elecvar=true
					elecmove=i
				end
			end
			if elecvar
				if totalelec
					abilityscore*=3
				end
				if pbTypeModNoMessages(elecmove.type,attacker,opponent,elecmove,skill)>4
					abilityscore*=2
				end
			end
		end
		if opponent.hasWorkingAbility(:WATERABSORB) || opponent.hasWorkingAbility(:STORMDRAIN) || opponent.hasWorkingAbility(:DRYSKIN)
			PBDebug.log(sprintf("Water Absorb Disrupt")) if $INTERNAL
			watervar = false
			totalwater=true
			watermove=nil
			firevar=false
			for i in attacker.moves
				if !isConst?(i.type,PBTypes,:WATER)
					totalwater=false
				end
				if isConst?(i.type,PBTypes,:WATER)
					watervar=true
					watermove=i
				end
				if isConst?(i.type,PBTypes,:FIRE)
					firevar=true
				end
			end
			if watervar
				if totalwater
					abilityscore*=3
				end
				if pbTypeModNoMessages(watermove.type,attacker,opponent,watermove,skill)>4
					abilityscore*=2
				end
			end
			if opponent.hasWorkingAbility(:DRYSKIN)
				if firevar
					abilityscore*=0.5
				end
			end              
		end
		if opponent.hasWorkingAbility(:FLASHFIRE) || opponent.hasWorkingAbility(:HEATPROOF)
			if $INTERNAL
				if opponent.hasWorkingAbility(:FLASHFIRE)
					PBDebug.log(sprintf("Flash Fire Disrupt"))
				else 
					PBDebug.log(sprintf("Heatproof Disrupt"))
				end
			end		
			firevar = false
			firevarpartner = false
			totalfire=true
			totalfirepartner=true
			firemove=nil
			for i in attacker.moves
				if !isConst?(i.type,PBTypes,:FIRE)
					if @doublebattle
						totalfire=false if i.basedamage>0
					else
						totalfire=false	
					end	
				end
				if isConst?(i.type,PBTypes,:FIRE)
					firevar=true
					firemove=i
				end
			end
			for i in attacker.pbPartner.moves
				if !isConst?(i.type,PBTypes,:FIRE)
					if @doublebattle
						totalfirepartner=false if i.basedamage>0
					else
						totalfirepartner=false	
					end	
				end
				if isConst?(i.type,PBTypes,:FIRE)
					firevarpartner=true
					firemove=i
				end
			end
			if firevar
				if totalfire
					abilityscore*=3
				end
				#if pbTypeModNoMessages(firemove.type,attacker,opponent,firemove,skill)>4
				abilityscore*=3
				#end
			end
			if firevarpartner
				if totalfirepartner
					abilityscore*=4
				end
				#if pbTypeModNoMessages(firemove.type,attacker,opponent,firemove,skill)>4
				abilityscore*=4
				#end
			end
		end
		if opponent.hasWorkingAbility(:LEVITATE)
			PBDebug.log(sprintf("Levitate Disrupt")) if $INTERNAL
			groundvar = false
			totalground=true
			groundmove=nil
			for i in attacker.moves
				if !isConst?(i.type,PBTypes,:GROUND)
					totalground=false
				end
				if isConst?(i.type,PBTypes,:GROUND)
					groundvar=true
					groundmove=i
				end
			end
			if groundvar
				if totalground
					abilityscore*=3
				end
				if pbTypeModNoMessages(groundmove.type,attacker,opponent,groundmove,skill)>4
					abilityscore*=2
				end
			end
		end
		if opponent.hasWorkingAbility(:LEADSKIN)
			PBDebug.log(sprintf("Lead Skin Disrupt")) if $INTERNAL
			nuclearvar = false
			totalnuclear=true
			nuclearmove=nil
			for i in attacker.moves
				if !isConst?(i.type,PBTypes,:NUCLEAR)
					totalnuclear=false
				end
				if isConst?(i.type,PBTypes,:NUCLEAR)
					nuclearvar=true
					nuclearmove=i
				end
			end
			if nuclearvar
				if totalnuclear
					abilityscore*=3
				end
				if pbTypeModNoMessages(nuclearmove.type,attacker,opponent,nuclearmove,skill)>4
					abilityscore*=2
				end
			end
		end
		if opponent.hasWorkingAbility(:DISENCHANT)
			PBDebug.log(sprintf("Disenchant Disrupt")) if $INTERNAL
			fairyvar = false
			totalfairy=true
			fairymove=nil
			for i in attacker.moves
				if !isConst?(i.type,PBTypes,:FAIRY)
					totalfairy=false
				end
				if isConst?(i.type,PBTypes,:FAIRY)
					fairyvar=true
					fairymove=i
				end
			end
			if fairyvar
				if totalfairy
					abilityscore*=3
				end
				if pbTypeModNoMessages(fairymove.type,attacker,opponent,fairymove,skill)>4
					abilityscore*=2
				end
			end
		end
		#~ if opponent.hasWorkingAbility(:SHADOWTAG)
		#~ PBDebug.log(sprintf("Shadow Tag Disrupt")) if $INTERNAL
		#~ if !attacker.hasType?(PBTypes::GHOST)
		#~ abilityscore*=1.5
		#~ end
		#~ end    
		#~ if opponent.hasWorkingAbility(:ARENATRAP)
		#~ PBDebug.log(sprintf("Arena Trap Disrupt")) if $INTERNAL
		#~ if attacker.isAirborneAI?
		#~ abilityscore*=1.5
		#~ end
		#~ end  
		if opponent.hasWorkingAbility(:WONDERGUARD)
			PBDebug.log(sprintf("Wonder Guard Disrupt")) if $INTERNAL
			wondervar=false
			for i in attacker.moves
				if pbTypeModNoMessages(i.type,attacker,opponent,i,skill)>4
					wondervar=true
				end
			end
			if !wondervar
				abilityscore*=5
			end      
		end
		if opponent.hasWorkingAbility(:SERENGRACE)
			PBDebug.log(sprintf("Serene Grace Disrupt")) if $INTERNAL
			abilityscore*=1.3
		end  
		if opponent.hasWorkingAbility(:PUREPOWER) || opponent.hasWorkingAbility(:HUGEPOWER)
			PBDebug.log(sprintf("Pure Power Disrupt")) if $INTERNAL
			abilityscore*=2
		end  
		if opponent.hasWorkingAbility(:SHARPCORAL)
			PBDebug.log(sprintf("Sharp Coral Disrupt")) if $INTERNAL
			abilityscore*=2
		end 
		if opponent.hasWorkingAbility(:ATOMIZATE)
			PBDebug.log(sprintf("Atomizate Disrupt")) if $INTERNAL
			abilityscore*=3
		end 
		if opponent.hasWorkingAbility(:DEEPFREEZE)
			PBDebug.log(sprintf("Deep Freeze Disrupt")) if $INTERNAL
			watervar=false
			for i in attacker.moves
				if isConst?(i.type,PBTypes,:WATER)
					watervar=true
				end
			end
			if watervar
				abilityscore*=1.3
			end      
		end
		if opponent.hasWorkingAbility(:SOUNDPROOF)
			PBDebug.log(sprintf("Soundproof Disrupt")) if $INTERNAL
			soundvar=false
			for i in attacker.moves
				if i.isSoundBased?
					soundvar=true
				end
			end
			if soundvar
				abilityscore*=3
			end      
		end
		if opponent.hasWorkingAbility(:THICKFAT)
			PBDebug.log(sprintf("Thick Fat Disrupt")) if $INTERNAL
			totalguard=true
			for i in attacker.moves
				if !isConst?(i.type,PBTypes,:FIRE) && !isConst?(i.type,PBTypes,:ICE)
					totalguard=false
				end
			end      
			if totalguard
				abilityscore*=1.5
			end
		end
		if opponent.hasWorkingAbility(:TRUANT)
			PBDebug.log(sprintf("Truant Disrupt")) if $INTERNAL
			abilityscore*=0.1
		end 
		if opponent.hasWorkingAbility(:GUTS) || opponent.hasWorkingAbility(:QUICKFEET) || opponent.hasWorkingAbility(:MARVELSCALE)
			PBDebug.log(sprintf("Guts Disrupt")) if $INTERNAL
			if opponent.status!=0
				abilityscore*=1.5
			end      
		end 
		if opponent.hasWorkingAbility(:LIQUIDOOZE)
			PBDebug.log(sprintf("Liquid Ooze Disrupt")) if $INTERNAL
			if opponent.effects[PBEffects::LeechSeed]>=0 || attacker.pbHasMove?(getID(PBMoves,:LEECHSEED))
				abilityscore*=2
			end              
		end 
		if opponent.hasWorkingAbility(:AIRLOCK) || opponent.hasWorkingAbility(:CLOUDNINE)
			PBDebug.log(sprintf("Airlock Disrupt")) if $INTERNAL
			abilityscore*=1.1
		end 
		if opponent.hasWorkingAbility(:HYDRATION)
			PBDebug.log(sprintf("Hydration Disrupt")) if $INTERNAL
			if @weather==PBWeather::RAINDANCE
				abilityscore*=1.3
			end
		end
		if opponent.hasWorkingAbility(:ADAPTABILITY)
			PBDebug.log(sprintf("Adaptability Disrupt")) if $INTERNAL
			abilityscore*=1.3
		end 
		if opponent.hasWorkingAbility(:ELEMENTALIST)
			PBDebug.log(sprintf("Elementalist Disrupt")) if $INTERNAL
			abilityscore*=1.5
		end 
		if opponent.hasWorkingAbility(:SKILLLINK)
			PBDebug.log(sprintf("Skill Link Disrupt")) if $INTERNAL
			abilityscore*=1.5
		end 
		if opponent.hasWorkingAbility(:POISONHEAL)
			PBDebug.log(sprintf("Poison Heal Disrupt")) if $INTERNAL
			if opponent.status==PBStatuses::POISON
				abilityscore*=2
			end      
		end 
		if opponent.hasWorkingAbility(:NORMALIZE)
			PBDebug.log(sprintf("Normalize Disrupt")) if $INTERNAL
			abilityscore*=0.6
		end 
		if opponent.hasWorkingAbility(:MAGICGUARD)
			PBDebug.log(sprintf("Magic Guard Disrupt")) if $INTERNAL
			abilityscore*=1.4
		end 
		if opponent.hasWorkingAbility(:STALL)
			PBDebug.log(sprintf("Stall Disrupt")) if $INTERNAL
			abilityscore*=0.5
		end 
		if opponent.hasWorkingAbility(:TECHNICIAN)
			PBDebug.log(sprintf("Technician Disrupt")) if $INTERNAL
			abilityscore*=1.3
		end 
		if opponent.hasWorkingAbility(:GALEWINGS)
			PBDebug.log(sprintf("Gale Wings Disrupt")) if $INTERNAL
			abilityscore*=2
		end 	
		if opponent.hasWorkingAbility(:UNBURDEN)
			if opponent.effects[PBEffects::ItemLost]==2 && opponent.hasWorkingAbility(:UNBURDEN)
				PBDebug.log(sprintf("Unburden Disrupt")) if $INTERNAL
				abilityscore*=2
			end	
		end 			
		if opponent.hasWorkingAbility(:MOLDBREAKER) || (isConst?(opponent.species,PBSpecies,:GYARADOS) && opponent.item==PBItems::GYARADOSITE)
			PBDebug.log(sprintf("Mold Breaker Disrupt")) if $INTERNAL
			abilityscore*=1.1
		end 
		if opponent.hasWorkingAbility(:UNAWARE)
			PBDebug.log(sprintf("Unaware Disrupt")) if $INTERNAL
			abilityscore*=1.7
		end 
		if opponent.hasWorkingAbility(:SLOWSTART)
			PBDebug.log(sprintf("Slow Start Disrupt")) if $INTERNAL
			abilityscore*=0.3
		end 
		if opponent.hasWorkingAbility(:MULTITYPE) || opponent.hasWorkingAbility(:STANCECHANGE)
			PBDebug.log(sprintf("Multitype Disrupt")) if $INTERNAL
			abilityscore*=0
		end 
		if opponent.hasWorkingAbility(:SHEERFORCE)
			PBDebug.log(sprintf("Sheer Force Disrupt")) if $INTERNAL
			abilityscore*=1.2
		end 
		if opponent.hasWorkingAbility(:PUNKROCK)
			PBDebug.log(sprintf("Soundboost Disrupt")) if $INTERNAL
			abilityscore*=1.2
		end 
		if opponent.hasWorkingAbility(:CONTRARY)
			PBDebug.log(sprintf("Contrary Disrupt")) if $INTERNAL
			abilityscore*=1.4
			if opponent.stages[PBStats::ATTACK]>0 || opponent.stages[PBStats::SPATK]>0 || opponent.stages[PBStats::DEFENSE]>0 || opponent.stages[PBStats::SPDEF]>0 || opponent.stages[PBStats::SPEED]>0
				if opponent.pbHasMove?(getID(PBMoves,:OVERHEAT)) ||
					opponent.pbHasMove?(getID(PBMoves,:LEAFSTORM)) ||
					opponent.pbHasMove?(getID(PBMoves,:DRACOMETEOR)) ||
					opponent.pbHasMove?(getID(PBMoves,:SUPERPOWER)) ||
					opponent.pbHasMove?(getID(PBMoves,:CLOSECOMBAT)) ||
					opponent.pbHasMove?(getID(PBMoves,:PSYCHOBOOST)) ||
					opponent.pbHasMove?(getID(PBMoves,:VCREATE)) ||
					opponent.pbHasMove?(getID(PBMoves,:HAMMERARM)) ||
					opponent.pbHasMove?(getID(PBMoves,:DRAGONASCENT))
					abilityscore*=3
				end		
			end              
		end 
		if opponent.hasWorkingAbility(:DEFEATIST)
			PBDebug.log(sprintf("Defeatist Disrupt")) if $INTERNAL
			abilityscore*=0.5
		end 
		if opponent.hasWorkingAbility(:MULTISCALE) || opponent.hasWorkingAbility(:SHADOWSHIELD)
			PBDebug.log(sprintf("Multiscale Disrupt")) if $INTERNAL
			if opponent.hp==opponent.totalhp
				abilityscore*=1.5
			end      
		end 
		if opponent.hasWorkingAbility(:HARVEST)
			PBDebug.log(sprintf("Harvest Disrupt")) if $INTERNAL
			abilityscore*=1.2
		end 
		if opponent.hasWorkingAbility(:MOODY)
			PBDebug.log(sprintf("Moody Disrupt")) if $INTERNAL
			abilityscore*=1.8
		end 
		if opponent.hasWorkingAbility(:ACCELERATION)
			PBDebug.log(sprintf("Acceleration Disrupt")) if $INTERNAL
			abilityscore*=3
		end 
		if opponent.hasWorkingAbility(:SAPSIPPER)
			PBDebug.log(sprintf("Sap Sipper Disrupt")) if $INTERNAL
			grassvar = false
			totalgrass=true
			grassmove=nil
			for i in attacker.moves
				if !isConst?(i.type,PBTypes,:GRASS)
					totalgrass=false
				end
				if isConst?(i.type,PBTypes,:GRASS)
					grassvar=true
					grassmove=i
				end
			end
			if grassvar
				if totalgrass
					abilityscore*=3
				end
				if pbTypeModNoMessages(grassmove.type,attacker,opponent,grassmove,skill)>4
					abilityscore*=2
				end
			end
		end
		if opponent.hasWorkingAbility(:PRANKSTER)
			PBDebug.log(sprintf("Prankster Disrupt")) if $INTERNAL
			if attacker.speed>opponent.speed
				abilityscore*=1.5
			end      
		end
		if opponent.hasWorkingAbility(:SNOWCLOAK)
			PBDebug.log(sprintf("Snow Cloak Disrupt")) if $INTERNAL
			if @weather==PBWeather::HAIL
				abilityscore*=1.1
			end
		end
		if opponent.hasWorkingAbility(:FURCOAT)
			PBDebug.log(sprintf("Fur Coat Disrupt")) if $INTERNAL
			if attacker.attack>attacker.spatk
				abilityscore*=1.5
			end      
		end
		if opponent.hasWorkingAbility(:PARENTALBOND)
			PBDebug.log(sprintf("Parental Bond Disrupt")) if $INTERNAL
			abilityscore*=3
		end 
		if opponent.hasWorkingAbility(:PROTEAN)
			PBDebug.log(sprintf("Protean Disrupt")) if $INTERNAL
			abilityscore*=3
		end 
		if opponent.hasWorkingAbility(:TOUGHCLAWS)
			PBDebug.log(sprintf("Tough Claws Disrupt")) if $INTERNAL
			abilityscore*=1.2
		end 
		if attacker.pbPartner==opponent
			if abilityscore!=0
				if abilityscore>200
					abilityscore=200
				end
				tempscore = abilityscore
				abilityscore = 200 - tempscore
			end
		end
		abilityscore*=0.01
		return abilityscore
	end
	
	def getFieldDisruptScore(attacker,opponent,skill)
		fieldscore=100.0
		aroles = pbGetMonRole(attacker,opponent,skill)
		oroles = pbGetMonRole(opponent,attacker,skill)
		#~ if @field.effects[PBEffects::ElectricTerrain]>1 # Electric Terrain
		#~ PBDebug.log(sprintf("Electric Terrain Disrupt")) if $INTERNAL
		#~ if opponent.pbHasType?(:ELECTRIC) || opponent.pbPartner.pbHasType?(:ELECTRIC)
		#~ fieldscore*=1.5
		#~ end
		#~ if attacker.pbHasType?(:ELECTRIC)
		#~ fieldscore*=0.5
		#~ end
		#~ partyelec=false
		#~ for k in pbParty(attacker.index)
		#~ next if k.nil?
		#~ if k.hasType?(:ELECTRIC)
		#~ partyelec=true
		#~ end
		#~ end
		#~ if partyelec
		#~ fieldscore*=0.5
		#~ end
		#~ end
		#~ if @field.effects[PBEffects::GrassyTerrain]>1 # Grassy Terrain
		#~ PBDebug.log(sprintf("Grassy Terrain Disrupt")) if $INTERNAL
		#~ if opponent.pbHasType?(:GRASS) || opponent.pbPartner.pbHasType?(:GRASS)
		#~ fieldscore*=1.5
		#~ end
		#~ if attacker.pbHasType?(:GRASS)
		#~ fieldscore*=0.5
		#~ end
		#~ partygrass=false
		#~ for k in pbParty(attacker.index)
		#~ next if k.nil?
		#~ if k.hasType?(:GRASS)
		#~ partygrass=true
		#~ end
		#~ end
		#~ if partygrass
		#~ fieldscore*=0.5
		#~ end
		#~ if aroles.include?("Special Wall") || aroles.include?("Physical Wall")
		#~ fieldscore*=0.8
		#~ end
		#~ if oroles.include?("Special Wall") || oroles.include?("Physical Wall")
		#~ fieldscore*=1.2
		#~ end
		#~ end
		#~ if @field.effects[PBEffects::MistyTerrain]>1 # Misty Terrain
		#~ PBDebug.log(sprintf("Misty Terrain Disrupt")) if $INTERNAL
		#~ if opponent.pbHasType?(:DRAGON) || opponent.pbPartner.pbHasType?(:DRAGON)
		#~ fieldscore*=0.5
		#~ end
		#~ if attacker.pbHasType?(:DRAGON)
		#~ fieldscore*=1.5
		#~ end
		#~ partydragon=false
		#~ for k in pbParty(attacker.index)
		#~ next if k.nil?
		#~ if k.hasType?(:DRAGON)
		#~ partydragon=true
		#~ end
		#~ end
		#~ if partydragon
		#~ fieldscore*=1.5
		#~ end     
		#~ end
		fieldscore*=0.01
		return fieldscore
	end
	
	################################################################################
	# Choose a move to use.
	################################################################################
	def pbChooseMoves(index) # Ally targetting stuff marked with ###
		attacker=@battlers[index]
		scores=[0,0,0,0]
		targets=nil
		myChoices=[]
		totalscore=0
		target=-1
		skill=0
		wildbattle=!@opponent && pbIsOpposing?(index) && !$game_switches[319]
		if wildbattle # If wild battle
			#~ preference = attacker.personalID % 16
			#~ preference = preference % 4
			for i in 0...4
				if pbCanChooseMove?(index,i,false)
					scores[i]=100
					#~ if preference == i # for personality
					#~ scores[i]+=100
					#~ end
					myChoices.push(i)
					#       totalscore+=100
				end
			end
		else
			if $game_switches[319]
				skill=100
			else	
				skill=pbGetOwner(attacker.index).skill || 0
			end	
			opponent=attacker.pbOppositeOpposing
			if @choices[opponent.index][0]==2 && attacker.effects[PBEffects::SwitchAbuse]>2 
				opponent=pbMakeFakeBattler(pbParty(opponent.index)[@choices[opponent.index][1]],false,opponent) rescue nil
			end	
			#if @doublebattle && !opponent.isFainted? && !opponent.pbPartner.isFainted?
			if @doublebattle && ((!opponent.isFainted? && !opponent.pbPartner.isFainted?) || !attacker.pbPartner.isFainted?)
				# Choose a target and move.  Also care about partner.
				otheropp=opponent.pbPartner
				notopp=attacker.pbPartner ###
				scoresAndTargets=[]
				targets=[-1,-1,-1,-1]
				maxscore1=0
				maxscore2=0
				totalscore1=0
				totalscore2=0
				baseDamageArray=[]
				baseDamageArray2=[]
				baseDamageArray3=[] ###
				for j in 0...4     
					next if attacker.moves[j].id < 1
					# check attacker.moves[j].basedamage and if this is 0 instead check the status method
					dmgValue = pbRoughDamage(attacker.moves[j],attacker,opponent,skill,attacker.moves[j].basedamage)
					if attacker.moves[j].basedamage!=0
						if opponent.hp==0
							dmgPercent = 0
						else                
							dmgPercent = (dmgValue*100)/(opponent.hp)
							dmgPercent = 110 if dmgPercent > 110
						end
					else
						dmgPercent = pbStatusDamage(attacker.moves[j])
					end  
					baseDamageArray.push(dmgPercent)
					#Second opponent
					dmgValue2 = pbRoughDamage(attacker.moves[j],attacker,otheropp,skill,attacker.moves[j].basedamage)
					if attacker.moves[j].basedamage!=0
						if otheropp.hp==0
							dmgPercent2=0
						else                
							dmgPercent2 = (dmgValue2*100)/(otheropp.hp)
							dmgPercent2 = 110 if dmgPercent2 > 110
						end
					else
						dmgPercent2 = pbStatusDamage(attacker.moves[j])
					end  
					baseDamageArray2.push(dmgPercent2)  
					#Partner ###
					dmgValue3 = pbRoughDamage(attacker.moves[j],attacker,notopp,skill,attacker.moves[j].basedamage)
					if attacker.moves[j].basedamage!=0
						if notopp.hp==0
							dmgPercent3=0
						else                
							dmgPercent3 = (dmgValue3*100)/(notopp.hp)
							dmgPercent3 = 110 if dmgPercent3 > 110
						end
					else
						dmgPercent3 = pbStatusDamage(attacker.moves[j])
					end  
					baseDamageArray3.push(dmgPercent3)          
				end 
				for i in 0...4
					if pbCanChooseMove?(index,i,false)
						score1=pbGetMoveScore(attacker.moves[i],attacker,opponent,skill,baseDamageArray[i],baseDamageArray,i)            
						score2=pbGetMoveScore(attacker.moves[i],attacker,otheropp,skill,baseDamageArray2[i],baseDamageArray2,i)
						totalscore = score1+score2
						if (attacker.moves[i].target&0x08)!=0 && !$game_switches[306] # Targets all users
							score1=totalscore # Consider both scores as it will hit BOTH targets
							score2=totalscore                         
							if attacker.pbPartner.isFainted? || attacker.pbPartner.hasWorkingAbility(:TELEPATHY) # No partner
								score1*=1.66
								score2*=1.66
							else
								# If this move can also target the partner, get the partner's
								# score too
								v=pbRoughDamage(attacker.moves[j],attacker,attacker.pbPartner,skill,attacker.moves[j].basedamage)
								p=(v*100)/(attacker.pbPartner.hp)
								s=pbGetMoveScore(attacker.moves[i],attacker,attacker.pbPartner,skill,p)
								if (isConst?(attacker.moves[i],PBTypes,:FIRE)                && 
										attacker.pbPartner.hasWorkingAbility(:FLASHFIRE))          ||
									(isConst?(attacker.moves[i],PBTypes,:WATER)                 &&
										(attacker.pbPartner.hasWorkingAbility(:WATERABSORB)         ||
											attacker.pbPartner.hasWorkingAbility(:STORMDRAIN)          ||
											attacker.pbPartner.hasWorkingAbility(:DRYSKIN)))           ||          
									(isConst?(attacker.moves[i],PBTypes,:GRASS)                 && 
										attacker.pbPartner.hasWorkingAbility(:SAPSIPPER))          ||
									(isConst?(attacker.moves[i],PBTypes,:ELECTRIC)              &&
										(attacker.pbPartner.hasWorkingAbility(:VOLTABSORB)          ||
											attacker.pbPartner.hasWorkingAbility(:LIGHTNINGROD)        ||
											attacker.pbPartner.hasWorkingAbility(:MOTORDRIVE)))
									score1*=2.00
									score2*=2.00
								else
									if (attacker.pbPartner.hp.to_f)/attacker.pbPartner.totalhp>0.10 || ((attacker.pbPartner.pbSpeed<attacker.pbSpeed) ^ (@trickroom!=0))
										s = 100-s
										s=0 if s<0
										s/=100.0
										s * 0.5 # multiplier to control how much to arbitrarily care about hitting partner; lower cares more
										if (attacker.pbPartner.pbSpeed<attacker.pbSpeed) ^ (@trickroom!=0)
											s * 0.5 # care more if we're faster and would knock it out before it attacks
										end
										score1*=s
										score2*=s
									end                  
								end
							end              
							score1=score1.to_i
							score2=score2.to_i   
							PBDebug.log(sprintf("%s: Final Score after Multi-Target Adjustment: %d",PBMoves.getName(attacker.moves[i].id),score1))
							PBDebug.log(sprintf(""))
						end
						if attacker.moves[i].target==PBTargets::AllOpposing || ((attacker.moves[i].target&0x08)!=0 && $game_switches[306]) # Consider both scores as it will hit BOTH targets
							totalscore = score1+score2
							score1=totalscore
							score2=totalscore
							PBDebug.log(sprintf("%s: Final Score after Multi-Target Adjustment: %d",PBMoves.getName(attacker.moves[i].id),score1))
							PBDebug.log(sprintf(""))
						end 
						#~ #Prefer targets with more dangerous abilities if scores are equal
						#~ if score1 == score2
						#~ if getAbilityDisruptScore(attacker.moves[i],attacker,opponent,100) > getAbilityDisruptScore(attacker.moves[i],attacker,otheropp,100)
						#~ score1+=1
						#~ else
						#~ score2+=1
						#~ end
						#~ score1-=1 if opponent.status==PBStatuses::SLEEP && opponent.statusCount<=1
						#~ score2-=1 if otheropp.status==PBStatuses::SLEEP	&& otheropp.statusCount<=1						
						#~ end			
						#~ if (opponent.hasWorkingAbility(:CONTRARY) || opponent.hasWorkingAbility(:MOXIE) || opponent.hasWorkingAbility(:INFURIATE)) &&
						#~ (opponent.stages[PBStats::ATTACK]>0 || opponent.stages[PBStats::SPATK]>0 || opponent.stages[PBStats::DEFENSE]>0 || opponent.stages[PBStats::SPDEF]>0 || opponent.stages[PBStats::SPEED]>0)
						#~ if opponent.hasWorkingAbility(:CONTRARY) 
						#~ if opponent.pbHasMove?(getID(PBMoves,:OVERHEAT)) ||
						#~ opponent.pbHasMove?(getID(PBMoves,:LEAFSTORM)) ||
						#~ opponent.pbHasMove?(getID(PBMoves,:DRACOMETEOR)) ||
						#~ opponent.pbHasMove?(getID(PBMoves,:SUPERPOWER)) ||
						#~ opponent.pbHasMove?(getID(PBMoves,:CLOSECOMBAT)) ||
						#~ opponent.pbHasMove?(getID(PBMoves,:PSYCHOBOOST)) ||
						#~ opponent.pbHasMove?(getID(PBMoves,:VCREATE)) ||
						#~ opponent.pbHasMove?(getID(PBMoves,:HAMMERARM)) ||
						#~ opponent.pbHasMove?(getID(PBMoves,:DRAGONASCENT))							
						#~ PBDebug.log(sprintf("Sweep Disrupt")) if $INTERNAL
						#~ score2*=0.5
						#~ end	
						#~ else
						#~ PBDebug.log(sprintf("Sweep Disrupt")) if $INTERNAL
						#~ score2*=0.5								
						#~ end									
						#~ end	
						#~ if (otheropp.hasWorkingAbility(:CONTRARY) || otheropp.hasWorkingAbility(:MOXIE) || otheropp.hasWorkingAbility(:INFURIATE)) &&
						#~ (otheropp.stages[PBStats::ATTACK]>0 || otheropp.stages[PBStats::SPATK]>0 || otheropp.stages[PBStats::DEFENSE]>0 || otheropp.stages[PBStats::SPDEF]>0 || otheropp.stages[PBStats::SPEED]>0)
						#~ if otheropp.hasWorkingAbility(:CONTRARY)
						#~ if otheropp.pbHasMove?(getID(PBMoves,:OVERHEAT)) ||
						#~ otheropp.pbHasMove?(getID(PBMoves,:LEAFSTORM)) ||
						#~ otheropp.pbHasMove?(getID(PBMoves,:DRACOMETEOR)) ||
						#~ otheropp.pbHasMove?(getID(PBMoves,:SUPERPOWER)) ||
						#~ otheropp.pbHasMove?(getID(PBMoves,:CLOSECOMBAT)) ||
						#~ otheropp.pbHasMove?(getID(PBMoves,:PSYCHOBOOST)) ||
						#~ otheropp.pbHasMove?(getID(PBMoves,:VCREATE)) ||
						#~ otheropp.pbHasMove?(getID(PBMoves,:HAMMERARM)) ||
						#~ otheropp.pbHasMove?(getID(PBMoves,:DRAGONASCENT))
						#~ PBDebug.log(sprintf("Sweep Disrupt")) if $INTERNAL
						#~ score1*=0.5
						#~ end	
						#~ else
						#~ PBDebug.log(sprintf("Sweep Disrupt")) if $INTERNAL
						#~ score1*=0.5								
						#~ end		
						#~ end																					
						myChoices.push(i)
						scoresAndTargets.push([i*2,i,score1,opponent.index])
						scoresAndTargets.push([i*2+1,i,score2,otheropp.index])
					else
						scoresAndTargets.push([i*2,i,-1,opponent.index])
						scoresAndTargets.push([i*2+1,i,-1,otheropp.index])
					end
				end
				#~ for i in 0...4 ### This whole bit
				#~ if pbCanChooseMove?(index,i,false)
				#~ if attacker.moves[i].function == 0xDF || attacker.moves[i].function == 0x63 || attacker.moves[i].function == 0x67 ||
				#~ attacker.moves[i].function == 0xA0 || attacker.moves[i].function == 0xC1 || attacker.moves[i].function == 0x142 ||
				#~ attacker.moves[i].function == 0x162 || attacker.moves[i].function == 0x164 || attacker.moves[i].function == 0x167 ||
				#~ attacker.moves[i].function == 0x169 || attacker.moves[i].function == 0x170 || attacker.moves[i].function == 0x55 ||
				#~ attacker.moves[i].function == 0x40 || attacker.moves[i].function == 0x41 || attacker.moves[i].function == 0x66  # Heal Pulse, Simple Beam, Skill Swap, Frost Breath, Beat Up, Topsy-Turvy, Floral Healing, Instruct, Pollen Puff, Purify, Spotlight, Psych Up, Swagger, Flatter, Entrainment
				#~ partnerscore=pbGetMoveScore(attacker.moves[i],attacker,notopp,skill,baseDamageArray3[i],baseDamageArray3,i)
				#~ PBDebug.log(sprintf("%s: Score for using on partner: %d",PBMoves.getName(attacker.moves[i].id),partnerscore))
				#~ PBDebug.log(sprintf(""))
				#~ scoresAndTargets.push([i*10,i,partnerscore,notopp.index]) 
				#~ end
				#~ end
				#~ end
				scoresAndTargets.sort!{|a,b|
					if a[2]==b[2] # if scores are equal
						a[0]<=>b[0] # sort by index (for stable comparison)
					else
						b[2]<=>a[2]
					end
				}
				for i in 0...scoresAndTargets.length
					idx=scoresAndTargets[i][1]
					thisScore=scoresAndTargets[i][2]
					if thisScore>0 || thisScore==-1
						if scores[idx]==0 || ((scores[idx]==thisScore && pbAIRandom(10)<5) ||
								(scores[idx] < thisScore))
							#    (scores[idx]!=thisScore && pbAIRandom(10)<3))
							scores[idx]=thisScore
							targets[idx]=scoresAndTargets[i][3]
						end
					end
				end
			else
				# Choose a move. There is only 1 opposing Pokémon.
				if @doublebattle && opponent.isFainted?
					opponent=opponent.pbPartner
				end
				baseDamageArray=[]
				for j in 0...4
					next if attacker.moves[j].id < 1
					# check attacker.moves[j].basedamage and if this is 0 instead check the status method
					dmgValue = pbRoughDamage(attacker.moves[j],attacker,opponent,skill,attacker.moves[j].basedamage)
					if attacker.moves[j].basedamage!=0
						dmgPercent = (dmgValue*100)/(opponent.hp)
						dmgPercent = 110 if dmgPercent > 110
					else
						dmgPercent = pbStatusDamage(attacker.moves[j])
					end  
					baseDamageArray.push(dmgPercent)
				end 
				for i in 0...4
					if pbCanChooseMove?(index,i,false)
						scores[i]=pbGetMoveScore(attacker.moves[i],attacker,opponent,skill,baseDamageArray[i],baseDamageArray,i)            
						myChoices.push(i)            
					else
						scores[i] = -1
					end
				end        
			end
		end
		maxscore=0
		for i in 0...4      
			#next if scores[i] == -1
			scores[i]=0 if scores[i]<0
			maxscore=scores[i] if scores[i]>maxscore
			totalscore+=scores[i]
		end
		# Minmax choices depending on AI
		if !wildbattle && skill>=PBTrainerAI.mediumSkill
			threshold=(skill>=PBTrainerAI.bestSkill) ? 1.5 : (skill>=PBTrainerAI.highSkill) ? 2 : 3
			newscore=(skill>=PBTrainerAI.bestSkill) ? 5 : (skill>=PBTrainerAI.highSkill) ? 10 : 15
			for i in 0...scores.length
				if scores[i]>newscore && scores[i]*threshold<maxscore
					totalscore-=(scores[i]-newscore)
					scores[i]=newscore
				end
			end
		end
		if $INTERNAL
			x="[#{attacker.pbThis}: "
			j=0
			for i in 0...4
				if attacker.moves[i].id!=0
					x+=", " if j>0
					x+=PBMoves.getName(attacker.moves[i].id)+"="+scores[i].to_s
					j+=1
				end
			end
			x+="]"
			PBDebug.log(x)
		end
		if !wildbattle #&& maxscore>100
			stdev=pbStdDev(scores)
			#    if stdev>=45 # && pbAIRandom(10)!=0
			# If standard deviation is 45 or more,
			# there is a highly preferred move. Choose it.
			preferredMoves=[]
			for i in 0...4
				#       if attacker.moves[i].id!=0 && (scores[i]>=maxscore*=0.8 || scores[i]>=200)
				#       if attacker.moves[i].id!=0 && (scores[i] >= (maxscore-stdev))
				if attacker.moves[i].id!=0 && (scores[i] >= (maxscore* 1)) && pbCanChooseMove?(index,i,false)
					preferredMoves.push(i)
					preferredMoves.push(i) if scores[i]==maxscore # Doubly prefer the best move
				end
			end
			if preferredMoves.length>0
				i=preferredMoves[pbAIRandom(preferredMoves.length)]
				PBDebug.log("[Prefer "+PBMoves.getName(attacker.moves[i].id)+"]") if $INTERNAL
				pbRegisterMove(index,i,false)
				target=targets[i] if targets
				if @doublebattle && target>=0
					pbRegisterTarget(index,target)
				end
				return
			end
			#end
		end
		PBDebug.log("If this battle is not wild, something has gone wrong in scoring moves (no preference chosen).") if $INTERNAL
		if !wildbattle && attacker.turncount
			badmoves=false
			if ((maxscore<=20 && attacker.turncount>2) ||
					(maxscore<=30 && attacker.turncount>5)) && pbAIRandom(10)<8
				badmoves=true
			end
			if totalscore<100 && attacker.turncount>1
				badmoves=true
				movecount=0
				for i in 0...4
					if attacker.moves[i].id!=0
						if scores[i]>0 && attacker.moves[i].basedamage>0
							badmoves=false
						end
						movecount+=1
					end
				end
				badmoves=badmoves && pbAIRandom(10)!=0
			end
			#      if badmoves
			#        # Attacker has terrible moves, try switching instead
			#        if pbEnemyShouldWithdrawEx?(index,true)
			#          if $INTERNAL
			#            PBDebug.log("Switching due to terrible moves")
			#            PBDebug.log([index,@choices[index][0],@choices[index][1],
			#               pbCanChooseNonActive?(index),
			#               @battlers[index].pbNonActivePokemonCount()].inspect)
			#          end
			#          return
			#        end
			#      end
		end
		if maxscore<=0
			# If all scores are 0 or less, choose a move at random
			if myChoices.length>0
				pbRegisterMove(index,myChoices[pbAIRandom(myChoices.length)],false)
			else
				pbAutoChooseMove(index)
			end
		else
			randnum=pbAIRandom(totalscore)
			cumtotal=0
			for i in 0...4
				if scores[i]>0
					cumtotal+=scores[i]
					if randnum<cumtotal
						pbRegisterMove(index,i,false)
						target=targets[i] if targets
						break
					end
				end
			end
		end
		if @doublebattle && target>=0
			pbRegisterTarget(index,target)
		end
	end
	
	
	################################################################################
	# Decide whether the opponent should Mega Evolve their Pokémon.
	################################################################################
	def pbEnemyShouldMegaEvolve?(index)
		# Simple "always should if possible". No. Sometimes things are not that simple.
		if @battlers[index].species==PBSpecies::ARBOK && (@battlers[0].ability==getConst(PBAbilities,:CONTRARY) || @battlers[2].ability==getConst(PBAbilities,:CONTRARY)) && @trickroom==0
			return false
		end	
		return pbCanMegaEvolve?(index)
	end
	
	################################################################################
	# Decide whether the opponent should use an item on the Pokémon.
	################################################################################
	#~ def pbEnemyShouldUseItem?(index)
	#~ #### Sash/Sturdy case
	#~ attacker = @battlers[index]
	#~ if isConst?(attacker.pokemon.itemRecycle,PBItems,:FOCUSSASH) || attacker.hasWorkingAbility(:STURDY)
	#~ return false
	#~ end
	#~ #### Sash/Sturdy case
	#~ #### Angie + Full Restore case
	#~ if @opponent
	#~ if !@doublebattle && @opponent.name == "Angie" && !attacker.name == "Walrein"
	#~ return false
	#~ end
	#~ end
	#~ #### Angie + Full Restore case
	#~ item=pbEnemyItemToUse(index)
	#~ if item>0 && @battlers[index].effects[PBEffects::Embargo]==0
	#~ pbRegisterItem(index,item,nil)
	#~ return true
	#~ end
	#~ return false
	#~ end
	
	#~ def pbEnemyItemAlreadyUsed?(index,item,items)
	#~ if @choices[1][0]==3 && @choices[1][1]==item
	#~ qty=0
	#~ for i in items
	#~ qty+=1 if i==item
	#~ end
	#~ return true if qty<=1
	#~ end
	#~ return false
	#~ end
	
	#~ def pbEnemyItemToUse(index)  
	#~ return 0 if !@opponent
	#~ return 0 if !@internalbattle
	#~ items=pbGetOwnerItems(index)
	#~ return 0 if !items
	#~ skill=pbGetOwner(index).skill || 0
	#~ battler=@battlers[index]
	#~ party = pbParty(index)
	#~ opponent1 = battler.pbOppositeOpposing
	#~ opponent2 = opponent1.pbPartner
	#~ currentroles = pbGetMonRole(battler,opponent1,skill)
	#~ return 0 if battler.isFainted?
	#~ highscore = 0 
	#~ movecount = -1
	#~ maxplaypri = -1
	#~ partynumber = 0
	#~ for i in party
	#~ next if i.nil?
	#~ next if i.hp == 0
	#~ partynumber+=1
	#~ end
	#~ itemnumber = 0
	#~ for i in items
	#~ next if pbEnemyItemAlreadyUsed?(index,i,items)
	#~ itemnumber+=1
	#~ end    
	#~ #highest score
	#~ for i in battler.moves   
	#~ movecount+=1
	#~ next if i.id==0
	#~ next if !pbCanChooseMove?(index,movecount,false)      
	#~ if @doublebattle 
	#~ dmgValue1 = pbRoughDamage(i,battler,opponent1,skill,i.basedamage)
	#~ if i.basedamage!=0
	#~ if opponent1.hp==0
	#~ dmgPercent1=0
	#~ else              
	#~ dmgPercent1 = (dmgValue1*100)/(opponent1.hp)
	#~ dmgPercent1 = 110 if dmgPercent1 > 110
	#~ end
	#~ else
	#~ dmgPercent1 = pbStatusDamage(i)
	#~ end  
	#~ dmgValue2 = pbRoughDamage(i,battler,opponent2,skill,i.basedamage)
	#~ if i.basedamage!=0
	#~ if opponent2.hp==0
	#~ dmgPercent2=0
	#~ else 
	#~ dmgPercent2 = (dmgValue2*100)/(opponent2.hp)
	#~ dmgPercent2 = 110 if dmgPercent2 > 110
	#~ end          
	#~ else
	#~ dmgPercent2 = pbStatusDamage(i)
	#~ end  
	#~ if opponent1.hp!=0 && opponent2.hp!=0
	#~ tempscore = [pbGetMoveScore(i,battler,opponent1,skill,dmgPercent1), pbGetMoveScore(i,battler,opponent2,skill,dmgPercent2)].max
	#~ elsif opponent1.hp!=0
	#~ tempscore = pbGetMoveScore(i,battler,opponent1,skill,dmgPercent1)
	#~ elsif opponent2.hp!=0
	#~ tempscore = pbGetMoveScore(i,battler,opponent2,skill,dmgPercent2)
	#~ end  
	#~ else
	#~ dmgValue = pbRoughDamage(i,battler,opponent1,skill,i.basedamage)
	#~ if i.basedamage!=0
	#~ dmgPercent = (dmgValue*100)/(opponent1.hp)
	#~ dmgPercent = 110 if dmgPercent > 110
	#~ else
	#~ dmgPercent = pbStatusDamage(i)
	#~ end 
	#~ tempscore = pbGetMoveScore(i,battler,opponent1,skill,dmgPercent)
	#~ end      
	#~ if tempscore > highscore
	#~ highscore = tempscore
	#~ end
	#~ if tempscore>100 && i.priority>maxplaypri
	#~ maxplaypri = i.priority
	#~ end   
	#~ end
	#~ highdamage = -1
	#~ maxopppri = -1
	#~ pridam = -1
	#~ bestid = -1
	#~ #expected damage    
	#~ #if battler.pbSpeed<pbRoughStat(opponent1,PBStats::SPEED,skill)
	#~ if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0        
	#~ for i in @aiMoveMemory[2][opponent1.pokemonIndex]            
	#~ tempdam = pbRoughDamage(i,opponent1,battler,skill,i.basedamage)  
	#~ if tempdam>highdamage
	#~ highdamage = tempdam
	#~ bestid = i.id
	#~ end 
	#~ if i.priority > maxopppri
	#~ maxopppri = i.priority
	#~ pridam = tempdam
	#~ end 
	#~ end   
	#~ elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0  
	#~ for i in @aiMoveMemory[1]
	#~ tempdam = pbRoughDamage(i,opponent1,battler,skill,i.basedamage)          
	#~ if tempdam>highdamage
	#~ highdamage = tempdam
	#~ bestid = i.id
	#~ end          
	#~ if i.priority > maxopppri
	#~ maxopppri = i.priority
	#~ end
	#~ end   
	#~ elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0  
	#~ for i in @aiMoveMemory[0]
	#~ tempdam = pbRoughDamage(i,opponent1,battler,skill,i.basedamage)          
	#~ if tempdam>highdamage
	#~ highdamage = tempdam
	#~ bestid = i.id
	#~ end    
	#~ if i.priority > maxopppri
	#~ maxopppri = i.priority
	#~ end
	#~ end 
	#~ end
	#~ #end
	#~ highratio = -1
	#~ #expected damage percentage
	#~ if battler.hp!=0
	#~ highratio = highdamage*(1.0/battler.hp)
	#~ end    
	#~ scorearray = []
	#~ arraycount = -1
	#~ PBDebug.log(sprintf("Beginning AI Item use check.")) if $INTERNAL
	#~ PBDebug.log(sprintf(" ")) if $INTERNAL
	#~ for i in items      
	#~ arraycount+=1
	#~ scorearray.push(0)
	#~ itemscore=100
	#~ ishpitem = false
	#~ isstatusitem = false
	#~ next if pbEnemyItemAlreadyUsed?(index,i,items)
	#~ if isConst?(i,PBItems,:POTION) || 
	#~ isConst?(i,PBItems,:ULTRAPOTION) || 
	#~ isConst?(i,PBItems,:SUPERPOTION) || 
	#~ isConst?(i,PBItems,:HYPERPOTION) ||
	#~ isConst?(i,PBItems,:MAXPOTION) ||
	#~ isConst?(i,PBItems,:FULLRESTORE) ||
	#~ isConst?(i,PBItems,:FRESHWATER) ||
	#~ isConst?(i,PBItems,:SODAPOP) ||
	#~ isConst?(i,PBItems,:LEMONADE) ||
	#~ isConst?(i,PBItems,:MOOMOOMILK) || 
	#~ isConst?(i,PBItems,:MEMEONADE) || 
	#~ isConst?(i,PBItems,:STRAWBIC) || 
	#~ isConst?(i,PBItems,:CHOCOLATEIC) || 
	#~ isConst?(i,PBItems,:BLUEMIC)         
	#~ ishpitem=true
	#~ end
	#~ if isConst?(i,PBItems,:FULLRESTORE) ||
	#~ isConst?(i,PBItems,:FULLHEAL) ||
	#~ isConst?(i,PBItems,:RAGECANDYBAR) ||
	#~ isConst?(i,PBItems,:LAVACOOKIE) ||
	#~ isConst?(i,PBItems,:OLDGATEAU) || 
	#~ isConst?(i,PBItems,:CASTELIACONE) || 
	#~ isConst?(i,PBItems,:LUMIOSEGALETTE) || 
	#~ isConst?(i,PBItems,:BIGMALASADA)
	#~ isstatusitem=true
	#~ end
	#~ if ishpitem
	#~ PBDebug.log(sprintf("This is a HP-healing item.")) if $INTERNAL
	#~ restoreamount=0
	#~ if isConst?(i,PBItems,:POTION)
	#~ restoreamount=20
	#~ elsif isConst?(i,PBItems,:ULTRAPOTION) 
	#~ restoreamount=200
	#~ elsif isConst?(i,PBItems,:SUPERPOTION)
	#~ restoreamount=60
	#~ elsif isConst?(i,PBItems,:HYPERPOTION)
	#~ restoreamount=120
	#~ elsif isConst?(i,PBItems,:MAXPOTION) || isConst?(i,PBItems,:FULLRESTORE)
	#~ restoreamount=battler.totalhp
	#~ elsif isConst?(i,PBItems,:FRESHWATER)
	#~ restoreamount=30
	#~ elsif isConst?(i,PBItems,:SODAPOP)
	#~ restoreamount=50
	#~ elsif isConst?(i,PBItems,:LEMONADE)
	#~ restoreamount=70
	#~ elsif isConst?(i,PBItems,:MOOMOOMILK)
	#~ restoreamount=110
	#~ elsif isConst?(i,PBItems,:MEMEONADE)
	#~ restoreamount=103
	#~ elsif isConst?(i,PBItems,:STRAWBIC) 
	#~ restoreamount=90
	#~ elsif isConst?(i,PBItems,:CHOCOLATEIC)
	#~ restoreamount=70
	#~ elsif isConst?(i,PBItems,:STRAWCAKE)
	#~ restoreamount=150
	#~ elsif isConst?(i,PBItems,:BLUEMIC)
	#~ restoreamount=200
	#~ end
	#~ resratio=restoreamount*(1.0/battler.totalhp)
	#~ itemscore*= (2 - (2*(battler.hp*(1.0/battler.totalhp))))
	#~ if highdamage>=battler.hp
	#~ if highdamage > [battler.hp+restoreamount,battler.totalhp].min
	#~ itemscore*=0
	#~ else
	#~ itemscore*=1.5
	#~ end
	#~ healmove = false
	#~ for j in battler.moves
	#~ if j.isHealingMove?
	#~ healmove=true
	#~ end
	#~ end
	#~ if healmove
	#~ if battler.speed < opponent1.speed
	#~ if highdamage>=battler.hp
	#~ itemscore*=1.2
	#~ else
	#~ itemscore*=0.5
	#~ if resratio<0.55
	#~ itemscore*=0.1
	#~ end
	#~ end
	#~ end
	#~ end
	#~ else
	#~ itemscore*=0.2
	#~ end
	#~ if highdamage > restoreamount
	#~ itemscore*=0
	#~ else
	#~ if restoreamount-highdamage < 15
	#~ itemscore*=0.3
	#~ end
	#~ end
	#~ if battler.speed > opponent1.speed
	#~ itemscore*=0.7
	#~ if highscore >=110
	#~ if maxopppri > maxplaypri
	#~ itemscore*=1.5
	#~ if pridam>battler.hp
	#~ itemscore*=3
	#~ end
	#~ elsif !opponent1.hasWorkingAbility(:STURDY)
	#~ itemscore*=0
	#~ end            
	#~ end  
	#~ if battler.hp == battler.totalhp
	#~ itemscore*=0
	#~ end
	#~ if currentroles.include?("Sweeper")
	#~ itemscore*=1.1
	#~ end
	#~ else
	#~ itemscore*=1.1
	#~ if highdamage*2 > [battler.hp+restoreamount,battler.totalhp].min
	#~ itemscore*=0
	#~ else
	#~ itemscore*=1.5
	#~ if highscore >=110
	#~ itemscore*=2
	#~ end
	#~ end
	#~ if battler.hp == battler.totalhp
	#~ itemscore*=0
	#~ end          
	#~ end
	#~ minipot = (partynumber-1)
	#~ minimini = -1        
	#~ for j in items
	#~ next if pbEnemyItemAlreadyUsed?(index,j,items)
	#~ next if !(isConst?(j,PBItems,:POTION) || 
	#~ isConst?(j,PBItems,:ULTRAPOTION) || 
	#~ isConst?(j,PBItems,:SUPERPOTION) || 
	#~ isConst?(j,PBItems,:HYPERPOTION) ||
	#~ isConst?(j,PBItems,:MAXPOTION) ||
	#~ isConst?(j,PBItems,:FULLRESTORE) ||
	#~ isConst?(j,PBItems,:FRESHWATER) ||
	#~ isConst?(j,PBItems,:SODAPOP) ||
	#~ isConst?(j,PBItems,:LEMONADE) ||
	#~ isConst?(j,PBItems,:MOOMOOMILK) || 
	#~ isConst?(j,PBItems,:MEMEONADE) || 
	#~ isConst?(j,PBItems,:STRAWBIC) || 
	#~ isConst?(j,PBItems,:CHOCOLATEIC) || 
	#~ isConst?(j,PBItems,:BLUEMIC))
	#~ minimini+=1
	#~ end 
	#~ if minipot>minimini
	#~ itemscore*=(0.8**(minipot-minimini))
	#~ minipot=minimini
	#~ elsif minimini>minipot
	#~ itemscore*=(1.1**(minimini-minipot))
	#~ minimini=minipot
	#~ end 
	#~ if currentroles.include?("Lead") || currentroles.include?("Screener")
	#~ itemscore*=0.4
	#~ end
	#~ if currentroles.include?("Tank")
	#~ itemscore*=1.2
	#~ end
	#~ if currentroles.include?("Second")
	#~ itemscore*=1.2
	#~ end
	#~ if currentroles.include?("Ace")
	#~ itemscore*=1.4
	#~ end
	#~ if battler.hasWorkingItem(:LEFTOVERS) || (battler.hasWorkingItem(:BLACKSLUDGE) && battler.pbHasType?(:POISON))
	#~ itemscore*=0.9
	#~ end
	#~ if battler.status!=0 && !isConst?(i,PBItems,:FULLRESTORE)
	#~ itemscore*=0.6
	#~ if battler.effects[PBEffects::Toxic]>0 && partynumber>1
	#~ itemscore*=0.2
	#~ end
	#~ end        
	#~ if PBTypes.getCombinedEffectiveness(opponent1.type1,battler.type1,battler.type2)>4
	#~ itemscore*=0.6
	#~ elsif PBTypes.getCombinedEffectiveness(opponent1.type1,battler.type1,battler.type2)<4
	#~ itemscore*=1.1
	#~ if PBTypes.getCombinedEffectiveness(opponent1.type1,battler.type1,battler.type2)==0
	#~ itemscore*=1.2
	#~ end
	#~ end
	#~ if PBTypes.getCombinedEffectiveness(opponent1.type2,battler.type1,battler.type2)>4
	#~ itemscore*=0.6
	#~ elsif PBTypes.getCombinedEffectiveness(opponent1.type1,battler.type1,battler.type2)<4
	#~ itemscore*=1.1
	#~ if PBTypes.getCombinedEffectiveness(opponent1.type1,battler.type1,battler.type2)==0
	#~ itemscore*=1.2
	#~ end
	#~ end
	#~ if battler.hasWorkingAbility(:REGENERATOR) && partynumber>1
	#~ itemscore*=0.6
	#~ end        
	#~ end        
	#~ if isstatusitem
	#~ PBDebug.log(sprintf("This is a status-curing item.")) if $INTERNAL
	#~ if !isConst?(i,PBItems,:FULLRESTORE)
	#~ if battler.status==0
	#~ itemscore*=0
	#~ else
	#~ if highdamage>battler.hp
	#~ if (bestid==106 && battler.status==PBStatuses::SLEEP) || (bestid==298 && battler.status==PBStatuses::PARALYSIS) || bestid==179
	#~ if highdamage*0.5>battler.hp
	#~ itemscore*=0
	#~ else
	#~ itemscore*=1.5
	#~ end
	#~ else
	#~ itemscore*=0
	#~ end              
	#~ end            
	#~ end
	#~ if battler.status==PBStatuses::SLEEP
	#~ if battler.pbHasMove?(getID(PBMoves,:SLEEPTALK)) ||
	#~ battler.pbHasMove?(getID(PBMoves,:SNORE)) ||
	#~ battler.pbHasMove?(getID(PBMoves,:REST)) ||
	#~ battler.hasWorkingAbility(:COMATOSE)
	#~ itemscore*=0.5
	#~ end
	#~ dreammove = false
	#~ if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0        
	#~ for k in @aiMoveMemory[2][opponent1.pokemonIndex]                  
	#~ if k.id==449 || k.id==188
	#~ dreammove=true
	#~ end                
	#~ end   
	#~ elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0  
	#~ for k in @aiMoveMemory[1]
	#~ if k.id==449 || k.id==188
	#~ dreammove=true
	#~ end
	#~ end   
	#~ elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0  
	#~ for k in @aiMoveMemory[0]
	#~ if k.id==449 || k.id==188
	#~ dreammove=true
	#~ end
	#~ end 
	#~ end
	#~ if dreammove || opponent1.hasWorkingAbility(:BADDREAMS)
	#~ itemscore*=1.3
	#~ end
	#~ if highdamage*(1.0/battler.hp)>0.2
	#~ itemscore*=1.3
	#~ else
	#~ itemscore*=0.5
	#~ end            
	#~ end  
	#~ if battler.status==PBStatuses::PARALYSIS
	#~ if battler.hasWorkingAbility(:QUICKFEET) || battler.hasWorkingAbility(:GUTS)
	#~ itemscore*=0.3
	#~ end
	#~ if battler.speed>opponent1.speed && (battler.speed*0.5)<opponent1.speed
	#~ itemscore*=1.3
	#~ end
	#~ itemscore*=1.1
	#~ end          
	#~ if battler.status==PBStatuses::BURN
	#~ if battler.hasWorkingAbility(:GUTS)
	#~ itemscore*=0.3
	#~ end
	#~ if battler.attack>battler.spatk
	#~ itemscore*=1.3
	#~ else
	#~ itemscore*=0.7
	#~ end
	#~ if battler.hasWorkingAbility(:MAGICGUARD)
	#~ itemscore*=0.5
	#~ end
	#~ if battler.hasWorkingAbility(:FLAREBOOST)
	#~ itemscore*=0.3
	#~ end
	#~ end
	#~ if battler.status==PBStatuses::POISON
	#~ itemscore*=1.2
	#~ if battler.hasWorkingAbility(:GUTS)
	#~ itemscore*=0.3
	#~ end
	#~ if battler.hasWorkingAbility(:MAGICGUARD)
	#~ itemscore*=0.3
	#~ end
	#~ if battler.hasWorkingAbility(:TOXICBOOST)
	#~ itemscore*=0.3
	#~ end
	#~ if battler.hasWorkingAbility(:POISONHEAL)
	#~ itemscore*=0.2
	#~ end
	#~ if battler.effects[PBEffects::Toxic]>0
	#~ itemscore*=1.1
	#~ if battler.effects[PBEffects::Toxic]>3
	#~ itemscore*=1.3
	#~ end
	#~ end            
	#~ end
	#~ if battler.status==PBStatuses::FROZEN
	#~ thawmove=false
	#~ for j in battler.moves
	#~ if j.canThawUser?
	#~ thawmove=true
	#~ end
	#~ end
	#~ if thawmove
	#~ itemscore*=0.2
	#~ end            
	#~ if highdamage*(1.0/battler.hp)>0.15
	#~ itemscore*=1.2
	#~ end            
	#~ end            
	#~ end
	#~ if battler.pbHasMove?(getID(PBMoves,:REFRESH)) ||
	#~ battler.pbHasMove?(getID(PBMoves,:REST)) ||
	#~ battler.pbHasMove?(getID(PBMoves,:
	#~ ))
	#~ itemscore*=0.5
	#~ end
	#~ if battler.hasWorkingAbility(:NATURALCURE) && partynumber>1
	#~ itemscore*=0.2
	#~ end
	#~ if battler.hasWorkingAbility(:SHEDSKIN)
	#~ itemscore*=0.3
	#~ end 
	#~ end   
	#~ if partynumber==1
	#~ itemscore*=1.3
	#~ else
	#~ itemscore*=0.6
	#~ if battler.itemUsed2
	#~ itemscore*=0.5
	#~ end
	#~ end
	#~ if battler.effects[PBEffects::Confusion]>0
	#~ itemscore*=0.8
	#~ end
	#~ if battler.effects[PBEffects::Attract]>=0
	#~ itemscore*=0.4
	#~ end
	#~ if battler.effects[PBEffects::Substitute]>0
	#~ itemscore*=1.2
	#~ end
	#~ if battler.effects[PBEffects::LeechSeed]>=0
	#~ itemscore*=0.3
	#~ end
	#~ if battler.effects[PBEffects::Curse]
	#~ itemscore*=0.3
	#~ end
	#~ if battler.effects[PBEffects::PerishSong]>0
	#~ itemscore*=0.1
	#~ end
	#~ minipot=0
	#~ for s in [PBStats::ATTACK,PBStats::DEFENSE,PBStats::SPEED,
	#~ PBStats::SPATK,PBStats::SPDEF,PBStats::ACCURACY,PBStats::EVASION]
	#~ minipot+=battler.stages[s]
	#~ end
	#~ if currentroles.include?("Physical Wall") || currentroles.include?("Special Wall")
	#~ for s in [PBStats::DEFENSE,PBStats::SPDEF]
	#~ minipot+=battler.stages[s]
	#~ end
	#~ end
	#~ if currentroles.include?("Sweeper")
	#~ for s in [PBStats::SPEED]
	#~ minipot+=battler.stages[s]
	#~ end
	#~ if battler.attack>battler.spatk
	#~ for s in [PBStats::ATTACK]
	#~ minipot+=battler.stages[s]
	#~ end
	#~ else
	#~ for s in [PBStats::SPATK]            
	#~ minipot+=battler.stages[s]
	#~ end
	#~ end
	#~ end
	#~ minipot*=5
	#~ minipot+=100
	#~ minipot*=0.01
	#~ itemscore*=minipot
	#~ if opponent1.effects[PBEffects::TwoTurnAttack]>0 || opponent1.effects[PBEffects::HyperBeam]>0
	#~ itemscore*=1.3
	#~ end
	#~ if highscore>50
	#~ itemscore*=1.1
	#~ else
	#~ itemscore*=0.7
	#~ end
	#~ fielddisrupt = getFieldDisruptScore(battler,opponent1,skill)
	#~ if fielddisrupt <= 0
	#~ fielddisrupt=0.5
	#~ end
	#~ itemscore*= (1.0/fielddisrupt)
	#~ if @trickroom > 0
	#~ itemscore*=0.8
	#~ end
	#~ if battler.pbOwnSide.effects[PBEffects::Tailwind]>0
	#~ itemscore*=0.6
	#~ end
	#~ if battler.pbOwnSide.effects[PBEffects::Reflect]>0
	#~ itemscore*=0.8
	#~ end
	#~ if battler.pbOwnSide.effects[PBEffects::LightScreen]>0
	#~ itemscore*=0.8
	#~ end
	#~ if battler.pbOwnSide.effects[PBEffects::AuroraVeil]>0
	#~ itemscore*=0.6
	#~ end
	#~ if @doublebattle
	#~ itemscore*=0.7
	#~ end
	#~ itemscore-=100            
	#~ PBDebug.log(sprintf("Score for %s: %d",PBItems.getName(i),itemscore)) if $INTERNAL
	#~ scorearray[arraycount] = itemscore
	#~ end
	#~ bestitem=-1
	#~ bestscore=-10000
	#~ counter=-1
	#~ for k in scorearray
	#~ counter+=1
	#~ if k>bestscore
	#~ bestscore = k
	#~ bestitem = items[counter]
	#~ end
	#~ end
	#~ PBDebug.log(sprintf("Highest item score: %d",bestscore)) if $INTERNAL
	#~ PBDebug.log(sprintf("Highest move score: %d",highscore)) if $INTERNAL
	#~ if highscore<bestscore
	#~ PBDebug.log(sprintf("Using %s",PBItems.getName(bestitem))) if $INTERNAL
	#~ return bestitem
	#~ else
	#~ PBDebug.log(sprintf("Not using an item.")) if $INTERNAL
	#~ PBDebug.log(sprintf(" ")) if $INTERNAL
	#~ return 0
	#~ end
	
	#~ =begin    
	#~ hashpitem=false
	#~ for i in items
	#~ next if pbEnemyItemAlreadyUsed?(index,i,items)
	#~ if isConst?(i,PBItems,:POTION) || 
	#~ isConst?(i,PBItems,:ULTRAPOTION) || 
	#~ isConst?(i,PBItems,:MOOMOOMILK) || 
	#~ isConst?(i,PBItems,:STRAWBIC) || 
	#~ isConst?(i,PBItems,:CHOCOLATEIC) || 
	#~ isConst?(i,PBItems,:SUPERPOTION) || 
	#~ isConst?(i,PBItems,:HYPERPOTION) || 
	#~ isConst?(i,PBItems,:MAXPOTION) ||
	#~ isConst?(i,PBItems,:FULLRESTORE) || 
	#~ isConst?(i,PBItems,:FRESHWATER) || 
	#~ isConst?(i,PBItems,:SODAPOP) || 
	#~ isConst?(i,PBItems,:LEMONADE) || 
	#~ isConst?(i,PBItems,:ORANBERRY) || 
	#~ isConst?(i,PBItems,:SITRUSBERRY) || 
	#~ isConst?(i,PBItems,:BERRYJUICE) || 
	#~ isConst?(i,PBItems,:ENERGYPOWDER) || 
	#~ isConst?(i,PBItems,:ENERGYROOT) || 
	#~ isConst?(i,PBItems,:STRAWCAKE)
	#~ hashpitem=true
	#~ end
	#~ end
	#~ for i in items
	#~ next if pbEnemyItemAlreadyUsed?(index,i,items)
	#~ if isConst?(i,PBItems,:FULLRESTORE)
	#~ return i if battler.hp<=battler.totalhp/4
	#~ return i if battler.hp<=battler.totalhp/2 && pbAIRandom(10)<3
	#~ return i if battler.hp<=battler.totalhp*2/3 &&
	#~ (battler.status>0 || battler.effects[PBEffects::Confusion]>0) &&
	#~ pbAIRandom(10)<3
	#~ elsif isConst?(i,PBItems,:POTION) || 
	#~ isConst?(i,PBItems,:SUPERPOTION) || 
	#~ isConst?(i,PBItems,:HYPERPOTION) || 
	#~ isConst?(i,PBItems,:MAXPOTION) || 
	#~ isConst?(i,PBItems,:MOOMOOMILK) || 
	#~ isConst?(i,PBItems,:ULTRAPOTION) || 
	#~ isConst?(i,PBItems,:STRAWBIC) || 
	#~ isConst?(i,PBItems,:CHOCOLATEIC) || 
	#~ isConst?(i,PBItems,:FRESHWATER) || 
	#~ isConst?(i,PBItems,:SODAPOP) || 
	#~ isConst?(i,PBItems,:LEMONADE) || 
	#~ isConst?(i,PBItems,:ORANBERRY) || 
	#~ isConst?(i,PBItems,:SITRUSBERRY) || 
	#~ isConst?(i,PBItems,:BERRYJUICE) || 
	#~ isConst?(i,PBItems,:ENERGYPOWDER) || 
	#~ isConst?(i,PBItems,:ENERGYROOT) || 
	#~ isConst?(i,PBItems,:STRAWCAKE)
	#~ boosts = @battlers[index].stages[PBStats::ATTACK]
	#~ boosts += @battlers[index].stages[PBStats::SPATK]
	#~ boosts += @battlers[index].stages[PBStats::SPEED]       
	#~ boosts  = boosts*2
	#~ boosts += @battlers[index].stages[PBStats::DEFENSE]
	#~ boosts += @battlers[index].stages[PBStats::SPDEF]         
	#~ boostsTooLow = boosts < -2
	#~ return i if battler.hp<=battler.totalhp/4 && !((boostsTooLow || battler.status>0 || (battler.effects[PBEffects::Confusion]>0 && pbAIRandom(2)==1)) && pbPokemonCount(pbParty(index))!=1)
	#~ return i if battler.hp<=battler.totalhp/2 && pbAIRandom(10)<3 && !((boostsTooLow || battler.status>0 || (battler.effects[PBEffects::Confusion]>0 && pbAIRandom(2)==1)) && pbPokemonCount(pbParty(index))!=1)
	#~ elsif isConst?(i,PBItems,:FULLHEAL)
	#~ return i if !hashpitem &&
	#~ (battler.status>0 || battler.effects[PBEffects::Confusion]>0)
	#~ elsif isConst?(i,PBItems,:XATTACK) ||
	#~ isConst?(i,PBItems,:XDEFEND) ||
	#~ isConst?(i,PBItems,:XSPEED) ||
	#~ isConst?(i,PBItems,:XSPECIAL) ||
	#~ isConst?(i,PBItems,:XSPDEF) ||
	#~ isConst?(i,PBItems,:XACCURACY)
	#~ stat=0
	#~ stat=PBStats::ATTACK if isConst?(i,PBItems,:XATTACK)
	#~ stat=PBStats::DEFENSE if isConst?(i,PBItems,:XDEFEND)
	#~ stat=PBStats::SPEED if isConst?(i,PBItems,:XSPEED)
	#~ stat=PBStats::SPATK if isConst?(i,PBItems,:XSPECIAL)
	#~ stat=PBStats::SPDEF if isConst?(i,PBItems,:XSPDEF)
	#~ stat=PBStats::ACCURACY if isConst?(i,PBItems,:XACCURACY)
	#~ if stat>0 && !battler.pbTooHigh?(stat)
	#~ return i if pbAIRandom(10)<3-battler.stages[stat]
	#~ end
	#~ end
	#~ end
	#~ =end    
	#~ #return 0 # Remove this when done    
	#~ end
	
	
	################################################################################
	# Decide whether the opponent should switch Pokémon. LARGELY OUTDATED
	################################################################################
	def pbEnemyShouldWithdraw?(index)
		if $INTERNAL && !pbIsOpposing?(index)
			return pbEnemyShouldWithdrawOld?(index)
		end
		return pbEnemyShouldWithdrawEx?(index,false)
	end
	
	def pbEnemyShouldWithdrawEx?(index,alwaysSwitch)
		return false if !@opponent
		shouldswitch=alwaysSwitch
		typecheck=false
		batonpass=-1
		movetype=-1
		skill=pbGetOwner(index).skill || 0
		#~ if @opponent && !shouldswitch && @battlers[index].turncount>0
		#~ if skill>=PBTrainerAI.highSkill
		#~ opponent=@battlers[index].pbOppositeOpposing
		#~ opponent=opponent.pbPartner if opponent.isFainted?
		#~ if !opponent.isFainted? && opponent.lastMoveUsed>0 && 
		#~ (opponent.level-@battlers[index].level).abs<=6
		#~ move=PBMoveData.new(opponent.lastMoveUsed)
		#~ typemod=pbTypeModifierAI(move.type,@battlers[index],@battlers[index])
		#~ movetype=move.type
		#~ if move.basedamage>70 && typemod>4
		#~ shouldswitch=(pbAIRandom(100)<30)
		#~ elsif move.basedamage>50 && typemod>4
		#~ shouldswitch=(pbAIRandom(100)<20)
		#~ end
		#~ end
		#~ end
		#~ end
		if !pbCanChooseMove?(index,0,false) &&
			!pbCanChooseMove?(index,1,false) &&
			!pbCanChooseMove?(index,2,false) &&
			!pbCanChooseMove?(index,3,false) &&
			@battlers[index].turncount &&
			@battlers[index].turncount>5
			shouldswitch=true
		end
		if skill>=PBTrainerAI.highSkill && @battlers[index].effects[PBEffects::PerishSong]!=1
			for i in 0...4
				move=@battlers[index].moves[i]
				if move.id!=0 && pbCanChooseMove?(index,i,false) &&
					move.function==0xED # Baton Pass
					batonpass=i
					break
				end
			end
		end
		if skill>=PBTrainerAI.highSkill
			if @battlers[index].status==PBStatuses::POISON &&
				@battlers[index].statusCount>0
				toxicHP=(@battlers[index].totalhp/16)
				nextToxicHP=toxicHP*(@battlers[index].effects[PBEffects::Toxic]+1)
				if nextToxicHP>=@battlers[index].hp &&
					toxicHP<@battlers[index].hp && pbAIRandom(100)<80
					PBDebug.log("Should switch to reduce toxic effects") if $INTERNAL
					shouldswitch=true
				end
			end
		end
		# Consider boosts- if Pokemon can sweep, don't switch out.
		boosts = @battlers[index].stages[PBStats::ATTACK]
		boosts += @battlers[index].stages[PBStats::SPATK]
		boosts += @battlers[index].stages[PBStats::SPEED]
		aspeed = pbRoughStat(@battlers[index],PBStats::SPEED,skill)
		ospeed = pbRoughStat(@battlers[index].pbOppositeOpposing,PBStats::SPEED,skill)
		if aspeed > ospeed
			boosts = boosts * 6 #fast enough to sweep; prioritise these stats
		else
			boosts = boosts * 3 #sweeping stats prioritized
		end
		boosts += @battlers[index].stages[PBStats::DEFENSE]
		boosts += @battlers[index].stages[PBStats::SPDEF]
		if boosts >= 6
			shouldswitch=false
		end		
		##
		if skill>=PBTrainerAI.mediumSkill
			if @battlers[index].effects[PBEffects::Encore]>0
				scoreSum=0
				scoreCount=0
				attacker=@battlers[index]
				encoreIndex=@battlers[index].effects[PBEffects::EncoreIndex]
				if !attacker.pbOpposing1.isFainted?
					rough1 = pbRoughDamage(attacker.moves[encoreIndex],attacker,attacker.pbOpposing1,skill,attacker.moves[encoreIndex].basedamage)          
					percent1 = (rough1*100)/(attacker.pbOpposing1.hp)
					scoreSum+=pbGetMoveScore(attacker.moves[encoreIndex],
						attacker,attacker.pbOpposing1,skill,percent1)
					scoreCount+=1
				end
				if !attacker.pbOpposing2.isFainted?
					rough2 = pbRoughDamage(attacker.moves[encoreIndex],attacker,attacker.pbOpposing2,skill,attacker.moves[encoreIndex].basedamage)          
					percent2 = (rough2*100)/(attacker.pbOpposing2.hp)          
					scoreSum+=pbGetMoveScore(attacker.moves[encoreIndex],
						attacker,attacker.pbOpposing2,skill,percent2)
					scoreCount+=1
				end
				if scoreCount>0 && scoreSum/scoreCount<=20 && pbAIRandom(10)<8
					shouldswitch=true
				end
			end
		end
		if skill>=PBTrainerAI.highSkill
			if !@doublebattle && !@battlers[index].pbOppositeOpposing.isFainted? 
				opp=@battlers[index].pbOppositeOpposing
				if (opp.effects[PBEffects::HyperBeam]>0 ||
						(opp.hasWorkingAbility(:TRUANT) &&
							opp.effects[PBEffects::Truant])) && pbAIRandom(100)<80
					shouldswitch=false
				end
			end
		end
		if @rules["suddendeath"]
			if @battlers[index].hp<=(@battlers[index].totalhp/4) && pbAIRandom(10)<3 && 
				@battlers[index].turncount>0
				shouldswitch=true
			elsif @battlers[index].hp<=(@battlers[index].totalhp/2) && pbAIRandom(10)<8 && 
				@battlers[index].turncount>0
				shouldswitch=true
			end
		end
		if @battlers[index].effects[PBEffects::PerishSong]==1
			shouldswitch=true
		end
		if @battlers[index].hasWorkingItem(:CUSTAPBERRY)
			shouldswitch=false
		end		
		if shouldswitch
			list=[]
			party=pbParty(index)
			for i in 0...party.length
				next if i == party.length-1 #&& $game_switches[900]   
				if pbCanSwitch?(index,i,false)
					# If perish count is 1, it may be worth it to switch
					# even with Spikes, since Perish Song's effect will end
					if @battlers[index].effects[PBEffects::PerishSong]!=1
						# Will contain effects that recommend against switching
						spikes=@battlers[index].pbOwnSide.effects[PBEffects::Spikes]
						if (spikes==1 && party[i].hp<=(party[i].totalhp/8)) ||
							(spikes==2 && party[i].hp<=(party[i].totalhp/6)) ||
							(spikes==3 && party[i].hp<=(party[i].totalhp/4))
							if !party[i].hasType?(:FLYING) &&
								!party[i].hasWorkingAbility(:LEVITATE)
								# Don't switch to this if too little HP
								next
							end
						end
					end
					if movetype>=0 && pbTypeModifierAI(movetype,@battlers[index],@battlers[index])==0
						weight=65
						if pbTypeModifier2(party[i],@battlers[index].pbOppositeOpposing)<16
							# Greater weight if new Pokemon's type is effective against opponent
							weight=85
						end
						if pbAIRandom(100)<weight
							list.unshift(i) # put this Pokemon first
						end
					elsif movetype>=0 && pbTypeModifierAI(movetype,@battlers[index],@battlers[index])<4
						weight=40
						if pbTypeModifier2(party[i],@battlers[index].pbOppositeOpposing)<16
							# Greater weight if new Pokemon's type is effective against opponent
							weight=60
						end
						if pbAIRandom(100)<weight
							list.unshift(i) # put this Pokemon first
						end
					else
						list.push(i) # put this Pokemon last
					end
				end
			end
			if list.length>0
				if batonpass!=-1
					if !pbRegisterMove(index,batonpass,false)
						return pbRegisterSwitch(index,list[0])
					end
					return true
				else
					return pbRegisterSwitch(index,list[0])
				end
			end
		end
		return false
	end
	
	def pbDefaultChooseNewEnemy(index,party)
		return pbSwitchTo(@battlers[index],party,pbGetOwner(index).skill)
=begin    
    enemies=[]
    length = party.length-1
    for i in 0..length
        if pbCanSwitchLax?(index,i,false)
            if i == length && $game_switches[1000]
                if  enemies.length == 0
                    enemies.push(i)
                end
            else
                enemies.push(i)
            end
        end
    end
    if enemies.length>0
      return pbChooseBestNewEnemy(index,party,enemies)
    end
    return -1
=end    
	end
	
	def pbChooseBestNewEnemy(index,party,enemies)
		return -1 if !enemies || enemies.length==0
		$PokemonTemp=PokemonTemp.new if !$PokemonTemp
		o1=@battlers[index].pbOpposing1
		o2=@battlers[index].pbOpposing2
		o1=nil if o1 && o1.isFainted?
		o2=nil if o2 && o2.isFainted?
		best=-1
		bestSum=0
		for e in enemies
			pkmn=party[e]
			sum=0
			for move in pkmn.moves
				next if move.id==0
				md=PBMoveData.new(move.id)
				next if md.basedamage==0
				if o1
					sum+=PBTypes.getCombinedEffectiveness(md.type,o1.type1,o1.type2,o1.type3)
				end
				if o2
					sum+=PBTypes.getCombinedEffectiveness(md.type,o2.type1,o2.type2,o2.type3)
				end
			end
			if best==-1 || sum>bestSum
				best=e
				bestSum=sum
			end
		end
		return best
	end
	
	
	################################################################################
	# Decide whether the opponent should switch Pokémon, and what to switch to. NEW
	################################################################################
	def pbShouldSwitch?(index)    
		return false if !@opponent || $game_switches[318]		
		switchscore = 0
		noswitchscore = 0
		monarray = []
		currentmon = @battlers[index]
		opponent1 = currentmon.pbOppositeOpposing
		opponent2 = opponent1.pbPartner
		party = pbParty(index)
		partyroles=[]
		skill=pbGetOwner(index).skill || 0
		count = 0
		for i in party
			next if i.nil?
			next if i.hp == 0
			count+=1
		end
		return false if count==1
		if count==2
			return false
		end    
		count = 0
		for i in 0..(party.length-1)
			next if !pbCanSwitchLax?(index,i,false)
			count+=1
		end
		return false if count==0
		count = -1        
		for i in party      
			count+=1
			next if i.nil?
			next if count == currentmon.pokemonIndex
			dummyarr1 = pbGetMonRole(i,opponent1,skill,count,party)
			(partyroles << dummyarr1).flatten!
			dummyarr2 = pbGetMonRole(i,opponent2,skill,count,party)
			(partyroles << dummyarr2).flatten!
		end  
		partyroles.uniq!
		currentroles = pbGetMonRole(currentmon,opponent1,skill)
		# Statuses
		PBDebug.log(sprintf("Initial switchscore building: Statuses (%d)",switchscore)) if $INTERNAL
		if currentmon.effects[PBEffects::Curse]
			switchscore+=80
		end
		if currentmon.effects[PBEffects::LeechSeed]>=0
			switchscore+=60
		end
		if currentmon.effects[PBEffects::Attract]>=0
			switchscore+=60
		end    
		if currentmon.effects[PBEffects::Confusion]>0
			switchscore+=80
		end    
		if currentmon.effects[PBEffects::PerishSong]==2
			switchscore+=40
		elsif currentmon.effects[PBEffects::PerishSong]==1
			switchscore+=200
		end    
		if currentmon.effects[PBEffects::Toxic]>0
			switchscore+= (currentmon.effects[PBEffects::Toxic]*15)
		end   
		if currentmon.hasWorkingAbility(:NATURALCURE) && currentmon.status!=0
			switchscore+=50
		end
		if partyroles.include?("Cleric") && currentmon.status!=0
			switchscore+=60
		end
		if currentmon.status==PBStatuses::SLEEP 
			if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0
				for i in @aiMoveMemory[2][opponent1.pokemonIndex]
					if i.id==getID(PBMoves,:DREAMEATER)
						switchscore+=170
					end
				end        
			elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0
				for i in @aiMoveMemory[1]
					if i.id==getID(PBMoves,:DREAMEATER)
						switchscore+=170
					end
				end
			elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0
				if @aiMoveMemory[0][0].id==getID(PBMoves,:DREAMEATER)
					switchscore+=170
				end         
			end      
		end   
		if currentmon.effects[PBEffects::Yawn]>0 && currentmon.status!=PBStatuses::SLEEP
			switchscore+=95
		end  
		# Stat Stages
		PBDebug.log(sprintf("Initial switchscore building: Stat Stages (%d)",switchscore)) if $INTERNAL
		specialmove = false
		physmove = false
		for i in currentmon.moves
			specialmove = true if i.pbIsSpecial?(i.type)
			physmove = true if i.pbIsPhysical?(i.type)
		end    
		if currentroles.include?("Sweeper")
			switchscore+= (-30)*currentmon.stages[PBStats::ATTACK] if currentmon.stages[PBStats::ATTACK]<0 && physmove
			switchscore+= (-30)*currentmon.stages[PBStats::SPATK] if currentmon.stages[PBStats::SPATK]<0 && specialmove
			switchscore+= (-30)*currentmon.stages[PBStats::SPEED] if currentmon.stages[PBStats::SPEED]<0
			switchscore+= (-30)*currentmon.stages[PBStats::ACCURACY] if currentmon.stages[PBStats::ACCURACY]<0
		else
			switchscore+= (-15)*currentmon.stages[PBStats::ATTACK] if currentmon.stages[PBStats::ATTACK]<0 && physmove
			switchscore+= (-15)*currentmon.stages[PBStats::SPATK] if currentmon.stages[PBStats::SPATK]<0 && specialmove
			switchscore+= (-15)*currentmon.stages[PBStats::SPEED] if currentmon.stages[PBStats::SPEED]<0      
			switchscore+= (-15)*currentmon.stages[PBStats::ACCURACY] if currentmon.stages[PBStats::ACCURACY]<0      
		end    
		if currentroles.include?("Physical Wall")
			switchscore+= (-30)*currentmon.stages[PBStats::DEFENSE] if currentmon.stages[PBStats::DEFENSE]<0      
		else
			switchscore+= (-15)*currentmon.stages[PBStats::DEFENSE] if currentmon.stages[PBStats::DEFENSE]<0      
		end  
		if currentroles.include?("Special Wall")
			switchscore+= (-30)*currentmon.stages[PBStats::SPDEF] if currentmon.stages[PBStats::SPDEF]<0      
		else
			switchscore+= (-15)*currentmon.stages[PBStats::SPDEF] if currentmon.stages[PBStats::SPDEF]<0      
		end  
		# Healing
		PBDebug.log(sprintf("Initial switchscore building: Healing")) if $INTERNAL
		if currentmon.hp/currentmon.totalhp<(2/3) && currentmon.hasWorkingAbility(:REGENERATOR)
			switchscore+=30
		end
		if currentmon.effects[PBEffects::Wish]>0
			lowhp = false
			for i in party
				next if i.nil?
				if 0.3<(i.hp/i.totalhp) && (i.hp/i.totalhp)<0.6
					lowhp = true
				end
			end
			switchscore+40 if lowhp
		end    
		# fsteak
		PBDebug.log(sprintf("Initial switchscore building: fsteak (%d)",switchscore)) if $INTERNAL
		finalmod = 0
		for i in currentmon.moves
			mod1 = pbTypeModNoMessages(i.type,currentmon,opponent1,i,skill)
			mod2 = pbTypeModNoMessages(i.type,currentmon,opponent2,i,skill)
			mod1 = 4 if opponent1.hp==0
			mod2 = 4 if opponent2.hp==0
			if opponent1.hasWorkingAbility(:WONDERGUARD) && mod1<=4
				mod1=0
			end
			if opponent2.hasWorkingAbility(:WONDERGUARD) && mod2<=4
				mod2=0
			end
			finalmod += mod1*mod2
		end
		switchscore+=140 if finalmod==0
		totalpp=0
		for i in currentmon.moves
			totalpp+= i.pp
		end
		switchscore+=200 if totalpp==0
		if currentmon.effects[PBEffects::Encore]>0
			encoreIndex=currentmon.effects[PBEffects::EncoreIndex]
			dmgValue = pbRoughDamage(currentmon.moves[encoreIndex],currentmon,opponent1,skill,currentmon.moves[encoreIndex].basedamage)
			if currentmon.moves[encoreIndex].basedamage!=0
				dmgPercent = (dmgValue*100)/(opponent1.hp)
				dmgPercent = 110 if dmgPercent > 110
			else
				dmgPercent = pbStatusDamage(currentmon.moves[encoreIndex])
			end       
			encoreScore=pbGetMoveScore(currentmon.moves[encoreIndex],currentmon,opponent1,skill,dmgPercent)
			if encoreScore <= 30
				switchscore+=120
			end    
		end  
		if skill<PBTrainerAI.highSkill
			switchscore/=2.0
		end
		# Specific Switches
		PBDebug.log(sprintf("Initial switchscore building: Specific Switches (%d)",switchscore)) if $INTERNAL
		
		if opponent1.effects[PBEffects::TwoTurnAttack]>0
			twoturnmove = PBMoveData.new(opponent1.effects[PBEffects::TwoTurnAttack])
			twoturntype = twoturnmove.type
			breakvar = false
			savedmod = -1
			indexsave = -1
			count = -1  
			for i in party
				count+=1
				next if i.nil?
				next if count == currentmon.pokemonIndex      
				totalmod=currentmon.moves[0].pbTypeModifierAINonBattler(twoturntype,opponent1,i)        
				if totalmod<4
					switchscore+=80 unless breakvar
					breakvar = true
					if savedmod<0
						indexsave = count
						savedmod = totalmod
					else
						if savedmod>totalmod
							indexsave = count
							savedmod = totalmod
						end
					end
				end        
			end
			monarray.push(indexsave) if indexsave > -1
		end 
		if pbRoughStat(currentmon,PBStats::SPEED,skill) < pbRoughStat(opponent1,PBStats::SPEED,skill)
			if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0
				movedamages = []
				for i in @aiMoveMemory[2][opponent1.pokemonIndex]
					movedamages.push(pbRoughDamage(i,opponent1,currentmon,skill,i.basedamage))
				end   
				if movedamages.length > 0
					bestmoveindex = movedamages.index(movedamages.max)
					bestmove = @aiMoveMemory[2][opponent1.pokemonIndex][bestmoveindex]  #checklater
					if (currentmon.hp) < movedamages[bestmoveindex]
						count = -1
						breakvar = false
						immunevar = false
						savedmod = -1
						indexsave = -1     
						for i in party
							count+=1
							next if i.nil?
							next if count == currentmon.pokemonIndex
							totalmod = bestmove.pbTypeModifierAINonBattler(bestmove.type,opponent1,i)
							if totalmod<4
								switchscore+=80 unless breakvar
								breakvar = true
								if totalmod == 0
									switchscore+=20 unless immunevar
									immunevar = true
								end     
								if savedmod<0
									indexsave = count
									savedmod = totalmod
								else
									if savedmod>totalmod
										indexsave = count
										savedmod = totalmod
									end
								end
							end        
						end
						if immunevar
							monarray.push(indexsave) if indexsave > -1
						else
							if indexsave > -1
								if party[indexsave].speed > pbRoughStat(opponent1,PBStats::SPEED,skill)
									monarray.push(indexsave)
								end
							end
						end            
					end
				end
			elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0
				movedamages = []
				for i in @aiMoveMemory[1]
					movedamages.push(pbRoughDamage(i,opponent1,currentmon,skill,i.basedamage))
				end   
				if movedamages.length > 0
					bestmoveindex = movedamages.index(movedamages.max)
					bestmove = opponent1.moves[bestmoveindex]
					if (currentmon.hp) < movedamages[bestmoveindex]
						count = -1
						breakvar = false
						immunevar = false
						savedmod = -1
						indexsave = -1        
						for i in party
							count+=1
							next if i.nil?
							next if count == currentmon.pokemonIndex
							totalmod = bestmove.pbTypeModifierAINonBattler(bestmove.type,opponent1,i)
							if totalmod<4
								switchscore+=80 unless breakvar
								breakvar = true
								if totalmod == 0
									switchscore+=20 unless immunevar
									immunevar = true
								end            
								if savedmod<0
									indexsave = count
									savedmod = totalmod
								else
									if savedmod>totalmod
										indexsave = count
										savedmod = totalmod
									end
								end
							end        
						end
						if immunevar
							monarray.push(indexsave) if indexsave > -1
						else
							if indexsave > -1
								if party[indexsave].speed > pbRoughStat(opponent1,PBStats::SPEED,skill)
									monarray.push(indexsave)
								end
							end
						end  
					end   
				end
			elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0
				movedamage = pbRoughDamage(@aiMoveMemory[0][0],opponent1,currentmon,skill,@aiMoveMemory[0][0].basedamage)
				bestmove = @aiMoveMemory[0][0]
				if (currentmon.hp) < movedamage
					count = -1
					breakvar = false
					immunevar = false
					savedmod = -1
					indexsave = -1        
					for i in party
						count+=1
						next if i.nil?
						next if count == currentmon.pokemonIndex   
						totalmod = bestmove.pbTypeModifierAINonBattler(bestmove.type,opponent1,i)
						if totalmod<4
							switchscore+=80 unless breakvar
							breakvar = true
							if totalmod == 0
								switchscore+=20 unless immunevar
								immunevar = true
							end            
							if savedmod<0
								indexsave = count
								savedmod = totalmod
							else
								if savedmod>totalmod
									indexsave = count
									savedmod = totalmod
								end
							end
						end        
					end
					if immunevar
						monarray.push(indexsave) if indexsave > -1
					else
						if indexsave > -1
							if party[indexsave].speed > pbRoughStat(opponent1,PBStats::SPEED,skill)
								monarray.push(indexsave)
							end
						end
					end  
				end   
			end            
		end
		if pbRoughStat(currentmon,PBStats::SPEED,skill) < pbRoughStat(opponent2,PBStats::SPEED,skill)
			if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0
				movedamages = []
				for i in @aiMoveMemory[2][opponent2.pokemonIndex]
					movedamages.push(pbRoughDamage(i,opponent2,currentmon,skill,i.basedamage))
				end   
				if movedamages.length > 0
					bestmoveindex = movedamages.index(movedamages.max)
					bestmove = opponent2.moves[bestmoveindex]
					if (currentmon.hp) < movedamages[bestmoveindex]
						count = -1
						breakvar = false
						immunevar = false
						savedmod = -1
						indexsave = -1        
						for i in party
							count+=1
							next if i.nil?
							next if count == currentmon.pokemonIndex     
							totalmod = bestmove.pbTypeModifierAINonBattler(bestmove.type,opponent2,i)
							if totalmod<4
								switchscore+=80 unless breakvar
								breakvar = true
								if totalmod == 0
									switchscore+=20 unless immunevar
									immunevar = true
								end            
								if savedmod<0
									indexsave = count
									savedmod = totalmod
								else
									if savedmod>totalmod
										indexsave = count
										savedmod = totalmod
									end
								end
							end        
						end
						if immunevar
							monarray.push(indexsave) if indexsave > -1
						else
							if indexsave > -1
								if party[indexsave].speed > pbRoughStat(opponent2,PBStats::SPEED,skill)
									monarray.push(indexsave)
								end
							end
						end            
					end
				end
			elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0
				movedamages = []
				for i in @aiMoveMemory[1]
					movedamages.push(pbRoughDamage(i,opponent2,currentmon,skill,i.basedamage))
				end   
				if movedamages.length > 0
					bestmoveindex = movedamages.index(movedamages.max)
					bestmove = opponent2.moves[bestmoveindex]
					if (currentmon.hp) < movedamages[bestmoveindex]
						count = -1
						breakvar = false
						immunevar = false
						savedmod = -1
						indexsave = -1        
						for i in party
							count+=1
							next if i.nil?
							next if count == currentmon.pokemonIndex
							totalmod = bestmove.pbTypeModifierAINonBattler(bestmove.type,opponent2,i)
							if totalmod<4
								switchscore+=80 unless breakvar
								breakvar = true
								if totalmod == 0
									switchscore+=20 unless immunevar
									immunevar = true
								end            
								if savedmod<0
									indexsave = count
									savedmod = totalmod
								else
									if savedmod>totalmod
										indexsave = count
										savedmod = totalmod
									end
								end
							end        
						end
						if immunevar
							monarray.push(indexsave) if indexsave > -1
						else
							if indexsave > -1
								if party[indexsave].speed > pbRoughStat(opponent2,PBStats::SPEED,skill)
									monarray.push(indexsave)
								end
							end
						end  
					end   
				end
			elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0
				movedamage = pbRoughDamage(@aiMoveMemory[0][0],opponent2,currentmon,skill,@aiMoveMemory[0][0].basedamage)
				bestmove = @aiMoveMemory[0][0]
				if (currentmon.hp) < movedamage
					count = -1
					breakvar = false
					immunevar = false
					savedmod = -1
					indexsave = -1        
					for i in party
						count+=1
						next if i.nil?
						next if count == currentmon.pokemonIndex
						totalmod = bestmove.pbTypeModifierAINonBattler(bestmove.type,opponent2,i)
						if totalmod<4
							switchscore+=80 unless breakvar
							breakvar = true
							if totalmod == 0
								switchscore+=20 unless immunevar
								immunevar = true
							end            
							if savedmod<0
								indexsave = count
								savedmod = totalmod
							else
								if savedmod>totalmod
									indexsave = count
									savedmod = totalmod
								end
							end
						end        
					end
					if immunevar
						monarray.push(indexsave) if indexsave > -1
					else
						if indexsave > -1
							if party[indexsave].speed > pbRoughStat(opponent2,PBStats::SPEED,skill)
								monarray.push(indexsave)
							end
						end
					end  
				end   
			end            
		end 
		if skill>=PBTrainerAI.highSkill      
			if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0
				fakeout = false
				for i in @aiMoveMemory[2][opponent1.pokemonIndex]
					if i.id==getID(PBMoves,:FAKEOUT)
						fakeout = true
					end
				end  
				if fakeout && opponent1.turncount == 1
					count = -1       
					for i in party
						count+=1
						next if i.nil?
						next if count == currentmon.pokemonIndex   
						if isConst?(i.ability,PBAbilities,:STEADFAST)
							monarray.push(count)
							switchscore+=90
							break
						end
					end
				end
			end      
		end
		if skill>=PBTrainerAI.highSkill      
			if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0
				fakeout = false
				for i in @aiMoveMemory[2][opponent2.pokemonIndex]
					if i.id==getID(PBMoves,:FAKEOUT)
						fakeout = true
					end
				end  
				if fakeout && opponent1.turncount == 1
					count = -1       
					for i in party
						count+=1
						next if i.nil?
						next if count == currentmon.pokemonIndex   
						if isConst?(i.ability,PBAbilities,:STEADFAST)
							monarray.push(count)
							switchscore+=90
							break
						end
					end
				end
			end      
		end
		if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0
			if isConst?(opponent1.ability,PBAbilities,:SKILLLINK)
				probablycinccino = false
				for i in @aiMoveMemory[2][opponent1.pokemonIndex]
					if i.function==0xC0 && i.isContactMove?
						probablycinccino = true
					end
				end  
				if probablycinccino
					count = -1             
					maxpain = 0
					storedmon = -1
					for i in party
						count+=1
						next if i.nil?
						paincount = 0
						next if count == currentmon.pokemonIndex   
						if isConst?(i.ability,PBAbilities,:ROUGHSKIN) || isConst?(i.ability,PBAbilities,:IRONBARBS)
							paincount+=1
						end
						if isConst?(i.item,PBItems,:ROCKYHELMET)
							paincount+=1
						end            
						if paincount>0 && paincount>maxpain
							maxpain=paincount
							storedmon = count
							switchscore+=70
						end            
					end
					if storedmon>-1
						monarray.push(storedmon)
					end          
				end
			end      
		end
		if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0
			if isConst?(opponent2.ability,PBAbilities,:SKILLLINK)
				probablycinccino = false
				for i in @aiMoveMemory[2][opponent2.pokemonIndex]
					if i.function==0xC0 && i.isContactMove?
						probablycinccino = true
					end
				end  
				if probablycinccino
					count = -1             
					maxpain = 0
					storedmon = -1
					for i in party
						count+=1
						next if i.nil?
						paincount = 0
						next if count == currentmon.pokemonIndex   
						if isConst?(i.ability,PBAbilities,:ROUGHSKIN) || isConst?(i.ability,PBAbilities,:IRONBARBS)
							paincount+=1
						end
						if isConst?(i.item,PBItems,:ROCKYHELMET)
							paincount+=1
						end            
						if paincount>0 && paincount>maxpain
							maxpain=paincount
							storedmon = count
							switchscore+=70
						end            
					end   
					if storedmon>-1
						monarray.push(storedmon)
					end          
				end
			end      
		end
		count = -1             
		storedmon = -1
		storedhp = -1
		for i in party
			count+=1
			next if i.nil?
			next if i.totalhp==0
			next if count == currentmon.pokemonIndex
			next if !pbCanSwitchLax?(currentmon.index,count,false)
			if storedhp < 0
				storedhp = i.hp/i.totalhp.to_f
				storedmon = i #count
				storedcount = count
			else
				if storedhp > i.hp/i.totalhp.to_f
					storedhp = i.hp/i.totalhp.to_f
					storedmon = i #count
					storedcount = count
				end
			end
		end
		if storedhp < 0.20 && storedhp > 0
			if (storedmon.speed < pbRoughStat(opponent1,PBStats::SPEED,skill)) || (
					storedmon.speed < pbRoughStat(opponent2,PBStats::SPEED,skill)) || 
				currentmon.pbOwnSide.effects[PBEffects::Spikes]>0 || 
				currentmon.pbOwnSide.effects[PBEffects::StealthRock]
				speedcheck = false
				for i in party
					next if i.nil?
					next if i==storedmon
					if i.speed > pbRoughStat(opponent1,PBStats::SPEED,skill)
						speedcheck = true
					end
				end
				if speedcheck
					monarray.push(storedcount)
					switchscore+=20
				end
			end      
		end
		maxlevel = -1
		for i in party
			next if i.nil?
			if maxlevel < 0
				maxlevel = i.level
			else
				if maxlevel < i.level
					maxlevel = i.level
				end
			end
		end
		if maxlevel>(opponent1.level+10)
			switchscore-=100
			if maxlevel>(opponent1.level+20)
				switchscore-=1000
			end
		end    
		PBDebug.log(sprintf("%s: initial switchscore: %d",PBSpecies.getName(@battlers[index].species),switchscore)) if $INTERNAL
		PBDebug.log(sprintf(" ")) if $INTERNAL
		# Stat Stages
		PBDebug.log(sprintf("Initial noswitchscore building: Stat Stages (%d)",noswitchscore)) if $INTERNAL
		specialmove = false
		physmove = false
		for i in currentmon.moves
			specialmove = true if i.pbIsSpecial?(i.type)
			physmove = true if i.pbIsPhysical?(i.type)
		end      
		if currentroles.include?("Sweeper")
			noswitchscore+= (30)*currentmon.stages[PBStats::ATTACK] if currentmon.stages[PBStats::ATTACK]>0 && physmove
			noswitchscore+= (30)*currentmon.stages[PBStats::SPATK] if currentmon.stages[PBStats::SPATK]>0 && specialmove
			noswitchscore+= (30)*currentmon.stages[PBStats::SPEED] if currentmon.stages[PBStats::SPEED]>0 unless (currentroles.include?("Physical Wall") || currentroles.include?("Special Wall") || currentroles.include?("Tank"))   
		else
			noswitchscore+= (15)*currentmon.stages[PBStats::ATTACK] if currentmon.stages[PBStats::ATTACK]>0 && physmove
			noswitchscore+= (15)*currentmon.stages[PBStats::SPATK] if currentmon.stages[PBStats::SPATK]>0 && specialmove
			noswitchscore+= (15)*currentmon.stages[PBStats::SPEED] if currentmon.stages[PBStats::SPEED]>0 unless (currentroles.include?("Physical Wall") || currentroles.include?("Special Wall") || currentroles.include?("Tank"))
		end    
		if currentroles.include?("Physical Wall")
			noswitchscore+= (30)*currentmon.stages[PBStats::DEFENSE] if currentmon.stages[PBStats::DEFENSE]<0      
		else
			noswitchscore+= (15)*currentmon.stages[PBStats::DEFENSE] if currentmon.stages[PBStats::DEFENSE]<0      
		end  
		if currentroles.include?("Special Wall")
			noswitchscore+= (30)*currentmon.stages[PBStats::SPDEF] if currentmon.stages[PBStats::SPDEF]<0      
		else
			noswitchscore+= (15)*currentmon.stages[PBStats::SPDEF] if currentmon.stages[PBStats::SPDEF]<0      
		end  
		# Entry Hazards
		PBDebug.log(sprintf("Initial noswitchscore building: Entry Hazards (%d)",noswitchscore)) if $INTERNAL
		noswitchscore+= (15)*currentmon.pbOwnSide.effects[PBEffects::Spikes]
		noswitchscore+= (15)*currentmon.pbOwnSide.effects[PBEffects::ToxicSpikes]
		noswitchscore+= (15) if currentmon.pbOwnSide.effects[PBEffects::StealthRock]
		noswitchscore+= (15) if currentmon.pbOwnSide.effects[PBEffects::StickyWeb]
		noswitchscore+= (15) if (currentmon.pbOwnSide.effects[PBEffects::StickyWeb] && currentroles.include?("Sweeper"))    
		airmon = currentmon.isAirborneAI?
		hazarddam = totalHazardDamage(currentmon.pbOwnSide,currentmon.type1,currentmon.type2,currentmon.type3,airmon,skill)
		if (currentmon.hp/currentmon.totalhp) < hazarddam
			noswitchscore+= 100
		end
		temppartyko = true
		for i in party
			count+=1
			next if i.nil?
			next if count == currentmon.pokemonIndex
			temproles = pbGetMonRole(i,opponent1,skill,count,party)
			next if temproles.include?("Ace")
			tempdam = totalHazardDamage(currentmon.pbOwnSide,i.type1,i.type2,i.type3,i.isAirborneAI?,skill)
			if (i.hp/i.totalhp) > tempdam
				temppartyko = false
			end      
		end  
		if temppartyko
			noswitchscore+= 200
		end  
		# Better Switching Options
		PBDebug.log(sprintf("Initial noswitchscore building: Better Switching Options (%d)",noswitchscore)) if $INTERNAL
		if pbRoughStat(currentmon,PBStats::SPEED,skill) > pbRoughStat(opponent1,PBStats::SPEED,skill)
			if currentmon.pbHasMove?(getID(PBMoves,:VOLTSWITCH)) || currentmon.pbHasMove?(getID(PBMoves,:UTURN))
				noswitchscore+=90
			end
		end
		if currentmon.effects[PBEffects::PerishSong]==0 && currentmon.pbHasMove?(getID(PBMoves,:BATONPASS))
			noswitchscore+=90
		end
		# Second Wind Situations
		PBDebug.log(sprintf("Initial noswitchscore building: Second Wind Situations (%d)",noswitchscore)) if $INTERNAL
		privar = false
		if skill>=PBTrainerAI.bestSkill
			if @aiMoveMemory[2][opponent1.pokemonIndex].length>0
				for j in @aiMoveMemory[2][opponent1.pokemonIndex]
					privar=true if j.priority>0
				end  
			end
		elsif skill>=PBTrainerAI.highSkill
			if @aiMoveMemory[1].length>0
				for j in @aiMoveMemory[1]
					privar=true if j.priority>0
				end  
			end
		elsif skill>=PBTrainerAI.mediumSkill
			if @aiMoveMemory[0].length>0
				for j in @aiMoveMemory[0]
					privar=true if j.priority>0
				end  
			end          
		end
		if !privar
			if pbRoughStat(currentmon,PBStats::SPEED,skill) > pbRoughStat(opponent1,PBStats::SPEED,skill)
				maxdam = 0
				for i in currentmon.moves
					if opponent1.hp>0
						tempdam = (pbRoughDamage(i,opponent1,currentmon,skill,i.basedamage)*100/opponent1.hp)
					else
						tempdam=0
					end        
					if tempdam > maxdam
						maxdam = tempdam
					end
				end      
				if maxdam > 100 
					noswitchscore+=130
				end
			end
			if pbRoughStat(currentmon,PBStats::SPEED,skill) > pbRoughStat(opponent2,PBStats::SPEED,skill)
				maxdam = 0
				for i in currentmon.moves
					if opponent2.hp>0
						tempdam = (pbRoughDamage(i,opponent2,currentmon,skill,i.basedamage)*100/opponent2.hp)
					else
						tempdam=0
					end        
					if tempdam > maxdam
						maxdam = tempdam
					end
				end
				if maxdam > 100 
					noswitchscore+=130
				end
			end 
			maxdam = 0
			for i in currentmon.moves
				next if i.priority < 1
				if opponent1.hp>0
					tempdam = (pbRoughDamage(i,opponent1,currentmon,skill,i.basedamage)*100/opponent1.hp)
				else
					tempdam=0
				end      
				if tempdam > maxdam
					maxdam = tempdam
				end
			end
			if maxdam > 100 
				noswitchscore+=130
			end 
			maxdam = 0
			for i in currentmon.moves
				next if i.priority < 1
				if opponent2.hp>0
					tempdam = (pbRoughDamage(i,opponent2,currentmon,skill,i.basedamage)*100/opponent2.hp)
				else
					tempdam=0
				end      
				if tempdam > maxdam
					maxdam = tempdam
				end
			end
			if maxdam > 100 
				noswitchscore+=130
			end 
		end
		finalcrit = 0
		for i in currentmon.moves
			critrate1 = pbAICritRate(currentmon,opponent1,i)
			critrate2 = pbAICritRate(currentmon,opponent2,i)
			maxcrit = [critrate1,critrate2].max
			if finalcrit < maxcrit
				finalcrit = maxcrit
			end
		end
		if finalcrit == 1
			noswitchscore += 25
		elsif finalcrit == 2
			noswitchscore += 50
		elsif finalcrit == 3
			noswitchscore += 100
		end  
		if currentmon.status==PBStatuses::SLEEP && currentmon.statusCount<3
			noswitchscore+=100
		end
		monturn = (100 - (currentmon.turncount*25))
		if currentroles.include?("Lead")
			monturn /= 2
		end
		if monturn > 0
			noswitchscore+=monturn
		end
		PBDebug.log(sprintf("%s: initial noswitchscore: %d",PBSpecies.getName(@battlers[index].species),noswitchscore)) if $INTERNAL
		PBDebug.log(sprintf(" ")) if $INTERNAL
		PBDebug.log(sprintf("{")) if $INTERNAL
		PBDebug.log(sprintf(" ")) if $INTERNAL
		finalscore = switchscore - noswitchscore
		if skill<PBTrainerAI.highSkill
			finalscore/=2.0
		end
		if skill<PBTrainerAI.mediumSkill
			finalscore-=100
		end  
		highscore = 0 
		movecount = -1
		for i in currentmon.moves   
			movecount+=1
			next if i.id==0
			next if !pbCanChooseMove?(index,movecount,false)
			if @doublebattle 
				dmgValue1 = pbRoughDamage(i,currentmon,opponent1,skill,i.basedamage)
				if i.basedamage!=0
					if opponent1.hp==0
						dmgPercent1=0
					else              
						dmgPercent1 = (dmgValue1*100)/(opponent1.hp)
						dmgPercent1 = 110 if dmgPercent1 > 110
					end
				else
					dmgPercent1 = pbStatusDamage(i)
				end   
				dmgValue2 = pbRoughDamage(i,currentmon,opponent2,skill,i.basedamage)
				if i.basedamage!=0
					if opponent2.hp==0
						dmgPercent2=0
					else 
						dmgPercent2 = (dmgValue2*100)/(opponent2.hp)
						dmgPercent2 = 110 if dmgPercent2 > 110
					end          
				else
					dmgPercent2 = pbStatusDamage(i)
				end  
				if opponent1.hp!=0 && opponent2.hp!=0
					tempscore = [pbGetMoveScore(i,currentmon,opponent1,skill,dmgPercent1), pbGetMoveScore(i,currentmon,opponent2,skill,dmgPercent2)].max
				elsif opponent1.hp!=0
					tempscore = pbGetMoveScore(i,currentmon,opponent1,skill,dmgPercent1)
				elsif opponent2.hp!=0
					tempscore = pbGetMoveScore(i,currentmon,opponent2,skill,dmgPercent2)
				end                  
			else
				dmgValue = pbRoughDamage(i,currentmon,opponent1,skill,i.basedamage)
				if i.basedamage!=0
					dmgPercent = (dmgValue*100)/(opponent1.hp)
					dmgPercent = 110 if dmgPercent > 110
				else
					dmgPercent = pbStatusDamage(i)
				end 
				tempscore = pbGetMoveScore(i,currentmon,opponent1,skill,dmgPercent)
			end      
			if tempscore > highscore
				highscore = tempscore
			end
		end
		PBDebug.log(sprintf("}")) if $INTERNAL
		PBDebug.log(sprintf(" ")) if $INTERNAL
		PBDebug.log(sprintf("%s: highest move score: %d",PBSpecies.getName(@battlers[index].species),highscore)) if $INTERNAL
		PBDebug.log(sprintf("%s: final switching score: %d",PBSpecies.getName(@battlers[index].species),finalscore)) if $INTERNAL
		if finalscore > highscore
			PBDebug.log(sprintf("%s < %d, will switch",highscore,finalscore)) if $INTERNAL
			PBDebug.log(sprintf(" ")) if $INTERNAL
			willswitch = true
		else
			PBDebug.log(sprintf("%s > %d, will not switch",highscore,finalscore)) if $INTERNAL
			PBDebug.log(sprintf(" ")) if $INTERNAL
			willswitch = false
		end 
		if currentmon.hasWorkingItem(:CUSTAPBERRY) && (currentmon.hp/currentmon.totalhp)<=0.25
			willswitch=false
		end		
		if currentmon.species==PBSpecies::HARPTERA  && 	
			((opponent1.species==PBSpecies::INFLAGETAH && pbRoughStat(currentmon,PBStats::SPEED,skill) < pbRoughStat(opponent1,PBStats::SPEED,skill)) || 
				(opponent2.species==PBSpecies::INFLAGETAH && pbRoughStat(currentmon,PBStats::SPEED,skill) < pbRoughStat(opponent2,PBStats::SPEED,skill)))
			#switchscore+=1000
			willswitch = true
			$noarchinfla=true
		end					
		if willswitch
			memmons = monarray.length
			if memmons>0
				counts = Hash.new(0)
				monarray.each do |mon|
					counts[mon] += 1
				end
				storedswitch = -1
				storednumber = -1
				tievar = false
				for i in counts.keys
					if counts[i] > storednumber
						storedswitch = i
						storednumber = counts[i]
						tievar = true
					elsif counts[i] == storednumber
						tievar=true
					end          
				end
				if !tievar
					PBDebug.log(sprintf("Switching to %s",PBSpecies.getName(pbParty(currentmon)[storedswitch].species))) if $INTERNAL
					return pbRegisterSwitch(currentmon.index,storedswitch)
				else                    
					wallvar = false
					monindex = -1
					for i in counts.keys
						temparr = pbGetMonRole(party[i],opponent1,skill,count,party)            
						if temparr.include?("Physical Wall") || temparr.include?("Special Wall")
							wallvar = true
							monindex = i
						end 
					end
					if wallvar
						return pbRegisterSwitch(currentmon.index,monindex)
					else
						maxhpvar = -1
						chosenmon = -1
						for i in counts.keys
							temphp = party[i].hp
							if temphp > maxhpvar
								maxhpvar = temphp
								chosenmon = i
							end
						end
						return pbRegisterSwitch(currentmon.index,chosenmon)
					end         
				end
			else
				switchindex = pbSwitchTo(currentmon,party,skill)
				if switchindex==-1
					return false
				end        
				return pbRegisterSwitch(currentmon.index,switchindex)
			end
		else
			return false
		end
	end
	
	def pbSwitchTo(currentmon,party,skill)
		skill=0 if $game_switches[318] && currentmon==@battlers[2]
		#print true if $game_switches[318] && currentmon==@battlers[2]
		opponent1 = currentmon.pbOppositeOpposing
		opponent2 = opponent1.pbPartner
		opp1roles = pbGetMonRole(opponent1,currentmon,skill)
		opp2roles = pbGetMonRole(opponent2,currentmon,skill)
		if skill<PBTrainerAI.mediumSkill
			loop do
				@ranvar = rand(party.length)
				break if ((@ranvar != currentmon.pokemonIndex) && pbCanSwitchLax?(currentmon.index,@ranvar,false))
			end      
			return @ranvar
		end
		scorearray = []
		supercount=-1
		for i in party            
			supercount+=1
			if i.nil?
				scorearray.push(-10000000)
				next
			end      
			PBDebug.log(sprintf("Scoring for %s switching to: %s",PBSpecies.getName(currentmon.species),PBSpecies.getName(i.species))) if $INTERNAL
			if !pbCanSwitchLax?(currentmon.index,supercount,false)
				scorearray.push(-10000000)
				PBDebug.log(sprintf("Score: -10000000")) if $INTERNAL
				PBDebug.log(sprintf(" ")) if $INTERNAL
				next
			end   
			# print pbCanSwitchLax?(currentmon.index,supercount,false)
			theseRoles = pbGetMonRole(i,opponent1,skill,supercount,party) 
			if theseRoles.include?("Physical Wall") || theseRoles.include?("Special Wall")
				wallvar = true
			else
				wallvar = false
			end
			monscore = 0
			#Don't switch to already inplay mon
			if currentmon.pokemonIndex == scorearray.length
				scorearray.push(-10000000)
				PBDebug.log(sprintf("Score: -10000000")) if $INTERNAL
				PBDebug.log(sprintf(" ")) if $INTERNAL
				next
			end   
			if i.hp <= 0
				scorearray.push(-10000000)
				PBDebug.log(sprintf("Score: -10000000")) if $INTERNAL
				PBDebug.log(sprintf(" ")) if $INTERNAL
				next
			end   
			sedamagevar = 0
			#Defensive
			if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0
				for j in @aiMoveMemory[2][opponent1.pokemonIndex]      
					totalmod = j.pbTypeModifierAINonBattler(j.type,opponent1,i)
					if totalmod > 4
						sedamagevar = j.basedamage if j.basedamage>sedamagevar
						if totalmod >= 16
							sedamagevar*=2
						end
						if j.type == opponent1.type1 || j.type == opponent1.type2 || j.type == opponent1.type3
							sedamagevar*=1.5
						end
					end          
				end  
				monscore-=(sedamagevar-50)
			elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0
				for j in @aiMoveMemory[1]       
					totalmod = j.pbTypeModifierAINonBattler(j.type,opponent1,i)
					if totalmod > 4
						sedamagevar = j.basedamage if j.basedamage>sedamagevar
						if totalmod >= 16
							sedamagevar*=2
						end
						if j.type == opponent1.type1 || j.type == opponent1.type2 || j.type == opponent1.type3
							sedamagevar*=1.5
						end
					end          
				end  
				monscore-=sedamagevar
			elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0
				for j in @aiMoveMemory[0]       
					totalmod = j.pbTypeModifierAINonBattler(j.type,opponent1,i)
					if totalmod > 4
						sedamagevar = j.basedamage if j.basedamage>sedamagevar
						if totalmod >= 16
							sedamagevar*=2
						end
					end 
				end  
				monscore-=sedamagevar  
			end
			immunevar = 0
			resistvar = 0
			bestresist = false
			bestimmune = false
			if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2].length!=0
				count = 0
				movedamages = []
				bestmoveindex = -1
				for j in @aiMoveMemory[2][opponent1.pokemonIndex]      
					movedamages.push(j.basedamage)
				end   
				if movedamages.length > 0
					bestmoveindex = movedamages.index(movedamages.max)
				end        
				for j in @aiMoveMemory[2][opponent1.pokemonIndex]          
					totalmod = j.pbTypeModifierAINonBattler(j.type,opponent1,i)
					if bestmoveindex > -1
						if count == bestmoveindex
							if totalmod == 0
								bestimmune = true
							elsif totalmod == 1 || totalmod == 2
								bestresist = true
							end              
						end
					end           
					if totalmod == 0
						immunevar+=1
					elsif totalmod == 1 || totalmod == 2
						resistvar+=1
					end          
					count+=1
				end  
				if immunevar == 4
					if wallvar
						monscore+=150
					else
						monscore+=100
					end
				end
				if immunevar+resistvar == 4 && immunevar!=4
					if wallvar
						monscore+=150
					else
						monscore+=100
					end
				elsif bestresist 
					if wallvar
						monscore+=45
					else
						monscore+=30
					end 
				end
			elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0
				count = 0
				movedamages = []
				bestmoveindex = -1
				for j in @aiMoveMemory[1]
					movedamages.push(j.basedamage)
				end   
				if movedamages.length > 0
					bestmoveindex = movedamages.index(movedamages.max)
				end        
				for j in @aiMoveMemory[1]
					totalmod = j.pbTypeModifierAINonBattler(j.type,opponent1,i)
					if bestmoveindex > -1
						if count == bestmoveindex
							if totalmod == 0
								bestimmune = true
							elsif totalmod == 1 || totalmod == 2
								bestresist = true
							end              
						end
					end           
					if totalmod == 0
						immunevar+=1
					elsif totalmod == 1 || totalmod == 2
						resistvar+=1
					end          
					count+=1
				end  
				if immunevar == 4
					if wallvar
						monscore+=300
					else
						monscore+=200
					end
				elsif bestimmune
					if wallvar
						monscore+=90
					else
						monscore+=60
					end          
				end
				if immunevar+resistvar == 4 && immunevar!=4
					if wallvar
						monscore+=150
					else
						monscore+=100
					end
				elsif bestresist
					if wallvar
						monscore+=45
					else
						monscore+=30
					end          
				end      
			elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0
				for j in @aiMoveMemory[0]
					totalmod = j.pbTypeModifierAINonBattler(j.type,opponent1,i)         
					if totalmod == 0
						bestimmune=true
					elsif totalmod == 1 || totalmod == 2
						bestresist=true
					end          
				end  
				if bestimmune
					if wallvar
						monscore+=90
					else
						monscore+=60
					end          
				end
				if bestresist
					if wallvar
						monscore+=45
					else
						monscore+=30
					end          
				end       
			end  
			otype11 = opponent1.type1
			otype12 = opponent1.type2
			otype13 = opponent1.type3			
			otype21 = opponent2.type1
			otype22 = opponent2.type2
			otype23 = opponent2.type3			
			atype1 = i.type1
			atype2 = i.type2
			atype3 = i.type3			
			stabresist11a = PBTypes.getEffectiveness(otype11,atype1)			
			if atype1!=atype2
				stabresist11b = PBTypes.getEffectiveness(otype11,atype2) 
			else
				stabresist11b = 2
			end				
			stabresist12a = PBTypes.getEffectiveness(otype12,atype1)
			if atype1!=atype2
				stabresist12b = PBTypes.getEffectiveness(otype12,atype2) 
			else
				stabresist12b = 2
			end
			stabresist13a = PBTypes.getEffectiveness(otype13,atype1)			 
			if (atype3!=nil || atype3!=atype2 || atype3!=atype1)
				stabresist13b = PBTypes.getEffectiveness(otype13,atype3)
			else
				stabresist13b = 2
			end	     
			stabresist21a = PBTypes.getEffectiveness(otype21,atype1)
			if atype1!=atype2
				stabresist21b = PBTypes.getEffectiveness(otype21,atype2) 
			else
				stabresist21b = 2
			end  
			stabresist22a = PBTypes.getEffectiveness(otype22,atype1)
			if atype1!=atype2
				stabresist22b = PBTypes.getEffectiveness(otype22,atype2) 
			else
				stabresist22b = 2
			end  
			stabresist23a = PBTypes.getEffectiveness(otype23,atype1)			 
			if (atype3!=nil && atype3!=atype2 && atype3!=atype1)
				stabresist23b = PBTypes.getEffectiveness(otype23,atype3)
			else
				stabresist23b = 2
			end				
			if stabresist11a*stabresist11b<4 || stabresist12a*stabresist12b<4 || stabresist13a*stabresist13b<4
				monscore+=40
				if otype11==otype12
					monscore+=30
				else
					if (stabresist11a*stabresist11b<4 && stabresist12a*stabresist12b<4) || (stabresist11a*stabresist11b<4 && stabresist13a*stabresist13b<4) || (stabresist13a*stabresist13b<4 && stabresist12a*stabresist12b<4)
						monscore+=60
					end
				end
			end
			if stabresist21a*stabresist21b<4 || stabresist22a*stabresist22b<4 || stabresist23a*stabresist23b<4
				monscore+=40
				if otype21==otype22
					monscore+=30
				else
					if (stabresist21a*stabresist21b<4 && stabresist22a*stabresist22b<4) || (stabresist21a*stabresist21b<4 && stabresist23a*stabresist23b<4) || (stabresist23a*stabresist23b<4 && stabresist22a*stabresist22b<4)
						monscore+=60
					end
				end
			end
			PBDebug.log(sprintf("Defensive: %d",monscore)) if $INTERNAL
			#Offensive
			maxbasedam = -1
			bestmove = -1
			for k in i.moves
				j = PokeBattle_Move.new(self,k)
				basedam = j.basedamage
				if (j.pbTypeModifierAINonBattler(j.type,i,opponent1)>4) || ((j.pbTypeModifierAINonBattler(j.type,i,opponent2)>4) && opponent2.totalhp !=0)
					basedam*=2
					if (j.pbTypeModifierAINonBattler(j.type,i,opponent1)==16) || ((j.pbTypeModifierAINonBattler(j.type,i,opponent2)==16) && opponent2.totalhp !=0)
						basedam*=2
					end
				end
				if (j.pbTypeModifierAINonBattler(j.type,i,opponent1)<4) || ((j.pbTypeModifierAINonBattler(j.type,i,opponent2)<4) && opponent2.totalhp !=0)
					basedam/=2.0 
					if (j.pbTypeModifierAINonBattler(j.type,i,opponent1)==1) || ((j.pbTypeModifierAINonBattler(j.type,i,opponent2)==1) && opponent2.totalhp !=0)
						basedam/=2.0
					end    
				end    
				if (j.pbTypeModifierAINonBattler(j.type,i,opponent1)==0) || ((j.pbTypeModifierAINonBattler(j.type,i,opponent2)==0) && opponent2.totalhp !=0)
					basedam=0
				end
				if (j.pbTypeModifierAINonBattler(j.type,i,opponent1)<=4 && opponent1.hasWorkingAbility(:WONDERGUARD)) || ((j.pbTypeModifierAINonBattler(j.type,i,opponent2)<=4 && opponent2.hasWorkingAbility(:WONDERGUARD)) && opponent2.totalhp !=0)
					basedam=0
				end 
				if ((opponent1.hasWorkingAbility(:STORMDRAIN) || opponent2.hasWorkingAbility(:STORMDRAIN) ||
							opponent1.hasWorkingAbility(:WATERABSORB) || opponent2.hasWorkingAbility(:WATERABSORB) ||
							opponent1.hasWorkingAbility(:DRYSKIN) || opponent2.hasWorkingAbility(:DRYSKIN)) && 
						isConst?(j.type,PBTypes,:WATER)) ||
					((opponent1.hasWorkingAbility(:VOLTABSORB) || opponent2.hasWorkingAbility(:VOLTABSORB) ||
							opponent1.hasWorkingAbility(:MOTORDRIVE) || opponent2.hasWorkingAbility(:MOTORDRIVE)) && 
						isConst?(j.type,PBTypes,:ELECTIC)) ||
					((opponent1.hasWorkingAbility(:FLASHFIRE) || opponent2.hasWorkingAbility(:FLASHFIRE)) && !isConst?(j.id,PBMoves,:INFERNALBLADE) && 
						isConst?(j.type,PBTypes,:FIRE)) ||
					((opponent1.hasWorkingAbility(:SAPSIPPER) || opponent2.hasWorkingAbility(:SAPSIPPER)) && 
						isConst?(j.type,PBTypes,:GRASS))
					basedam=0
				end   
				if j.pbIsPhysical?(j.type) && i.status==PBStatuses::BURN
					basedam/=2.0
				end
				if skill>=PBTrainerAI.highSkill
					if i.hasType?(j.type)
						basedam*=1.5
					end
				end
				if j.accuracy!=0
					basedam*=(j.accuracy/100.0)
				end
				if basedam>maxbasedam
					maxbasedam = basedam 
					bestmove = j
				end
			end
			if bestmove!=-1
				if bestmove.priority>0
					maxbasedam*=1.5
				end
			end
			if i.speed<pbRoughStat(opponent1,PBStats::SPEED,skill) || i.speed<pbRoughStat(opponent2,PBStats::SPEED,skill)
				maxbasedam*=0.75
			else
				maxbasedam*=1.25
			end
			if maxbasedam==0
				monscore-=80
			else
				monscore+=maxbasedam
				ministat=0
				if i.attack > i.spatk
					ministat = [(opponent1.stages[PBStats::SPDEF] - opponent1.stages[PBStats::DEFENSE]),(opponent2.stages[PBStats::SPDEF] - opponent2.stages[PBStats::DEFENSE])].max
				else
					ministat = [(opponent1.stages[PBStats::DEFENSE] - opponent1.stages[PBStats::SPDEF]),(opponent1.stages[PBStats::DEFENSE] - opponent1.stages[PBStats::SPDEF])].max
				end
				ministat*=20
				monscore+=ministat
			end              
			PBDebug.log(sprintf("Offensive: %d",monscore)) if $INTERNAL
			#Roles
			if skill>=PBTrainerAI.highSkill
				if theseRoles.include?("Sweeper")
					if party.length<4
						monscore+=80
					else
						monscore-=50
					end
					if i.attack >= i.spatk
						if (opponent1.defense<opponent1.spdef) || (opponent2.defense<opponent2.spdef)
							monscore+=30
						end
					end
					if i.spatk >= i.attack
						if (opponent1.spdef<opponent1.defense) || (opponent2.spdef<opponent2.defense)
							monscore+=30
						end
					end  
					monscore+= (-10)*opponent1.stages[PBStats::ATTACK] if opponent1.stages[PBStats::ATTACK]<0
					monscore+= (-10)*opponent2.stages[PBStats::ATTACK] if opponent2.stages[PBStats::ATTACK]<0
					monscore+= (-10)*opponent1.stages[PBStats::DEFENSE] if opponent1.stages[PBStats::DEFENSE]<0
					monscore+= (-10)*opponent2.stages[PBStats::DEFENSE] if opponent2.stages[PBStats::DEFENSE]<0
					monscore+= (-10)*opponent1.stages[PBStats::SPATK] if opponent1.stages[PBStats::SPATK]<0
					monscore+= (-10)*opponent2.stages[PBStats::SPATK] if opponent2.stages[PBStats::SPATK]<0
					monscore+= (-10)*opponent1.stages[PBStats::SPDEF] if opponent1.stages[PBStats::SPDEF]<0
					monscore+= (-10)*opponent2.stages[PBStats::SPDEF] if opponent2.stages[PBStats::SPDEF]<0
					monscore+= (-10)*opponent1.stages[PBStats::SPEED] if opponent1.stages[PBStats::SPEED]<0
					monscore+= (-10)*opponent2.stages[PBStats::SPEED] if opponent2.stages[PBStats::SPEED]<0
					monscore+= (-10)*opponent1.stages[PBStats::ACCURACY] if opponent1.stages[PBStats::ACCURACY]<0
					monscore+= (-10)*opponent2.stages[PBStats::ACCURACY] if opponent2.stages[PBStats::ACCURACY]<0
					if ((i.speed > opponent1.pbSpeed) ^ (@trickroom!=0))
						monscore*=1.3
					else
						monscore*=0.7
					end
					if opponent1.status==PBStatuses::SLEEP || opponent1.status==PBStatuses::FROZEN
						monscore+=50
					end
				end
				if wallvar
					if theseRoles.include?("Physical Wall") && (opponent1.spatk>opponent1.attack || opponent2.spatk>opponent2.attack)
						monscore+=30
					end
					if theseRoles.include?("Special Wall") && (opponent1.spatk<opponent1.attack || opponent2.spatk<opponent2.attack)
						monscore+=30
					end          
					if opponent1.status==PBStatuses::BURN || opponent1.status==PBStatuses::POISON || opponent1.effects[PBEffects::LeechSeed]>0
						monscore+=30
					end
					if opponent2.status==PBStatuses::BURN || opponent2.status==PBStatuses::POISON || opponent2.effects[PBEffects::LeechSeed]>0
						monscore+=30
					end      
				end
				if theseRoles.include?("Tank")
					if opponent1.status==PBStatuses::PARALYSIS || opponent1.effects[PBEffects::LeechSeed]>0          
						monscore+=40
					end
					if opponent2.status==PBStatuses::PARALYSIS || opponent2.effects[PBEffects::LeechSeed]>0          
						monscore+=40
					end  
					if currentmon.pbOwnSide.effects[PBEffects::Tailwind]>0
						monscore+=30
					end          
				end
				if theseRoles.include?("Lead")        
					monscore+=40
				end        
				if theseRoles.include?("Cleric")        
					partystatus = false
					partymidhp = false
					for k in party
						next if k.nil?
						next if k==i
						if k.status!=0
							partystatus=true
						end
						if 0.3<(k.hp/k.totalhp) && (k.hp/k.totalhp)<0.6
							partymidhp = true
						end            
					end
					if partystatus
						monscore+=50
					end
					if partymidhp
						monscore+=50
					end          
				end   
				if theseRoles.include?("Screener")        
					monscore+=60
				end   
				if theseRoles.include?("Revenge Killer")
					if opponent2.totalhp!=0 && opponent1.totalhp!=0
						if (opponent1.hp/opponent1.totalhp)<0.3 || (opponent2.hp/opponent2.totalhp)<0.3
							monscore+=100
						end     
					elsif opponent1.totalhp!=0
						if (opponent1.hp/opponent1.totalhp)<0.3
							monscore+=100
						end    
					elsif opponent2.totalhp!=0
						if (opponent2.hp/opponent2.totalhp)<0.3
							monscore+=100
						end 
					end          
				end  
				if theseRoles.include?("Spinner")        
					if !opponent1.pbHasType?(:GHOST) && (opponent2.hp==0 || !opponent2.pbHasType?(:GHOST))
						monscore+=20*currentmon.pbOwnSide.effects[PBEffects::Spikes]
						monscore+=20*currentmon.pbOwnSide.effects[PBEffects::ToxicSpikes]
						monscore+=30 if currentmon.pbOwnSide.effects[PBEffects::StickyWeb]
						monscore+=30 if currentmon.pbOwnSide.effects[PBEffects::StealthRock]
					end          
				end
				if theseRoles.include?("Pivot")        
					monscore+=40
				end   
				if theseRoles.include?("Baton Passer")        
					monscore+=50
				end  
				if theseRoles.include?("Stallbreaker")    
					healer = false
					if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
						for j in @aiMoveMemory[2][opponent1.pokemonIndex]
							healer=true if j.isHealingMove?
						end
					elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0
						for j in @aiMoveMemory[1]
							healer=true if j.isHealingMove?
						end 
					elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0
						for j in @aiMoveMemory[0]
							healer=true if j.isHealingMove?
						end             
					end
					if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
						for j in @aiMoveMemory[2][opponent2.pokemonIndex]
							healer=true if j.isHealingMove?
						end          
					end
					monscore+=80 if healer
				end  
				if theseRoles.include?("Stallbreaker")    
					healer = false
					if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
						for j in @aiMoveMemory[2][opponent1.pokemonIndex]
							healer=true if j.isHealingMove?
						end
					elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0
						for j in @aiMoveMemory[1]
							healer=true if j.isHealingMove?
						end 
					elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0
						for j in @aiMoveMemory[0]
							healer=true if j.isHealingMove?
						end             
					end
					if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
						for j in @aiMoveMemory[2][opponent2.pokemonIndex]
							healer=true if j.isHealingMove?
						end          
					end
					monscore+=80 if healer
				end         
				if theseRoles.include?("Status Absorber")    
					statusmove = false
					if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
						for j in @aiMoveMemory[2][opponent1.pokemonIndex]
							statusmove=true if (j.id==getID(PBMoves,:THUNDERWAVE) || 
								j.id==getID(PBMoves,:TOXIC) || j.id==getID(PBMoves,:SPORE) || 
								j.id==getID(PBMoves,:SING) || j.id==getID(PBMoves,:POISONPOWDER) || 
								j.id==getID(PBMoves,:STUNSPORE) || j.id==getID(PBMoves,:SLEEPPOWDER) || 
								j.id==getID(PBMoves,:NUZZLE) || j.id==getID(PBMoves,:WILLOWISP) || 
								j.id==getID(PBMoves,:HYPNOSIS) || j.id==getID(PBMoves,:GLARE) || 
								j.id==getID(PBMoves,:DARKVOID) || j.id==getID(PBMoves,:GRASSWHISTLE) || 
								j.id==getID(PBMoves,:LOVELYKISS) || j.id==getID(PBMoves,:POISONGAS) || 
								j.id==getID(PBMoves,:NUCLEARWASTE))
						end
					elsif skill>=PBTrainerAI.highSkill && @aiMoveMemory[1].length!=0
						for j in @aiMoveMemory[1]
							statusmove=true if (j.id==getID(PBMoves,:THUNDERWAVE) || 
								j.id==getID(PBMoves,:TOXIC) || j.id==getID(PBMoves,:SPORE) || 
								j.id==getID(PBMoves,:SING) || j.id==getID(PBMoves,:POISONPOWDER) || 
								j.id==getID(PBMoves,:STUNSPORE) || j.id==getID(PBMoves,:SLEEPPOWDER) || 
								j.id==getID(PBMoves,:NUZZLE) || j.id==getID(PBMoves,:WILLOWISP) || 
								j.id==getID(PBMoves,:HYPNOSIS) || j.id==getID(PBMoves,:GLARE) || 
								j.id==getID(PBMoves,:DARKVOID) || j.id==getID(PBMoves,:GRASSWHISTLE) || 
								j.id==getID(PBMoves,:LOVELYKISS) || j.id==getID(PBMoves,:POISONGAS) || 
								j.id==getID(PBMoves,:NUCLEARWASTE))
						end 
					elsif skill>=PBTrainerAI.mediumSkill && @aiMoveMemory[0].length!=0
						for j in @aiMoveMemory[0]
							statusmove=true if (j.id==getID(PBMoves,:THUNDERWAVE) || 
								j.id==getID(PBMoves,:TOXIC) || j.id==getID(PBMoves,:SPORE) || 
								j.id==getID(PBMoves,:SING) || j.id==getID(PBMoves,:POISONPOWDER) || 
								j.id==getID(PBMoves,:STUNSPORE) || j.id==getID(PBMoves,:SLEEPPOWDER) || 
								j.id==getID(PBMoves,:NUZZLE) || j.id==getID(PBMoves,:WILLOWISP) || 
								j.id==getID(PBMoves,:HYPNOSIS) || j.id==getID(PBMoves,:GLARE) || 
								j.id==getID(PBMoves,:DARKVOID) || j.id==getID(PBMoves,:GRASSWHISTLE) || 
								j.id==getID(PBMoves,:LOVELYKISS) || j.id==getID(PBMoves,:POISONGAS) || 
								j.id==getID(PBMoves,:NUCLEARWASTE))
						end             
					end
					if skill>=PBTrainerAI.bestSkill && @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
						for j in @aiMoveMemory[2][opponent2.pokemonIndex]
							statusmove=true if (j.id==getID(PBMoves,:THUNDERWAVE) || 
								j.id==getID(PBMoves,:TOXIC) || j.id==getID(PBMoves,:SPORE) || 
								j.id==getID(PBMoves,:SING) || j.id==getID(PBMoves,:POISONPOWDER) || 
								j.id==getID(PBMoves,:STUNSPORE) || j.id==getID(PBMoves,:SLEEPPOWDER) || 
								j.id==getID(PBMoves,:NUZZLE) || j.id==getID(PBMoves,:WILLOWISP) || 
								j.id==getID(PBMoves,:HYPNOSIS) || j.id==getID(PBMoves,:GLARE) || 
								j.id==getID(PBMoves,:DARKVOID) || j.id==getID(PBMoves,:GRASSWHISTLE) || 
								j.id==getID(PBMoves,:LOVELYKISS) || j.id==getID(PBMoves,:POISONGAS) || 
								j.id==getID(PBMoves,:NUCLEARWASTE))
						end          
					end
					monscore+=70 if statusmove
				end   
				if theseRoles.include?("Trapper")
					if ((i.speed>opponent1.pbSpeed) ^ (@trickroom!=0))
						if opponent1.hp/opponent1.totalhp<0.6
							monscore+=100
						end
					end          
				end    
				if theseRoles.include?("Weather Setter")
					if (isConst?(i.ability,PBAbilities,:DROUGHT) || i.knowsMove?(:SUNNYDAY) ||
							(isConst?(i.species,PBSpecies,:ARCHILLES) && i.item == PBItems::ARCHILLESITE)) && !i.hasType?(:NUCLEAR)  # && (@battlers[1].isFainted? || @battlers[3].isFainted?)			 			
						if @weather!=PBWeather::SUNNYDAY
							monscore+=60
						end	
						if @weather==PBWeather::RAINDANCE
							monscore+=60
							if  theseRoles.include?("Ace") || theseRoles.include?("Second")
								monscore*=10
							end	
						end
						if !(@battlers[1].isFainted? || @battlers[3].isFainted?)
							monscore*=0.1
						end	
					elsif (isConst?(i.ability,PBAbilities,:DRIZZLE) || i.knowsMove?(:RAINDANCE) ||
							(isConst?(i.species,PBSpecies,:ELECTRUXO) && i.item == PBItems::ELECTRUXOLITE && (@battlers[1].isFainted? || @battlers[3].isFainted?))) && !i.hasType?(:NUCLEAR)
						if @weather!=PBWeather::RAINDANCE
							monscore+=60
						elsif @weather==PBWeather::SUNNYDAY
							monscore+=60
							if  theseRoles.include?("Ace") || theseRoles.include?("Second")
								monscore*=10
							end														
						end
					elsif isConst?(i.ability,PBAbilities,:SANDSTREAM) || i.knowsMove?(:SANDSTORM)
						if @weather!=PBWeather::SANDSTORM
							monscore+=60
						end 
					elsif isConst?(i.ability,PBAbilities,:SNOWWARNING) || i.knowsMove?(:HAIL)
						if @weather!=PBWeather::HAIL
							monscore+=60
						end
					elsif isConst?(i.ability,PBAbilities,:PRIMORDIALSEA) || isConst?(i.ability,PBAbilities,:DESOLATELAND) || isConst?(i.ability,PBAbilities,:DELTASTREAM)
						monscore+=60
					elsif (isConst?(i.ability,PBAbilities,:STORMBRINGER) || i.knowsMove?(:THUNDERSTORM)) && !i.hasType?(:NUCLEAR)
						if @weather!=PBWeather::THUNDERSTORM
							monscore+=60
						end
					elsif isConst?(i.ability,PBAbilities,:CHERNOBYL) || i.knowsMove?(:FALLOUT)
						if @weather!=PBWeather::FALLOUT
							monscore+=60
						end
					end
				end      
				#  if theseRoles.include?("Second")        
				#     monscore-=40
				#    end 
			end   
			PBDebug.log(sprintf("Roles: %d",monscore)) if $INTERNAL
			# Weather
			case @weather
			when PBWeather::HAIL
				monscore+=25 if isConst?(i.ability,PBAbilities,:MAGICGUARD) || isConst?(i.ability,PBAbilities,:OVERCOAT) || i.hasType?(:ICE)
				monscore+=50 if isConst?(i.ability,PBAbilities,:SNOWCLOAK) || isConst?(i.ability,PBAbilities,:ICEBODY)
				monscore+=80 if isConst?(i.ability,PBAbilities,:SLUSHRUSH)
			when PBWeather::RAINDANCE
				monscore+=50 if isConst?(i.ability,PBAbilities,:DRYSKIN) || isConst?(i.ability,PBAbilities,:HYDRATION) || isConst?(i.ability,PBAbilities,:RAINDISH)
				monscore+=80 if isConst?(i.ability,PBAbilities,:SWIFTSWIM)
			when PBWeather::SUNNYDAY
				monscore-=40 if isConst?(i.ability,PBAbilities,:DRYSKIN)
				monscore+=50 if isConst?(i.ability,PBAbilities,:SOLARPOWER)
				monscore+=80 if isConst?(i.ability,PBAbilities,:CHLOROPHYLL) 
			when PBWeather::SANDSTORM
				monscore+=25 if isConst?(i.ability,PBAbilities,:MAGICGUARD) || isConst?(i.ability,PBAbilities,:OVERCOAT) || i.hasType?(:ROCK) || i.hasType?(:GROUND) || i.hasType?(:STEEL)
				monscore+=50 if isConst?(i.ability,PBAbilities,:SANDVEIL) || isConst?(i.ability,PBAbilities,:SANDFORCE) || (isConst?(i.species,PBSpecies,:DRILGANN) && i.item == PBItems::DRILGANNITE)
				monscore+=80 if isConst?(i.ability,PBAbilities,:SANDRUSH) 
			when PBWeather::THUNDERSTORM
				monscore+=25 if isConst?(i.ability,PBAbilities,:MAGICGUARD) || isConst?(i.ability,PBAbilities,:OVERCOAT) || i.hasType?(:ELECTRIC) || i.hasType?(:GROUND) 
			when PBWeather::FALLOUT
				monscore+=25 if isConst?(i.ability,PBAbilities,:MAGICGUARD) || isConst?(i.ability,PBAbilities,:OVERCOAT)  
				monscore+=80 if i.hasType?(:NUCLEAR) && !isConst?(i.species,PBSpecies,:ARCHILLES)        
			end  
			if @trickroom>0
				if i.speed<opponent1.pbSpeed
					monscore+=30
				else
					monscore-=30
				end
				if i.speed<opponent2.pbSpeed
					monscore+=30
				else
					monscore-=30
				end   
			end
			PBDebug.log(sprintf("Weather: %d",monscore)) if $INTERNAL
			#Moves 
			if skill>=PBTrainerAI.highSkill
				if currentmon.pbOwnSide.effects[PBEffects::ToxicSpikes] && (i.hasType?(:POISON) || i.hasType?(:FLYING))
					monscore+=50
				end
				if i.knowsMove?(:CLEARSMOG) || i.knowsMove?(:HAZE)
					monscore+= (10)*opponent1.stages[PBStats::ATTACK] if opponent1.stages[PBStats::ATTACK]>0
					monscore+= (10)*opponent2.stages[PBStats::ATTACK] if opponent2.stages[PBStats::ATTACK]>0
					monscore+= (10)*opponent1.stages[PBStats::DEFENSE] if opponent1.stages[PBStats::DEFENSE]>0
					monscore+= (10)*opponent2.stages[PBStats::DEFENSE] if opponent2.stages[PBStats::DEFENSE]>0
					monscore+= (10)*opponent1.stages[PBStats::SPATK] if opponent1.stages[PBStats::SPATK]>0
					monscore+= (10)*opponent2.stages[PBStats::SPATK] if opponent2.stages[PBStats::SPATK]>0
					monscore+= (10)*opponent1.stages[PBStats::SPDEF] if opponent1.stages[PBStats::SPDEF]>0
					monscore+= (10)*opponent2.stages[PBStats::SPDEF] if opponent2.stages[PBStats::SPDEF]>0
					monscore+= (10)*opponent1.stages[PBStats::SPEED] if opponent1.stages[PBStats::SPEED]>0
					monscore+= (10)*opponent2.stages[PBStats::SPEED] if opponent2.stages[PBStats::SPEED]>0
					monscore+= (10)*opponent1.stages[PBStats::ACCURACY] if opponent1.stages[PBStats::ACCURACY]>0
					monscore+= (10)*opponent2.stages[PBStats::ACCURACY] if opponent2.stages[PBStats::ACCURACY]>0
					monscore+= (10)*opponent1.stages[PBStats::EVASION] if opponent1.stages[PBStats::EVASION]>0
					monscore+= (10)*opponent2.stages[PBStats::EVASION] if opponent2.stages[PBStats::EVASION]>0
				end
				if i.knowsMove?(:FAKEOUT) || isConst?(i.ability,PBAbilities,:QUICKCHARGE)
					monscore+=25
				end
				if i.knowsMove?(:RETALIATE) && currentmon.pbOwnSide.effects[PBEffects::Retaliate]
					monscore+=30
				end
				#~ if opponent1.totalhp>0
				#~ if i.knowsMove?(:FELLSTINGER) && (((i.speed>opponent1.pbSpeed) ^ (@trickroom!=0)) && opponent1.hp/opponent1.totalhp<0.2)
				#~ monscore+=50
				#~ end
				#~ end        
				#~ if opponent2.totalhp>0
				#~ if i.knowsMove?(:FELLSTINGER) && (((i.speed>opponent2.pbSpeed) ^ (@trickroom!=0))  && opponent2.hp/opponent2.totalhp<0.2)
				#~ monscore+=50
				#~ end
				#~ end  
			end
			PBDebug.log(sprintf("Moves: %d",monscore)) if $INTERNAL
			#Abilities
			if skill>=PBTrainerAI.highSkill
				thereselec=false
				theresgrass=false
				theresmisty=false
				for j in @battlers
					if (isConst?(j.species,PBSpecies,:AMPHAROS) && j.item == PBItems::AMPHAROSITE && j.willmega)
						thereselec=true
					end
				end	
				for j in @battlers
					if (isConst?(j.species,PBSpecies,:WHIMSICOTT) && j.item == PBItems::WHIMSICOTTITE && j.willmega)
						theresgrass=true
					end
				end
				for j in @battlers
					if (isConst?(j.species,PBSpecies,:KIRICORN) && j.item == PBItems::KIRICORNITE && j.willmega)
						theresmisty=true
					end
				end					
				if isConst?(i.ability,PBAbilities,:UNAWARE)
					monscore+= (10)*opponent1.stages[PBStats::ATTACK] if opponent1.stages[PBStats::ATTACK]>0
					monscore+= (10)*opponent2.stages[PBStats::ATTACK] if opponent2.stages[PBStats::ATTACK]>0
					monscore+= (10)*opponent1.stages[PBStats::DEFENSE] if opponent1.stages[PBStats::DEFENSE]>0
					monscore+= (10)*opponent2.stages[PBStats::DEFENSE] if opponent2.stages[PBStats::DEFENSE]>0
					monscore+= (10)*opponent1.stages[PBStats::SPATK] if opponent1.stages[PBStats::SPATK]>0
					monscore+= (10)*opponent2.stages[PBStats::SPATK] if opponent2.stages[PBStats::SPATK]>0
					monscore+= (10)*opponent1.stages[PBStats::SPDEF] if opponent1.stages[PBStats::SPDEF]>0
					monscore+= (10)*opponent2.stages[PBStats::SPDEF] if opponent2.stages[PBStats::SPDEF]>0
					monscore+= (10)*opponent1.stages[PBStats::SPEED] if opponent1.stages[PBStats::SPEED]>0
					monscore+= (10)*opponent2.stages[PBStats::SPEED] if opponent2.stages[PBStats::SPEED]>0
					monscore+= (10)*opponent1.stages[PBStats::ACCURACY] if opponent1.stages[PBStats::ACCURACY]>0
					monscore+= (10)*opponent2.stages[PBStats::ACCURACY] if opponent2.stages[PBStats::ACCURACY]>0
					monscore+= (10)*opponent1.stages[PBStats::EVASION] if opponent1.stages[PBStats::EVASION]>0
					monscore+= (10)*opponent2.stages[PBStats::EVASION] if opponent2.stages[PBStats::EVASION]>0
				end
				if isConst?(i.species,PBSpecies,:HARPTERA)  && 	
					((opponent1.species==PBSpecies::INFLAGETAH) || 
						(opponent2.species==PBSpecies::INFLAGETAH))
					monscore*=0.1
				end	
				if (isConst?(i.ability,PBAbilities,:HEATPROOF) || (isConst?(i.species,PBSpecies,:METALYNX) && i.item == PBItems::METALYNXITE)) && i.form==3
					if ((opponent1.species==PBSpecies::INFLAGETAH && !opponent1.hasWorkingAbility(:MOLDBREAKER)) || 
							(opponent2.species==PBSpecies::INFLAGETAH) && !opponent2.hasWorkingAbility(:MOLDBREAKER))	
						monscore+=800
					elsif	opponent1.pbHasType?(:FIRE) || opponent2.pbHasType?(:FIRE)
						monscore+=800
					end	
				end			
				if (isConst?(i.species,PBSpecies,:ARCHILLES) || isConst?(i.species,PBSpecies,:INFLAGETAH))  && $noarchinfla	
					monscore*=0.1
				end								
				if (isConst?(i.ability,PBAbilities,:DROUGHT) || isConst?(i.ability,PBAbilities,:DESOLATELAND) || 
						(isConst?(i.species,PBSpecies,:ARCHILLES) && i.item == PBItems::ARCHILLESITE))  #&& (@battlers[1].isFainted? || @battlers[3].isFainted?)
					monscore+=40 if opponent1.pbHasType?(:WATER)
					monscore+=40 if opponent2.pbHasType?(:WATER)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							typecheck=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if isConst?(j.type,PBTypes,:WATER)
									typecheck=true
								end
							end
							monscore+=15 if typecheck
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							typecheck=false
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if isConst?(j.type,PBTypes,:WATER)
									typecheck=true
								end
							end
							monscore+=15 if typecheck
						end            
					else
						if @aiMoveMemory[1].length!=0
							typecheck=false
							for j in @aiMoveMemory[1]
								if isConst?(j.type,PBTypes,:WATER)
									typecheck=true
								end
							end
							monscore+=15 if typecheck
						end   
					end
					#~ if (@battlers[1].isFainted? || @battlers[3].isFainted?)
					#~ print true
					#~ monscore*=0.1
					#~ end						
				end   
				if (isConst?(i.species,PBSpecies,:AMPHAROS) && i.item == PBItems::AMPHAROSITE) || (isConst?(i.species,PBSpecies,:KIRICORN) && i.item == PBItems::KIRICORNITE) 
					for j in @battlers
						if (j==@battlers[1] || j==@battlers[3]) && (j.pbHasMove?(getID(PBMoves,:SLEEPPOWDER)) || j.pbHasMove?(getID(PBMoves,:HYPNOSIS)) || j.pbHasMove?(getID(PBMoves,:DARKVOID)) || j.pbHasMove?(getID(PBMoves,:GRASSWHISTLE)) || j.pbHasMove?(getID(PBMoves,:LOVELYKISS)) || j.pbHasMove?(getID(PBMoves,:SING)) || j.pbHasMove?(getID(PBMoves,:SPORE)))
							monscore-=20
						end
					end					
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0          
							slepmove=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]                
								slepmove=true if (j.id==getID(PBMoves,:SPORE) || j.id==getID(PBMoves,:SLEEPPOWDER) || j.id==getID(PBMoves,:HYPNOSIS) || j.id==getID(PBMoves,:DARKVOID) || j.id==getID(PBMoves,:GRASSWHISTLE) || j.id==getID(PBMoves,:LOVELYKISS) || j.id==getID(PBMoves,:SING))
							end    
							monscore+=20 if slepmove
						end
					else
						if @aiMoveMemory[1].length>0          
							slepmove=false
							for j in @aiMoveMemory[1]
								slepmove=true if (j.id==getID(PBMoves,:SPORE) || j.id==getID(PBMoves,:SLEEPPOWDER) || j.id==getID(PBMoves,:HYPNOSIS) || j.id==getID(PBMoves,:DARKVOID) || j.id==getID(PBMoves,:GRASSWHISTLE) || j.id==getID(PBMoves,:LOVELYKISS) || j.id==getID(PBMoves,:SING))                
							end    
							monscore+=20 if slepmove
						end  
					end					
				end	  
				if isConst?(i.ability,PBAbilities,:DRIZZLE) || isConst?(i.ability,PBAbilities,:PRIMORDIALSEA) ||
					(isConst?(i.species,PBSpecies,:ELECTRUXO) && isConst?(i.item,PBItems,:ELECTRUXOLITE) && (@battlers[1].isFainted? || @battlers[3].isFainted?))
					monscore+=40 if opponent1.pbHasType?(:FIRE)
					monscore+=40 if opponent2.pbHasType?(:FIRE)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							typecheck=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if isConst?(j.type,PBTypes,:FIRE)
									typecheck=true
								end
							end
							monscore+=15 if typecheck
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							typecheck=false
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if isConst?(j.type,PBTypes,:FIRE)
									typecheck=true
								end
							end
							monscore+=15 if typecheck
						end            
					else
						if @aiMoveMemory[1].length!=0
							typecheck=false
							for j in @aiMoveMemory[1]
								if isConst?(j.type,PBTypes,:FIRE)
									typecheck=true
								end
							end
							monscore+=15 if typecheck
						end   
					end   
				end        
				if isConst?(i.ability,PBAbilities,:LIMBER)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							paracheck=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.id==getID(PBMoves,:THUNDERWAVE) || j.id==getID(PBMoves,:STUNSPORE) || j.id==getID(PBMoves,:GLARE)
									paracheck=true
								end                
							end
							monscore+=15 if paracheck
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							paracheck=false
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.id==getID(PBMoves,:THUNDERWAVE) || j.id==getID(PBMoves,:STUNSPORE) || j.id==getID(PBMoves,:GLARE)
									paracheck=true
								end                
							end
							monscore+=15 if paracheck
						end            
					else
						if @aiMoveMemory[1].length!=0
							paracheck=false
							for j in @aiMoveMemory[1]
								if j.id==getID(PBMoves,:THUNDERWAVE) || j.id==getID(PBMoves,:STUNSPORE) || j.id==getID(PBMoves,:GLARE)
									paracheck=true
								end                
							end
							monscore+=15 if paracheck
						end   
					end        
				end
				if isConst?(i.ability,PBAbilities,:OBLIVIOUS)
					monscore+=20 if isConst?(opponent1.ability,PBAbilities,:CUTECHARM) || isConst?(opponent2.ability,PBAbilities,:CUTECHARM)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0              
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.id==getID(PBMoves,:ATTRACT)
									monscore+=20
								end                
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.id==getID(PBMoves,:ATTRACT)
									monscore+=20
								end                
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.id==getID(PBMoves,:ATTRACT)
									monscore+=20
								end                
							end
						end   
					end        
				end    
				if isConst?(i.ability,PBAbilities,:COMPOUNDEYES)
					if isConst?(opponent1.item,PBItems,:LAXINCENSE) || isConst?(opponent1.item,PBItems,:BRIGHTPOWDER) || opponent1.stages[PBStats::EVASION]>0
						monscore+=25
					end
					if isConst?(opponent2.item,PBItems,:LAXINCENSE) || isConst?(opponent2.item,PBItems,:BRIGHTPOWDER) || opponent2.stages[PBStats::EVASION]>0
						monscore+=25
					end   
				end
				if isConst?(i.ability,PBAbilities,:NEUTRALIZINGGAS)
					if isConst?(opponent1.ability,PBAbilities,:ACCELERATION) || isConst?(opponent2.ability,PBAbilities,:ACCELERATION) || 
						isConst?(opponent1.ability,PBAbilities,:CONTRARY) || isConst?(opponent2.ability,PBAbilities,:CONTRARY) || 
						isConst?(opponent1.ability,PBAbilities,:HEATPROOF) || isConst?(opponent2.ability,PBAbilities,:HEATPROOF) || 
						isConst?(opponent1.ability,PBAbilities,:SERENEGRACE) || isConst?(opponent2.ability,PBAbilities,:SERENEGRACE) || 
						isConst?(opponent1.ability,PBAbilities,:TOUGHCLAWS) || isConst?(opponent2.ability,PBAbilities,:TOUGHCLAWS) || 
						isConst?(opponent1.ability,PBAbilities,:STRONGJAW) || isConst?(opponent2.ability,PBAbilities,:STRONGJAW) || 
						isConst?(opponent1.ability,PBAbilities,:SHEERFORCE) || isConst?(opponent2.ability,PBAbilities,:SHEERFORCE)
						monscore+=40 
					elsif isConst?(opponent1.ability,PBAbilities,:STURDY) || isConst?(opponent2.ability,PBAbilities,:STURDY) || 
						isConst?(opponent1.ability,PBAbilities,:LEADSKIN) || isConst?(opponent2.ability,PBAbilities,:LEADSKIN) || 
						(isConst?(opponent1.ability,PBAbilities,:GUTS) && opponent1.status!=0) || (isConst?(opponent2.ability,PBAbilities,:GUTS)	 && opponent2.status!=0) || 
						isConst?(opponent1.ability,PBAbilities,:HUSTLE) || isConst?(opponent2.ability,PBAbilities,:HUSTLE)	
						monscore+=80 			
					end	
				end				
				if isConst?(i.ability,PBAbilities,:INSOMNIA) || isConst?(i.ability,PBAbilities,:VITALSPIRIT)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0          
							slepmove=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]                
								slepmove=true if (j.id==getID(PBMoves,:SPORE) || j.id==getID(PBMoves,:SLEEPPOWDER) || j.id==getID(PBMoves,:HYPNOSIS) || j.id==getID(PBMoves,:DARKVOID) || j.id==getID(PBMoves,:GRASSWHISTLE) || j.id==getID(PBMoves,:LOVELYKISS) || j.id==getID(PBMoves,:SING))
							end    
							monscore+=20 if slepmove
						end
					else
						if @aiMoveMemory[1].length>0          
							slepmove=false
							for j in @aiMoveMemory[1]
								slepmove=true if (j.id==getID(PBMoves,:SPORE) || j.id==getID(PBMoves,:SLEEPPOWDER) || j.id==getID(PBMoves,:HYPNOSIS) || j.id==getID(PBMoves,:DARKVOID) || j.id==getID(PBMoves,:GRASSWHISTLE) || j.id==getID(PBMoves,:LOVELYKISS) || j.id==getID(PBMoves,:SING))                
							end    
							monscore+=20 if slepmove
						end  
					end
				end         
				if isConst?(i.ability,PBAbilities,:POISONHEAL) || isConst?(i.ability,PBAbilities,:TOXICBOOST) || isConst?(i.ability,PBAbilities,:IMMUNITY)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0          
							poismove=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]                
								poismove=true if (j.id==getID(PBMoves,:TOXIC) || j.id==getID(PBMoves,:POISONPOWDER) || j.id==getID(PBMoves,:POISONGAS) || j.id==getID(PBMoves,:NUCLEARWASTE))                
							end    
							monscore+=20 if poismove
						end
					else
						if @aiMoveMemory[1].length>0          
							poismove=false
							for j in @aiMoveMemory[1]
								poismove=true if (j.id==getID(PBMoves,:TOXIC) || j.id==getID(PBMoves,:POISONPOWDER) || j.id==getID(PBMoves,:POISONGAS) || j.id==getID(PBMoves,:NUCLEARWASTE))                
							end    
							monscore+=20 if poismove
						end  
					end
				end               
				if isConst?(i.ability,PBAbilities,:MAGICGUARD)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0
							leechmove=false
							burnmove=false
							poismove=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								leechmove=true if j.id==getID(PBMoves,:LEECHSEED)
								burnmove=true if  j.id==getID(PBMoves,:WILLOWISP)              
								poismove=true if (j.id==getID(PBMoves,:TOXIC) || j.id==getID(PBMoves,:POISONPOWDER) || j.id==getID(PBMoves,:POISONGAS) || j.id==getID(PBMoves,:NUCLEARWASTE))
							end  
							monscore+=20 if leechmove
							monscore+=20 if burnmove
							monscore+=20 if poismove              
						end
					else
						if @aiMoveMemory[1].length>0
							leechmove=false
							burnmove=false
							poismove=false
							for j in @aiMoveMemory[1]
								leechmove=true if j.id==getID(PBMoves,:LEECHSEED)
								burnmove=true if  j.id==getID(PBMoves,:WILLOWISP)             
								poismove=true if (j.id==getID(PBMoves,:TOXIC) || j.id==getID(PBMoves,:POISONPOWDER) || j.id==getID(PBMoves,:POISONGAS) || j.id==getID(PBMoves,:NUCLEARWASTE))
							end 
							monscore+=20 if leechmove
							monscore+=20 if burnmove
							monscore+=20 if poismove               
						end            
					end          
				end        
				if isConst?(i.ability,PBAbilities,:WATERVEIL) || isConst?(i.ability,PBAbilities,:FLAREBOOST)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0          
							burnmove=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]                
								burnmove=true if  j.id==getID(PBMoves,:WILLOWISP) 
							end    
							if burnmove
								monscore+=10
								if isConst?(i.ability,PBAbilities,:FLAREBOOST)
									monscore+=10
								end
							end              
						end
					else
						if @aiMoveMemory[1].length>0          
							burnmove=false
							for j in @aiMoveMemory[1]
								burnmove=true if  j.id==getID(PBMoves,:WILLOWISP) 
							end    
							if burnmove
								monscore+=10
								if isConst?(i.ability,PBAbilities,:FLAREBOOST)
									monscore+=10
								end
							end
						end  
					end
				end               
				if isConst?(i.ability,PBAbilities,:OWNTEMPO)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0          
							confumove=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]                
								confumove=true if  j.id==getID(PBMoves,:CONFUSERAY) || j.id==getID(PBMoves,:SUPERSONIC) || j.id==getID(PBMoves,:FLATTER) || j.id==getID(PBMoves,:SWAGGER) || j.id==getID(PBMoves,:SWEETKISS) || j.id==getID(PBMoves,:TEETERDANCE)
							end    
							if confumove
								monscore+=20
							end              
						end
					else
						if @aiMoveMemory[1].length>0          
							confumove=false
							for j in @aiMoveMemory[1]
								confumove=true if  j.id==getID(PBMoves,:CONFUSERAY) || j.id==getID(PBMoves,:SUPERSONIC) || j.id==getID(PBMoves,:FLATTER) || j.id==getID(PBMoves,:SWAGGER) || j.id==getID(PBMoves,:SWEETKISS) || j.id==getID(PBMoves,:TEETERDANCE)
							end    
							if confumove
								monscore+=20
							end
						end  
					end
				end 
				if (isConst?(i.ability,PBAbilities,:LAZY) && (@field.effects[PBEffects::ElectricTerrain]>0 || @field.effects[PBEffects::MistyTerrain]>0))
					monscore+=60       
				end					
				if (isConst?(i.ability,PBAbilities,:INTIMIDATE) && @field.effects[PBEffects::MistyTerrain]==0) || isConst?(i.ability,PBAbilities,:FURCOAT) || isConst?(i.ability,PBAbilities,:STAMINA)
					if opponent1.attack>opponent1.spatk
						monscore+=40
					end
					if opponent2.attack>opponent2.spatk
						monscore+=40
					end          
				end 				
				if ((isConst?(i.ability,PBAbilities,:PETRIFY) || (isConst?(i.species,PBSpecies,:ARBOK) && i.item == PBItems::ARBOKITE)) && @field.effects[PBEffects::MistyTerrain]==0)
					if opponent1.speed>@battlers[1].speed || opponent1.speed>@battlers[3].speed
						monscore+=40
					end
					if opponent2.speed>@battlers[1].speed || opponent2.speed>@battlers[3].speed
						monscore+=40
					end          
				end				       
				if isConst?(i.ability,PBAbilities,:WONDERGUARD)
					dievar = false
					instantdievar=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if isConst?(j.type,PBTypes,:FIRE) || isConst?(j.type,PBTypes,:GHOST) || isConst?(j.type,PBTypes,:DARK) || isConst?(j.type,PBTypes,:ROCK) || isConst?(j.type,PBTypes,:FLYING)
									dievar=true
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if isConst?(j.type,PBTypes,:FIRE) || isConst?(j.type,PBTypes,:GHOST) || isConst?(j.type,PBTypes,:DARK) || isConst?(j.type,PBTypes,:ROCK) || isConst?(j.type,PBTypes,:FLYING)
									dievar=true
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if isConst?(j.type,PBTypes,:FIRE) || isConst?(j.type,PBTypes,:GHOST) || isConst?(j.type,PBTypes,:DARK) || isConst?(j.type,PBTypes,:ROCK) || isConst?(j.type,PBTypes,:FLYING)
									dievar=true
								end
							end
						end   
					end   
					if @weather==PBWeather::HAIL || PBWeather::SANDSTORM
						dievar=true
						instantdievar=true
					end
					if i.status==PBStatuses::BURN || i.status==PBStatuses::POISON
						dievar=true
						instantdievar=true
					end
					if currentmon.pbOwnSide.effects[PBEffects::StealthRock] || currentmon.pbOwnSide.effects[PBEffects::Spikes]>0 || currentmon.pbOwnSide.effects[PBEffects::ToxicSpikes]>0
						dievar=true
						instantdievar=true
					end
					if isConst?(opponent1.ability,PBAbilities,:MOLDBREAKER) || (isConst?(opponent1.species,PBSpecies,:GYARADOS) && opponent1.item == PBItems::GYARADOSITE && opponent1.willmega) || 
						isConst?(opponent1.ability,PBAbilities,:TURBOBLAZE) || isConst?(opponent1.ability,PBAbilities,:TERAVOLT)
						dievar=true
					end
					if isConst?(opponent2.ability,PBAbilities,:MOLDBREAKER) || (isConst?(opponent2.species,PBSpecies,:GYARADOS) && opponent2.item == PBItems::GYARADOSITE && opponent2.willmega) || 
						isConst?(opponent2.ability,PBAbilities,:TURBOBLAZE) || isConst?(opponent2.ability,PBAbilities,:TERAVOLT)
						dievar=true
					end          
					monscore+=90 if !dievar
					monscore-=90 if instantdievar
				end        
				if isConst?(i.ability,PBAbilities,:EFFECTSPORE) || isConst?(i.ability,PBAbilities,:STATIC) || isConst?(i.ability,PBAbilities,:POISONPOINT) || isConst?(i.ability,PBAbilities,:ROUGHSKIN) || isConst?(i.ability,PBAbilities,:IRONBARBS) || isConst?(i.ability,PBAbilities,:FLAMEBODY) || isConst?(i.ability,PBAbilities,:CUTECHARM) || isConst?(i.ability,PBAbilities,:MUMMY) || isConst?(i.ability,PBAbilities,:AFTERMATH) || isConst?(i.ability,PBAbilities,:GOOEY)
					biggestpower=0
					biggestcontact=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if j.isContactMove?
										biggestcontact=true 
									else
										biggestcontact=false
									end                  
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if j.isContactMove?
										biggestcontact=true 
									else
										biggestcontact=false
									end                  
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if j.isContactMove?
										biggestcontact=true 
									else
										biggestcontact=false
									end                  
								end
							end
						end   
					end   
					monscore+=30 if biggestcontact
				end        
				if isConst?(i.ability,PBAbilities,:TRACE)
					if isConst?(opponent1.ability,PBAbilities,:WATERABSORB) || 
						isConst?(opponent1.ability,PBAbilities,:VOLTABSORB) || 
						isConst?(opponent1.ability,PBAbilities,:STORMDRAIN) || 
						isConst?(opponent1.ability,PBAbilities,:MOTORDRIVE) || 
						isConst?(opponent1.ability,PBAbilities,:FLASHFIRE) || 
						isConst?(opponent1.ability,PBAbilities,:LEVITATE) || 
						isConst?(opponent1.ability,PBAbilities,:LEADSKIN) || 
						isConst?(opponent1.ability,PBAbilities,:DISENCHANT) ||
						isConst?(opponent1.ability,PBAbilities,:LIGHTNINGROD) || 
						isConst?(opponent1.ability,PBAbilities,:SAPSIPPER) || 
						isConst?(opponent1.ability,PBAbilities,:DRYSKIN) || 
						isConst?(opponent1.ability,PBAbilities,:SLUSHRUSH) || 
						isConst?(opponent1.ability,PBAbilities,:SANDRUSH) || 
						isConst?(opponent1.ability,PBAbilities,:SWIFTSWIM) || 
						isConst?(opponent1.ability,PBAbilities,:CHLOROPHYLL) || 
						isConst?(opponent1.ability,PBAbilities,:SPEEDBOOST) || 
						isConst?(opponent1.ability,PBAbilities,:WONDERGUARD) || 
						isConst?(opponent1.ability,PBAbilities,:PRANKSTER) || 
						(i.speed>opponent1.pbSpeed && (isConst?(opponent1.ability,PBAbilities,:ADAPTABILITY) || isConst?(opponent1.ability,PBAbilities,:DOWNLOAD) || isConst?(opponent1.ability,PBAbilities,:PROTEAN))) || 
						(opponent1.attack>opponent1.spatk && isConst?(opponent1.ability,PBAbilities,:INTIMIDATE)) || 
						isConst?(opponent1.ability,PBAbilities,:UNAWARE)
						(i.hp==i.totalhp && (isConst?(opponent1.ability,PBAbilities,:MULTISCALE) || isConst?(opponent1.ability,PBAbilities,:SHADOWSHIELD)))
						monscore+=60
					end          
				end
				if isConst?(i.ability,PBAbilities,:MAGMAARMOR)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							typecheck=false
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if isConst?(j.type,PBTypes,:ICE)
									typecheck=true
								end
							end
							monscore+=20 if typecheck
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							typecheck=false
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if isConst?(j.type,PBTypes,:ICE)
									typecheck=true
								end
							end
							monscore+=20 if typecheck
						end            
					else
						if @aiMoveMemory[1].length!=0
							typecheck=false
							for j in @aiMoveMemory[1]
								if isConst?(j.type,PBTypes,:ICE)
									typecheck=true
								end
							end
							monscore+=20 if typecheck
						end   
					end   
				end  
				if isConst?(i.ability,PBAbilities,:SOUNDPROOF)
					biggestpower=0
					biggestsound=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if j.isSoundBased?
										biggestsound=true 
									else
										biggestsound=false
									end                  
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if j.isSoundBased?
										biggestsound=true 
									else
										biggestsound=false
									end                   
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if j.isSoundBased?
										biggestsound=true 
									else
										biggestsound=false
									end                  
								end
							end
						end   
					end   
					monscore+=60 if biggestsound
				end       
				if isConst?(i.ability,PBAbilities,:THICKFAT)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:ICE) || isConst?(j.type,PBTypes,:FIRE)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:ICE) || isConst?(j.type,PBTypes,:FIRE)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:ICE) || isConst?(j.type,PBTypes,:FIRE)
										typecheck=true 
									else
										typecheck=false
									end                    
								end
							end
						end   
					end   
					monscore+=30 if typecheck
				end           
				if isConst?(i.ability,PBAbilities,:LIQUIDOOZE)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0          
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]                
								monscore+=40 if  j.id==getID(PBMoves,:LEECHSEED) || j.function==0xDD || j.function==0x139 || j.function==0x158
							end                
						end
					else
						if @aiMoveMemory[1].length>0          
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]                
								monscore+=40 if  j.id==getID(PBMoves,:LEECHSEED) || j.function==0xDD || j.function==0x139 || j.function==0x158
							end  
						end  
					end
				end        
				if isConst?(i.ability,PBAbilities,:RIVALRY)
					if i.gender==opponent1.gender
						monscore+=30
					end
					if i.gender==opponent2.gender
						monscore+=30
					end   
				end
				if isConst?(i.ability,PBAbilities,:SCRAPPY)
					if opponent1.pbHasType?(PBTypes::GHOST)
						monscore+=30
					end
					if opponent2.pbHasType?(PBTypes::GHOST)
						monscore+=30
					end   
				end 
				if isConst?(i.ability,PBAbilities,:GEIGERSENSE)
					if opponent1.pbHasType?(PBTypes::NUCLEAR)
						monscore+=30
					end
					if opponent2.pbHasType?(PBTypes::NUCLEAR)
						monscore+=30
					end 
					if @battlers[1].pbHasType?(PBTypes::NUCLEAR) || @battlers[3].pbHasType?(PBTypes::NUCLEAR)
						monscore+=30
					end    
				end       
				if isConst?(i.ability,PBAbilities,:LIGHTMETAL)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0          
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]                
								monscore+=10 if  j.id==getID(PBMoves,:GRASSKNOT) || j.id==getID(PBMoves,:LOWKICK)
							end                
						end
					else
						if @aiMoveMemory[1].length>0          
							for j in @aiMoveMemory[1]               
								monscore+=10 if  j.id==getID(PBMoves,:GRASSKNOT) || j.id==getID(PBMoves,:LOWKICK)
							end  
						end  
					end
				end  
				if isConst?(i.ability,PBAbilities,:ANALYTIC)
					if ((i.speed<opponent1.pbSpeed) ^ (@trickroom!=0))
						monscore+=30
					end
					if ((i.speed<opponent2.pbSpeed) ^ (@trickroom!=0))
						monscore+=30
					end   
				end    
				if isConst?(i.ability,PBAbilities,:ILLUSION)
					monscore+=40
				end
				#~ if isConst?(i.ability,PBAbilities,:IMPOSTER)
				#~ monscore+= (20)*opponent1.stages[PBStats::ATTACK] 
				#~ monscore+= (20)*opponent1.stages[PBStats::SPATK]
				#~ monscore+=50 if isConst?(opponent1.ability,PBAbilities,:PUREPOWER) || isConst?(opponent1.ability,PBAbilities,:HUGEPOWER) || isConst?(opponent1.ability,PBAbilities,:MOXIE) || isConst?(opponent1.ability,PBAbilities,:SPEEDBOOST) || isConst?(opponent1.ability,PBAbilities,:BEASTBOOST) || isConst?(opponent1.ability,PBAbilities,:SOULHEART) || isConst?(opponent1.ability,PBAbilities,:WONDERGUARD) || isConst?(opponent1.ability,PBAbilities,:PROTEAN) || SilvallyCheck(opponent1, "fire")
				#~ monscore+=30 if (opponent1.level>i.level) || opp1roles.include?("Sweeper")
				#~ end        
				if isConst?(i.ability,PBAbilities,:MOXIE)
					monscore+=40 if ((i.speed>opponent1.pbSpeed) ^ (@trickroom!=0)) && (opponent1.hp/opponent1.totalhp<0.5)
					if @doublebattle
						monscore+=40 if ((i.speed>opponent2.pbSpeed) ^ (@trickroom!=0)) && (opponent2.hp/opponent2.totalhp<0.5)
					end
				end  
				if isConst?(i.ability,PBAbilities,:SPEEDBOOST)
					monscore+=25 if (i.speed>opponent1.pbSpeed) && (opponent1.hp/opponent1.totalhp<0.3)
					if @doublebattle
						monscore+=25 if (i.speed>opponent2.pbSpeed) && (opponent2.hp/opponent2.totalhp<0.3)
					end
				end
				if isConst?(i.ability,PBAbilities,:JUSTIFIED)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:DARK)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:DARK)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:DARK)
										typecheck=true 
									else
										typecheck=false
									end                    
								end
							end
						end   
					end   
					monscore+=30 if typecheck
				end  
				if isConst?(i.ability,PBAbilities,:RATTLED)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:DARK) || isConst?(j.type,PBTypes,:GHOST) || isConst?(j.type,PBTypes,:BUG)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:DARK) || isConst?(j.type,PBTypes,:GHOST) || isConst?(j.type,PBTypes,:BUG)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:DARK) || isConst?(j.type,PBTypes,:GHOST) || isConst?(j.type,PBTypes,:BUG)
										typecheck=true 
									else
										typecheck=false
									end                    
								end
							end
						end
					end
					monscore+=15 if typecheck
				end
				if isConst?(i.ability,PBAbilities,:IRONBARBS) || isConst?(i.ability,PBAbilities,:ROUGHSKIN)
					monscore+=30 if isConst?(opponent1.ability,PBAbilities,:SKILLLINK)
					monscore+=30 if isConst?(opponent2.ability,PBAbilities,:SKILLLINK)
				end
				if isConst?(i.ability,PBAbilities,:PRANKSTER)
					monscore+=50 if ((opponent1.pbSpeed>i.speed) ^ (@trickroom!=0))
					monscore+=50 if ((opponent2.pbSpeed>i.speed) ^ (@trickroom!=0))
				end
				if isConst?(i.ability,PBAbilities,:GALEWINGS)
					monscore+=50 if ((opponent1.pbSpeed>i.speed) ^ (@trickroom!=0))
					monscore+=50 if ((opponent2.pbSpeed>i.speed) ^ (@trickroom!=0))
				end
				if isConst?(i.ability,PBAbilities,:HEATPROOF)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:FIRE)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:FIRE)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:FIRE)
										typecheck=true 
									else
										typecheck=false
									end                    
								end
							end
						end   
					end   
					monscore+=60 if typecheck
				end  
				if isConst?(i.ability,PBAbilities,:LEVITATE)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:GROUND)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:GROUND)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:GROUND)
										typecheck=true 
									else
										typecheck=false
									end                    
								end
							end
						end   
					end   
					monscore+=60 if typecheck
				end  				
				if isConst?(i.ability,PBAbilities,:LEADSKIN)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:NUCLEAR)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:NUCLEAR)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:NUCLEAR)
										typecheck=true 
									else
										typecheck=false
									end                    
								end
							end
						end   
					end   
					monscore+=60 if typecheck
				end  
				if isConst?(i.ability,PBAbilities,:DISENCHANT)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:FAIRY)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:FAIRY)
										typecheck=true 
									else
										typecheck=false
									end                   
								end
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:FAIRY)
										typecheck=true 
									else
										typecheck=false
									end                    
								end
							end
						end   
					end   
					monscore+=60 if typecheck
				end         
				if isConst?(i.ability,PBAbilities,:AURABREAK)
					monscore+=50 if isConst?(opponent1.ability,PBAbilities,:FAIRYAURA) || isConst?(opponent1.ability,PBAbilities,:DARKAURA)
					monscore+=50 if isConst?(opponent2.ability,PBAbilities,:FAIRYAURA) || isConst?(opponent2.ability,PBAbilities,:DARKAURA)
				end
				if isConst?(i.ability,PBAbilities,:PROTEAN)
					monscore+=40 if ((i.speed>opponent1.pbSpeed) ^ (@trickroom!=0)) || ((i.speed>opponent2.pbSpeed) ^ (@trickroom!=0))
				end
				if isConst?(i.ability,PBAbilities,:SANDSTREAM) || isConst?(i.ability,PBAbilities,:SNOWWARNING) 
					monscore+=70 if isConst?(opponent1.ability,PBAbilities,:WONDERGUARD) 
					monscore+=70 if isConst?(opponent2.ability,PBAbilities,:WONDERGUARD) 
				end
				if isConst?(i.ability,PBAbilities,:STURDY) && i.hp == i.totalhp 
					if currentmon.hp != 0 # hard switch 
						monscore -= 80 
					end
				end
				if isConst?(i.ability,PBAbilities,:DAZZLING) || isConst?(i.ability,PBAbilities,:QUEENLYMAJESTY)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								monscore+=20 if j.priority>0
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								monscore+=20 if j.priority>0
							end
						end            
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								monscore+=20 if j.priority>0
							end
						end   
					end   
				end 				
			end
			PBDebug.log(sprintf("Abilities: %d",monscore)) if $INTERNAL
			#Items
			if skill>=PBTrainerAI.highSkill
				if isConst?(i.item,PBItems,:ROCKYHELMET)
					monscore+=30 if isConst?(opponent1.ability,PBAbilities,:SKILLLINK)
					monscore+=30 if isConst?(opponent2.ability,PBAbilities,:SKILLLINK)
					biggestpower=0
					contactcheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								id = j.id
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if j.isContactMove?
										contactcheck=true
									else
										contactcheck=false
									end
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if j.isContactMove?
										contactcheck=true
									else
										contactcheck=false
									end
								end
							end
						end
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if j.isContactMove?
										contactcheck=true
									else
										contactcheck=false
									end
								end
							end
						end
					end
					monscore+=30 if contactcheck
				end
				if isConst?(i.item,PBItems,:AIRBALLOON)
					allground=true
					biggestpower=0
					groundcheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if !isConst?(j.type,PBTypes,:GROUND)
									allground=false
								end
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:GROUND)
										groundcheck=true
									else
										groundcheck=false
									end
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if !isConst?(j.type,PBTypes,:GROUND)
									allground=false
								end
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:GROUND)
										groundcheck=true
									else
										groundcheck=false
									end
								end
							end
						end
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if !isConst?(j.type,PBTypes,:GROUND)
									allground=false
								end
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:GROUND)
										groundcheck=true 
									else
										groundcheck=false
									end
								end
							end
						end
					end
					monscore+=60 if groundcheck
					monscore+=100 if allground
				end
				if isConst?(i.item,PBItems,:FLOATSTONE)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								monscore+=10 if  j.id==getID(PBMoves,:GRASSKNOT) || j.id==getID(PBMoves,:LOWKICK)
							end
						end
					else
						if @aiMoveMemory[1].length>0
							for j in @aiMoveMemory[1]
								monscore+=10 if  j.id==getID(PBMoves,:GRASSKNOT) || j.id==getID(PBMoves,:LOWKICK)
							end
						end
					end
				end
				if isConst?(i.item,PBItems,:DESTINYKNOT)
					monscore+=20 if isConst?(opponent1.ability,PBAbilities,:CUTECHARM)
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length>0                  
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]                
								monscore+=20 if  j.id==getID(PBMoves,:ATTRACT)
							end
						end
					else
						if @aiMoveMemory[1].length>0
							for j in @aiMoveMemory[1]
								monscore+=20 if  j.id==getID(PBMoves,:ATTRACT)
							end
						end
					end
				end
				if isConst?(i.item,PBItems,:ABSORBBULB)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:WATER)
										typecheck=true 
									else
										typecheck=false
									end
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:WATER)
										typecheck=true
									else
										typecheck=false
									end
								end
							end
						end
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:WATER)
										typecheck=true
									else
										typecheck=false
									end
								end
							end
						end
					end
					monscore+=25 if typecheck
				end
				if isConst?(i.item,PBItems,:CELLBATTERY)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:ELECTRIC)
										typecheck=true 
									else
										typecheck=false
									end
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:ELECTRIC)
										typecheck=true 
									else
										typecheck=false
									end
								end
							end
						end
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:ELECTRIC)
										typecheck=true
									else
										typecheck=false
									end
								end
							end
						end
					end
					monscore+=25 if typecheck
				end
				if isConst?(i.item,PBItems,:FOCUSSASH) || isConst?(i.ability,PBAbilities,:STURDY)
					if @weather==PBWeather::SANDSTORM || @weather==PBWeather::HAIL || 
						currentmon.pbOwnSide.effects[PBEffects::StealthRock] || 
						currentmon.pbOwnSide.effects[PBEffects::Spikes]>0 || 
						currentmon.pbOwnSide.effects[PBEffects::ToxicSpikes]>0
						monscore-=30
					end
				end
				if isConst?(i.item,PBItems,:SNOWBALL)
					biggestpower=0
					typecheck=false
					if skill>=PBTrainerAI.bestSkill
						if @aiMoveMemory[2][opponent1.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent1.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:ICE)
										typecheck=true 
									else
										typecheck=false
									end
								end
							end
						end
						if @aiMoveMemory[2][opponent2.pokemonIndex].length!=0
							for j in @aiMoveMemory[2][opponent2.pokemonIndex]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:ICE)
										typecheck=true 
									else
										typecheck=false
									end
								end
							end
						end
					else
						if @aiMoveMemory[1].length!=0
							for j in @aiMoveMemory[1]
								if j.basedamage>biggestpower
									biggestpower=j.basedamage
									if isConst?(j.type,PBTypes,:ICE)
										typecheck=true 
									else
										typecheck=false
									end
								end
							end
						end
					end
					monscore+=25 if typecheck
				end
				if isConst?(i.item,PBItems,:PROTECTIVEPADS)
					if isConst?(i.ability,PBAbilities,:EFFECTSPORE) || isConst?(i.ability,PBAbilities,:STATIC) || isConst?(i.ability,PBAbilities,:POISONPOINT) || isConst?(i.ability,PBAbilities,:ROUGHSKIN) || isConst?(i.ability,PBAbilities,:IRONBARBS) || isConst?(i.ability,PBAbilities,:FLAMEBODY) || isConst?(i.ability,PBAbilities,:CUTECHARM) || isConst?(i.ability,PBAbilities,:MUMMY) || isConst?(i.ability,PBAbilities,:AFTERMATH) || isConst?(i.ability,PBAbilities,:GOOEY) || isConst?(opponent1.item,PBItems,:ROCKYHELMET)
						monscore+=25
					end
				end
			end
			PBDebug.log(sprintf("Items: %d",monscore)) if $INTERNAL
			if currentmon.pbOwnSide.effects[PBEffects::StealthRock] || 
				currentmon.pbOwnSide.effects[PBEffects::Spikes]>0 
				monscore*= (i.hp/i.totalhp)
			end
			hazpercent = totalHazardDamage(currentmon.pbOwnSide,i.type1,i.type2,i.type3,i.isAirborneAI?,skill)
			if hazpercent>(i.hp/i.totalhp)*100
				monscore=1
			end
			if theseRoles.include?("Ace") #&& skill>=PBTrainerAI.bestSkill
				monscore*= 0.1
			end 
			if theseRoles.include?("Second") && @doublebattle #&& skill>=PBTrainerAI.bestSkill
				monscore*= 0.2
			end 			 
			PBDebug.log(sprintf("Score: %d",monscore)) if $INTERNAL
			PBDebug.log(sprintf(" ")) if $INTERNAL
			scorearray.push(monscore)
		end
		count=-1
		bestcount=-1
		highscore=-1000000000000000000000000
		for score in scorearray
			count+=1
			next if party[count].nil?
			if score>highscore
				highscore=score
				bestcount=count
			elsif score==highscore
				if party[count].hp>party[bestcount].hp
					bestcount=count
				end
			end
		end
		if !pbCanSwitchLax?(currentmon.index,bestcount,false)
			return -1
		else
			return bestcount
		end
	end
	
	def totalHazardDamage(side,type1,type2,type3,airborne,skill)
		percentdamage = 0
		if side.effects[PBEffects::Spikes]>0 && (!airborne || @field.effects[PBEffects::Gravity]>0)
			spikesdiv=[8,8,6,4][side.effects[PBEffects::Spikes]]
			percentdamage += (100/spikesdiv)
		end
		if side.effects[PBEffects::StealthRock]
			supereff = -1
			atype=getConst(PBTypes,:ROCK) || 0
			eff=PBTypes.getCombinedEffectiveness(atype,type1,type2,type3)
			eff = supereff if supereff > -1
			if eff>0
				percentdamage += 100*(eff/32)
			end
		end
		return percentdamage
	end
	
	################################################################################
	# Choose an action.
	################################################################################
	def pbDefaultChooseEnemyCommand(index)
		if !pbCanShowFightMenu?(index)
			#return if pbEnemyShouldUseItem?(index)
			#return if pbEnemyShouldWithdraw?(index) Old Switching Method
			return if pbShouldSwitch?(index)
			pbAutoChooseMove(index)
			return
		else
			#print 1
			return if pbShouldSwitch?(index)
			#print 2
			#return if pbEnemyShouldWithdraw?(index) Old Switching Method
			#return if pbEnemyShouldUseItem?(index)
			#print 3
			return if pbAutoFightMenu(index)
			#print 4
			pbRegisterMegaEvolution(index) if pbEnemyShouldMegaEvolve?(index) 
			#print 6
			pbChooseMoves(index)
			#print 7
		end
	end
	
	################################################################################
	# Other functions.  
	################################################################################
	def pbDbgPlayerOnly?(idx)
		return true if !$INTERNAL
		return pbOwnedByPlayer?(idx.index) if idx.respond_to?("index")
		return pbOwnedByPlayer?(idx)
	end
	
	def pbStdDev(scores)
		n=0
		sum=0
		scores.each{|s| sum+=s; n+=1 }
		return 0 if n==0
		mean=sum.to_f/n.to_f
		varianceTimesN=0
		for i in 0...scores.length
			if scores[i]>0
				deviation=scores[i].to_f-mean
				varianceTimesN+=deviation*deviation
			end
		end
		# Using population standard deviation 
		# [(n-1) makes it a sample std dev, would be 0 with only 1 sample]
		return Math.sqrt(varianceTimesN/n)
	end
end